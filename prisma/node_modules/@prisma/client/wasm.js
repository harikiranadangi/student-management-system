
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.6.0
 * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
 */
Prisma.prismaVersion = {
  client: "6.6.0",
  engine: "f676762280b54cd07c770017ed3711ddde35f37a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  full_name: 'full_name',
  parentName: 'parentName',
  gender: 'gender',
  email: 'email',
  phone: 'phone',
  address: 'address',
  dob: 'dob',
  img: 'img',
  bloodType: 'bloodType',
  role: 'role',
  createdAt: 'createdAt'
};

exports.Prisma.GradeScalarFieldEnum = {
  id: 'id',
  level: 'level'
};

exports.Prisma.ClassScalarFieldEnum = {
  id: 'id',
  name: 'name',
  supervisorId: 'supervisorId',
  gradeId: 'gradeId'
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  name: 'name',
  day: 'day',
  startTime: 'startTime',
  endTime: 'endTime',
  subjectId: 'subjectId',
  classId: 'classId',
  teacherId: 'teacherId'
};

exports.Prisma.AnnouncementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  date: 'date',
  classId: 'classId'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  date: 'date',
  present: 'present',
  studentId: 'studentId',
  classId: 'classId'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  startTime: 'startTime',
  endTime: 'endTime',
  classId: 'classId'
};

exports.Prisma.ExamScalarFieldEnum = {
  id: 'id',
  title: 'title',
  date: 'date',
  classId: 'classId'
};

exports.Prisma.ExamSubjectScalarFieldEnum = {
  id: 'id',
  examId: 'examId',
  subjectId: 'subjectId',
  maxMarks: 'maxMarks'
};

exports.Prisma.HomeworkScalarFieldEnum = {
  id: 'id',
  description: 'description',
  date: 'date',
  classId: 'classId',
  gradeId: 'gradeId'
};

exports.Prisma.ResultScalarFieldEnum = {
  id: 'id',
  score: 'score',
  studentId: 'studentId',
  examId: 'examId',
  subjectId: 'subjectId'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  username: 'username',
  name: 'name',
  surname: 'surname',
  parentName: 'parentName',
  email: 'email',
  phone: 'phone',
  address: 'address',
  img: 'img',
  bloodType: 'bloodType',
  gender: 'gender',
  dob: 'dob',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt',
  classId: 'classId',
  clerk_id: 'clerk_id',
  academicYear: 'academicYear'
};

exports.Prisma.ClerkStudentsScalarFieldEnum = {
  clerk_id: 'clerk_id',
  user_id: 'user_id',
  username: 'username',
  password: 'password',
  full_name: 'full_name',
  role: 'role',
  studentId: 'studentId'
};

exports.Prisma.SubjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt'
};

exports.Prisma.TeacherScalarFieldEnum = {
  id: 'id',
  username: 'username',
  name: 'name',
  surname: 'surname',
  email: 'email',
  phone: 'phone',
  address: 'address',
  img: 'img',
  bloodType: 'bloodType',
  gender: 'gender',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt',
  supervisor: 'supervisor',
  dob: 'dob',
  classId: 'classId',
  clerk_id: 'clerk_id'
};

exports.Prisma.TeacherSubjectScalarFieldEnum = {
  teacherId: 'teacherId',
  subjectId: 'subjectId'
};

exports.Prisma.ClerkTeachersScalarFieldEnum = {
  clerk_id: 'clerk_id',
  user_id: 'user_id',
  username: 'username',
  password: 'password',
  full_name: 'full_name',
  role: 'role',
  teacherId: 'teacherId'
};

exports.Prisma.FeeStructureScalarFieldEnum = {
  id: 'id',
  gradeId: 'gradeId',
  startDate: 'startDate',
  dueDate: 'dueDate',
  termFees: 'termFees',
  abacusFees: 'abacusFees',
  term: 'term',
  academicYear: 'academicYear'
};

exports.Prisma.FeeTransactionScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  term: 'term',
  studentFeesId: 'studentFeesId',
  amount: 'amount',
  discountAmount: 'discountAmount',
  fineAmount: 'fineAmount',
  receiptDate: 'receiptDate',
  receiptNo: 'receiptNo',
  paymentMode: 'paymentMode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  remarks: 'remarks'
};

exports.Prisma.StudentFeesScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  paidAmount: 'paidAmount',
  abacusPaidAmount: 'abacusPaidAmount',
  feeStructureId: 'feeStructureId',
  discountAmount: 'discountAmount',
  fineAmount: 'fineAmount',
  receiptDate: 'receiptDate',
  receivedDate: 'receivedDate',
  paymentMode: 'paymentMode',
  academicYear: 'academicYear',
  receiptNo: 'receiptNo',
  term: 'term',
  remarks: 'remarks'
};

exports.Prisma.StudentTotalFeesScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  totalPaidAmount: 'totalPaidAmount',
  totalDiscountAmount: 'totalDiscountAmount',
  totalFineAmount: 'totalFineAmount',
  totalAbacusAmount: 'totalAbacusAmount',
  totalFeeAmount: 'totalFeeAmount',
  dueAmount: 'dueAmount',
  status: 'status'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.LessonDay = exports.$Enums.LessonDay = {
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY'
};

exports.Gender = exports.$Enums.Gender = {
  Male: 'Male',
  Female: 'Female'
};

exports.AcademicYear = exports.$Enums.AcademicYear = {
  Y2024_2025: 'Y2024_2025',
  Y2025_2026: 'Y2025_2026'
};

exports.Term = exports.$Enums.Term = {
  TERM_1: 'TERM_1',
  TERM_2: 'TERM_2',
  TERM_3: 'TERM_3',
  TERM_4: 'TERM_4'
};

exports.PaymentMode = exports.$Enums.PaymentMode = {
  CASH: 'CASH',
  ONLINE: 'ONLINE',
  UPI: 'UPI',
  BANK_TRANSFER: 'BANK_TRANSFER'
};

exports.Prisma.ModelName = {
  Admin: 'Admin',
  Grade: 'Grade',
  Class: 'Class',
  Lesson: 'Lesson',
  Announcement: 'Announcement',
  Attendance: 'Attendance',
  Event: 'Event',
  Exam: 'Exam',
  ExamSubject: 'ExamSubject',
  Homework: 'Homework',
  Result: 'Result',
  Student: 'Student',
  ClerkStudents: 'ClerkStudents',
  Subject: 'Subject',
  Teacher: 'Teacher',
  TeacherSubject: 'TeacherSubject',
  ClerkTeachers: 'ClerkTeachers',
  FeeStructure: 'FeeStructure',
  FeeTransaction: 'FeeTransaction',
  StudentFees: 'StudentFees',
  StudentTotalFees: 'StudentTotalFees'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
