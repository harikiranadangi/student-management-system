
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Grade
 * 
 */
export type Grade = $Result.DefaultSelection<Prisma.$GradePayload>
/**
 * Model Class
 * 
 */
export type Class = $Result.DefaultSelection<Prisma.$ClassPayload>
/**
 * Model Lesson
 * 
 */
export type Lesson = $Result.DefaultSelection<Prisma.$LessonPayload>
/**
 * Model Announcement
 * 
 */
export type Announcement = $Result.DefaultSelection<Prisma.$AnnouncementPayload>
/**
 * Model Attendance
 * 
 */
export type Attendance = $Result.DefaultSelection<Prisma.$AttendancePayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model Exam
 * 
 */
export type Exam = $Result.DefaultSelection<Prisma.$ExamPayload>
/**
 * Model ExamSubject
 * 
 */
export type ExamSubject = $Result.DefaultSelection<Prisma.$ExamSubjectPayload>
/**
 * Model Homework
 * 
 */
export type Homework = $Result.DefaultSelection<Prisma.$HomeworkPayload>
/**
 * Model Result
 * 
 */
export type Result = $Result.DefaultSelection<Prisma.$ResultPayload>
/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model ClerkStudents
 * 
 */
export type ClerkStudents = $Result.DefaultSelection<Prisma.$ClerkStudentsPayload>
/**
 * Model Subject
 * 
 */
export type Subject = $Result.DefaultSelection<Prisma.$SubjectPayload>
/**
 * Model Teacher
 * 
 */
export type Teacher = $Result.DefaultSelection<Prisma.$TeacherPayload>
/**
 * Model TeacherSubject
 * 
 */
export type TeacherSubject = $Result.DefaultSelection<Prisma.$TeacherSubjectPayload>
/**
 * Model ClerkTeachers
 * 
 */
export type ClerkTeachers = $Result.DefaultSelection<Prisma.$ClerkTeachersPayload>
/**
 * Model FeeStructure
 * 
 */
export type FeeStructure = $Result.DefaultSelection<Prisma.$FeeStructurePayload>
/**
 * Model FeeTransaction
 * 
 */
export type FeeTransaction = $Result.DefaultSelection<Prisma.$FeeTransactionPayload>
/**
 * Model StudentFees
 * 
 */
export type StudentFees = $Result.DefaultSelection<Prisma.$StudentFeesPayload>
/**
 * Model StudentTotalFees
 * 
 */
export type StudentTotalFees = $Result.DefaultSelection<Prisma.$StudentTotalFeesPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const LessonDay: {
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY'
};

export type LessonDay = (typeof LessonDay)[keyof typeof LessonDay]


export const Gender: {
  Male: 'Male',
  Female: 'Female'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const Term: {
  TERM_1: 'TERM_1',
  TERM_2: 'TERM_2',
  TERM_3: 'TERM_3',
  TERM_4: 'TERM_4'
};

export type Term = (typeof Term)[keyof typeof Term]


export const PaymentMode: {
  CASH: 'CASH',
  ONLINE: 'ONLINE',
  UPI: 'UPI',
  BANK_TRANSFER: 'BANK_TRANSFER'
};

export type PaymentMode = (typeof PaymentMode)[keyof typeof PaymentMode]


export const AcademicYear: {
  Y2024_2025: 'Y2024_2025',
  Y2025_2026: 'Y2025_2026'
};

export type AcademicYear = (typeof AcademicYear)[keyof typeof AcademicYear]

}

export type LessonDay = $Enums.LessonDay

export const LessonDay: typeof $Enums.LessonDay

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type Term = $Enums.Term

export const Term: typeof $Enums.Term

export type PaymentMode = $Enums.PaymentMode

export const PaymentMode: typeof $Enums.PaymentMode

export type AcademicYear = $Enums.AcademicYear

export const AcademicYear: typeof $Enums.AcademicYear

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Admins
 * const admins = await prisma.admin.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Admins
   * const admins = await prisma.admin.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.grade`: Exposes CRUD operations for the **Grade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Grades
    * const grades = await prisma.grade.findMany()
    * ```
    */
  get grade(): Prisma.GradeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.class`: Exposes CRUD operations for the **Class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.class.findMany()
    * ```
    */
  get class(): Prisma.ClassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lesson`: Exposes CRUD operations for the **Lesson** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lessons
    * const lessons = await prisma.lesson.findMany()
    * ```
    */
  get lesson(): Prisma.LessonDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.announcement`: Exposes CRUD operations for the **Announcement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Announcements
    * const announcements = await prisma.announcement.findMany()
    * ```
    */
  get announcement(): Prisma.AnnouncementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attendance`: Exposes CRUD operations for the **Attendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attendances
    * const attendances = await prisma.attendance.findMany()
    * ```
    */
  get attendance(): Prisma.AttendanceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.exam`: Exposes CRUD operations for the **Exam** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exams
    * const exams = await prisma.exam.findMany()
    * ```
    */
  get exam(): Prisma.ExamDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.examSubject`: Exposes CRUD operations for the **ExamSubject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExamSubjects
    * const examSubjects = await prisma.examSubject.findMany()
    * ```
    */
  get examSubject(): Prisma.ExamSubjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.homework`: Exposes CRUD operations for the **Homework** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Homework
    * const homework = await prisma.homework.findMany()
    * ```
    */
  get homework(): Prisma.HomeworkDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.result`: Exposes CRUD operations for the **Result** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Results
    * const results = await prisma.result.findMany()
    * ```
    */
  get result(): Prisma.ResultDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clerkStudents`: Exposes CRUD operations for the **ClerkStudents** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClerkStudents
    * const clerkStudents = await prisma.clerkStudents.findMany()
    * ```
    */
  get clerkStudents(): Prisma.ClerkStudentsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subject.findMany()
    * ```
    */
  get subject(): Prisma.SubjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teacher`: Exposes CRUD operations for the **Teacher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers
    * const teachers = await prisma.teacher.findMany()
    * ```
    */
  get teacher(): Prisma.TeacherDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teacherSubject`: Exposes CRUD operations for the **TeacherSubject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeacherSubjects
    * const teacherSubjects = await prisma.teacherSubject.findMany()
    * ```
    */
  get teacherSubject(): Prisma.TeacherSubjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clerkTeachers`: Exposes CRUD operations for the **ClerkTeachers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClerkTeachers
    * const clerkTeachers = await prisma.clerkTeachers.findMany()
    * ```
    */
  get clerkTeachers(): Prisma.ClerkTeachersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feeStructure`: Exposes CRUD operations for the **FeeStructure** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeeStructures
    * const feeStructures = await prisma.feeStructure.findMany()
    * ```
    */
  get feeStructure(): Prisma.FeeStructureDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feeTransaction`: Exposes CRUD operations for the **FeeTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeeTransactions
    * const feeTransactions = await prisma.feeTransaction.findMany()
    * ```
    */
  get feeTransaction(): Prisma.FeeTransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentFees`: Exposes CRUD operations for the **StudentFees** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentFees
    * const studentFees = await prisma.studentFees.findMany()
    * ```
    */
  get studentFees(): Prisma.StudentFeesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentTotalFees`: Exposes CRUD operations for the **StudentTotalFees** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentTotalFees
    * const studentTotalFees = await prisma.studentTotalFees.findMany()
    * ```
    */
  get studentTotalFees(): Prisma.StudentTotalFeesDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Admin: 'Admin',
    Grade: 'Grade',
    Class: 'Class',
    Lesson: 'Lesson',
    Announcement: 'Announcement',
    Attendance: 'Attendance',
    Event: 'Event',
    Exam: 'Exam',
    ExamSubject: 'ExamSubject',
    Homework: 'Homework',
    Result: 'Result',
    Student: 'Student',
    ClerkStudents: 'ClerkStudents',
    Subject: 'Subject',
    Teacher: 'Teacher',
    TeacherSubject: 'TeacherSubject',
    ClerkTeachers: 'ClerkTeachers',
    FeeStructure: 'FeeStructure',
    FeeTransaction: 'FeeTransaction',
    StudentFees: 'StudentFees',
    StudentTotalFees: 'StudentTotalFees'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "admin" | "grade" | "class" | "lesson" | "announcement" | "attendance" | "event" | "exam" | "examSubject" | "homework" | "result" | "student" | "clerkStudents" | "subject" | "teacher" | "teacherSubject" | "clerkTeachers" | "feeStructure" | "feeTransaction" | "studentFees" | "studentTotalFees"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Grade: {
        payload: Prisma.$GradePayload<ExtArgs>
        fields: Prisma.GradeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GradeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GradeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          findFirst: {
            args: Prisma.GradeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GradeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          findMany: {
            args: Prisma.GradeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>[]
          }
          create: {
            args: Prisma.GradeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          createMany: {
            args: Prisma.GradeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GradeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>[]
          }
          delete: {
            args: Prisma.GradeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          update: {
            args: Prisma.GradeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          deleteMany: {
            args: Prisma.GradeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GradeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GradeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>[]
          }
          upsert: {
            args: Prisma.GradeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          aggregate: {
            args: Prisma.GradeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGrade>
          }
          groupBy: {
            args: Prisma.GradeGroupByArgs<ExtArgs>
            result: $Utils.Optional<GradeGroupByOutputType>[]
          }
          count: {
            args: Prisma.GradeCountArgs<ExtArgs>
            result: $Utils.Optional<GradeCountAggregateOutputType> | number
          }
        }
      }
      Class: {
        payload: Prisma.$ClassPayload<ExtArgs>
        fields: Prisma.ClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findFirst: {
            args: Prisma.ClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findMany: {
            args: Prisma.ClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          create: {
            args: Prisma.ClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          createMany: {
            args: Prisma.ClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          delete: {
            args: Prisma.ClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          update: {
            args: Prisma.ClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          deleteMany: {
            args: Prisma.ClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClassUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          upsert: {
            args: Prisma.ClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          aggregate: {
            args: Prisma.ClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClass>
          }
          groupBy: {
            args: Prisma.ClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassCountArgs<ExtArgs>
            result: $Utils.Optional<ClassCountAggregateOutputType> | number
          }
        }
      }
      Lesson: {
        payload: Prisma.$LessonPayload<ExtArgs>
        fields: Prisma.LessonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LessonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LessonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload>
          }
          findFirst: {
            args: Prisma.LessonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LessonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload>
          }
          findMany: {
            args: Prisma.LessonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload>[]
          }
          create: {
            args: Prisma.LessonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload>
          }
          createMany: {
            args: Prisma.LessonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LessonCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload>[]
          }
          delete: {
            args: Prisma.LessonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload>
          }
          update: {
            args: Prisma.LessonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload>
          }
          deleteMany: {
            args: Prisma.LessonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LessonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LessonUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload>[]
          }
          upsert: {
            args: Prisma.LessonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload>
          }
          aggregate: {
            args: Prisma.LessonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLesson>
          }
          groupBy: {
            args: Prisma.LessonGroupByArgs<ExtArgs>
            result: $Utils.Optional<LessonGroupByOutputType>[]
          }
          count: {
            args: Prisma.LessonCountArgs<ExtArgs>
            result: $Utils.Optional<LessonCountAggregateOutputType> | number
          }
        }
      }
      Announcement: {
        payload: Prisma.$AnnouncementPayload<ExtArgs>
        fields: Prisma.AnnouncementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnnouncementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnnouncementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>
          }
          findFirst: {
            args: Prisma.AnnouncementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnnouncementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>
          }
          findMany: {
            args: Prisma.AnnouncementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>[]
          }
          create: {
            args: Prisma.AnnouncementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>
          }
          createMany: {
            args: Prisma.AnnouncementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnnouncementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>[]
          }
          delete: {
            args: Prisma.AnnouncementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>
          }
          update: {
            args: Prisma.AnnouncementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>
          }
          deleteMany: {
            args: Prisma.AnnouncementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnnouncementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnnouncementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>[]
          }
          upsert: {
            args: Prisma.AnnouncementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>
          }
          aggregate: {
            args: Prisma.AnnouncementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnnouncement>
          }
          groupBy: {
            args: Prisma.AnnouncementGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnnouncementGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnnouncementCountArgs<ExtArgs>
            result: $Utils.Optional<AnnouncementCountAggregateOutputType> | number
          }
        }
      }
      Attendance: {
        payload: Prisma.$AttendancePayload<ExtArgs>
        fields: Prisma.AttendanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttendanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttendanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          findFirst: {
            args: Prisma.AttendanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttendanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          findMany: {
            args: Prisma.AttendanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          create: {
            args: Prisma.AttendanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          createMany: {
            args: Prisma.AttendanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttendanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          delete: {
            args: Prisma.AttendanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          update: {
            args: Prisma.AttendanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          deleteMany: {
            args: Prisma.AttendanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttendanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AttendanceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          upsert: {
            args: Prisma.AttendanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          aggregate: {
            args: Prisma.AttendanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttendance>
          }
          groupBy: {
            args: Prisma.AttendanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttendanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttendanceCountArgs<ExtArgs>
            result: $Utils.Optional<AttendanceCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      Exam: {
        payload: Prisma.$ExamPayload<ExtArgs>
        fields: Prisma.ExamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>
          }
          findFirst: {
            args: Prisma.ExamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>
          }
          findMany: {
            args: Prisma.ExamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>[]
          }
          create: {
            args: Prisma.ExamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>
          }
          createMany: {
            args: Prisma.ExamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>[]
          }
          delete: {
            args: Prisma.ExamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>
          }
          update: {
            args: Prisma.ExamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>
          }
          deleteMany: {
            args: Prisma.ExamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExamUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>[]
          }
          upsert: {
            args: Prisma.ExamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>
          }
          aggregate: {
            args: Prisma.ExamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExam>
          }
          groupBy: {
            args: Prisma.ExamGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExamGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExamCountArgs<ExtArgs>
            result: $Utils.Optional<ExamCountAggregateOutputType> | number
          }
        }
      }
      ExamSubject: {
        payload: Prisma.$ExamSubjectPayload<ExtArgs>
        fields: Prisma.ExamSubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExamSubjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExamSubjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubjectPayload>
          }
          findFirst: {
            args: Prisma.ExamSubjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExamSubjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubjectPayload>
          }
          findMany: {
            args: Prisma.ExamSubjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubjectPayload>[]
          }
          create: {
            args: Prisma.ExamSubjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubjectPayload>
          }
          createMany: {
            args: Prisma.ExamSubjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExamSubjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubjectPayload>[]
          }
          delete: {
            args: Prisma.ExamSubjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubjectPayload>
          }
          update: {
            args: Prisma.ExamSubjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubjectPayload>
          }
          deleteMany: {
            args: Prisma.ExamSubjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExamSubjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExamSubjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubjectPayload>[]
          }
          upsert: {
            args: Prisma.ExamSubjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubjectPayload>
          }
          aggregate: {
            args: Prisma.ExamSubjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExamSubject>
          }
          groupBy: {
            args: Prisma.ExamSubjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExamSubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExamSubjectCountArgs<ExtArgs>
            result: $Utils.Optional<ExamSubjectCountAggregateOutputType> | number
          }
        }
      }
      Homework: {
        payload: Prisma.$HomeworkPayload<ExtArgs>
        fields: Prisma.HomeworkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HomeworkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HomeworkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload>
          }
          findFirst: {
            args: Prisma.HomeworkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HomeworkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload>
          }
          findMany: {
            args: Prisma.HomeworkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload>[]
          }
          create: {
            args: Prisma.HomeworkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload>
          }
          createMany: {
            args: Prisma.HomeworkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HomeworkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload>[]
          }
          delete: {
            args: Prisma.HomeworkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload>
          }
          update: {
            args: Prisma.HomeworkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload>
          }
          deleteMany: {
            args: Prisma.HomeworkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HomeworkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HomeworkUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload>[]
          }
          upsert: {
            args: Prisma.HomeworkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload>
          }
          aggregate: {
            args: Prisma.HomeworkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHomework>
          }
          groupBy: {
            args: Prisma.HomeworkGroupByArgs<ExtArgs>
            result: $Utils.Optional<HomeworkGroupByOutputType>[]
          }
          count: {
            args: Prisma.HomeworkCountArgs<ExtArgs>
            result: $Utils.Optional<HomeworkCountAggregateOutputType> | number
          }
        }
      }
      Result: {
        payload: Prisma.$ResultPayload<ExtArgs>
        fields: Prisma.ResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>
          }
          findFirst: {
            args: Prisma.ResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>
          }
          findMany: {
            args: Prisma.ResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>[]
          }
          create: {
            args: Prisma.ResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>
          }
          createMany: {
            args: Prisma.ResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>[]
          }
          delete: {
            args: Prisma.ResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>
          }
          update: {
            args: Prisma.ResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>
          }
          deleteMany: {
            args: Prisma.ResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResultUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>[]
          }
          upsert: {
            args: Prisma.ResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>
          }
          aggregate: {
            args: Prisma.ResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResult>
          }
          groupBy: {
            args: Prisma.ResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResultCountArgs<ExtArgs>
            result: $Utils.Optional<ResultCountAggregateOutputType> | number
          }
        }
      }
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      ClerkStudents: {
        payload: Prisma.$ClerkStudentsPayload<ExtArgs>
        fields: Prisma.ClerkStudentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClerkStudentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkStudentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClerkStudentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkStudentsPayload>
          }
          findFirst: {
            args: Prisma.ClerkStudentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkStudentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClerkStudentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkStudentsPayload>
          }
          findMany: {
            args: Prisma.ClerkStudentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkStudentsPayload>[]
          }
          create: {
            args: Prisma.ClerkStudentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkStudentsPayload>
          }
          createMany: {
            args: Prisma.ClerkStudentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClerkStudentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkStudentsPayload>[]
          }
          delete: {
            args: Prisma.ClerkStudentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkStudentsPayload>
          }
          update: {
            args: Prisma.ClerkStudentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkStudentsPayload>
          }
          deleteMany: {
            args: Prisma.ClerkStudentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClerkStudentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClerkStudentsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkStudentsPayload>[]
          }
          upsert: {
            args: Prisma.ClerkStudentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkStudentsPayload>
          }
          aggregate: {
            args: Prisma.ClerkStudentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClerkStudents>
          }
          groupBy: {
            args: Prisma.ClerkStudentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClerkStudentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClerkStudentsCountArgs<ExtArgs>
            result: $Utils.Optional<ClerkStudentsCountAggregateOutputType> | number
          }
        }
      }
      Subject: {
        payload: Prisma.$SubjectPayload<ExtArgs>
        fields: Prisma.SubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findFirst: {
            args: Prisma.SubjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findMany: {
            args: Prisma.SubjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          create: {
            args: Prisma.SubjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          createMany: {
            args: Prisma.SubjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          delete: {
            args: Prisma.SubjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          update: {
            args: Prisma.SubjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          deleteMany: {
            args: Prisma.SubjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          upsert: {
            args: Prisma.SubjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          aggregate: {
            args: Prisma.SubjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubject>
          }
          groupBy: {
            args: Prisma.SubjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubjectCountArgs<ExtArgs>
            result: $Utils.Optional<SubjectCountAggregateOutputType> | number
          }
        }
      }
      Teacher: {
        payload: Prisma.$TeacherPayload<ExtArgs>
        fields: Prisma.TeacherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeacherFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeacherFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findFirst: {
            args: Prisma.TeacherFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeacherFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findMany: {
            args: Prisma.TeacherFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          create: {
            args: Prisma.TeacherCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          createMany: {
            args: Prisma.TeacherCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeacherCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          delete: {
            args: Prisma.TeacherDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          update: {
            args: Prisma.TeacherUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          deleteMany: {
            args: Prisma.TeacherDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeacherUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeacherUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          upsert: {
            args: Prisma.TeacherUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          aggregate: {
            args: Prisma.TeacherAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeacher>
          }
          groupBy: {
            args: Prisma.TeacherGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeacherGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeacherCountArgs<ExtArgs>
            result: $Utils.Optional<TeacherCountAggregateOutputType> | number
          }
        }
      }
      TeacherSubject: {
        payload: Prisma.$TeacherSubjectPayload<ExtArgs>
        fields: Prisma.TeacherSubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeacherSubjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeacherSubjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSubjectPayload>
          }
          findFirst: {
            args: Prisma.TeacherSubjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeacherSubjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSubjectPayload>
          }
          findMany: {
            args: Prisma.TeacherSubjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSubjectPayload>[]
          }
          create: {
            args: Prisma.TeacherSubjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSubjectPayload>
          }
          createMany: {
            args: Prisma.TeacherSubjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeacherSubjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSubjectPayload>[]
          }
          delete: {
            args: Prisma.TeacherSubjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSubjectPayload>
          }
          update: {
            args: Prisma.TeacherSubjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSubjectPayload>
          }
          deleteMany: {
            args: Prisma.TeacherSubjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeacherSubjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeacherSubjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSubjectPayload>[]
          }
          upsert: {
            args: Prisma.TeacherSubjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherSubjectPayload>
          }
          aggregate: {
            args: Prisma.TeacherSubjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeacherSubject>
          }
          groupBy: {
            args: Prisma.TeacherSubjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeacherSubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeacherSubjectCountArgs<ExtArgs>
            result: $Utils.Optional<TeacherSubjectCountAggregateOutputType> | number
          }
        }
      }
      ClerkTeachers: {
        payload: Prisma.$ClerkTeachersPayload<ExtArgs>
        fields: Prisma.ClerkTeachersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClerkTeachersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkTeachersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClerkTeachersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkTeachersPayload>
          }
          findFirst: {
            args: Prisma.ClerkTeachersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkTeachersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClerkTeachersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkTeachersPayload>
          }
          findMany: {
            args: Prisma.ClerkTeachersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkTeachersPayload>[]
          }
          create: {
            args: Prisma.ClerkTeachersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkTeachersPayload>
          }
          createMany: {
            args: Prisma.ClerkTeachersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClerkTeachersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkTeachersPayload>[]
          }
          delete: {
            args: Prisma.ClerkTeachersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkTeachersPayload>
          }
          update: {
            args: Prisma.ClerkTeachersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkTeachersPayload>
          }
          deleteMany: {
            args: Prisma.ClerkTeachersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClerkTeachersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClerkTeachersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkTeachersPayload>[]
          }
          upsert: {
            args: Prisma.ClerkTeachersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClerkTeachersPayload>
          }
          aggregate: {
            args: Prisma.ClerkTeachersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClerkTeachers>
          }
          groupBy: {
            args: Prisma.ClerkTeachersGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClerkTeachersGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClerkTeachersCountArgs<ExtArgs>
            result: $Utils.Optional<ClerkTeachersCountAggregateOutputType> | number
          }
        }
      }
      FeeStructure: {
        payload: Prisma.$FeeStructurePayload<ExtArgs>
        fields: Prisma.FeeStructureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeeStructureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeeStructureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload>
          }
          findFirst: {
            args: Prisma.FeeStructureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeeStructureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload>
          }
          findMany: {
            args: Prisma.FeeStructureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload>[]
          }
          create: {
            args: Prisma.FeeStructureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload>
          }
          createMany: {
            args: Prisma.FeeStructureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeeStructureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload>[]
          }
          delete: {
            args: Prisma.FeeStructureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload>
          }
          update: {
            args: Prisma.FeeStructureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload>
          }
          deleteMany: {
            args: Prisma.FeeStructureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeeStructureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeeStructureUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload>[]
          }
          upsert: {
            args: Prisma.FeeStructureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeStructurePayload>
          }
          aggregate: {
            args: Prisma.FeeStructureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeeStructure>
          }
          groupBy: {
            args: Prisma.FeeStructureGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeeStructureGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeeStructureCountArgs<ExtArgs>
            result: $Utils.Optional<FeeStructureCountAggregateOutputType> | number
          }
        }
      }
      FeeTransaction: {
        payload: Prisma.$FeeTransactionPayload<ExtArgs>
        fields: Prisma.FeeTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeeTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeeTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeTransactionPayload>
          }
          findFirst: {
            args: Prisma.FeeTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeeTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeTransactionPayload>
          }
          findMany: {
            args: Prisma.FeeTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeTransactionPayload>[]
          }
          create: {
            args: Prisma.FeeTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeTransactionPayload>
          }
          createMany: {
            args: Prisma.FeeTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeeTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeTransactionPayload>[]
          }
          delete: {
            args: Prisma.FeeTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeTransactionPayload>
          }
          update: {
            args: Prisma.FeeTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeTransactionPayload>
          }
          deleteMany: {
            args: Prisma.FeeTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeeTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeeTransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeTransactionPayload>[]
          }
          upsert: {
            args: Prisma.FeeTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeeTransactionPayload>
          }
          aggregate: {
            args: Prisma.FeeTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeeTransaction>
          }
          groupBy: {
            args: Prisma.FeeTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeeTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeeTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<FeeTransactionCountAggregateOutputType> | number
          }
        }
      }
      StudentFees: {
        payload: Prisma.$StudentFeesPayload<ExtArgs>
        fields: Prisma.StudentFeesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFeesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFeesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload>
          }
          findFirst: {
            args: Prisma.StudentFeesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFeesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload>
          }
          findMany: {
            args: Prisma.StudentFeesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload>[]
          }
          create: {
            args: Prisma.StudentFeesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload>
          }
          createMany: {
            args: Prisma.StudentFeesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentFeesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload>[]
          }
          delete: {
            args: Prisma.StudentFeesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload>
          }
          update: {
            args: Prisma.StudentFeesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload>
          }
          deleteMany: {
            args: Prisma.StudentFeesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentFeesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentFeesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload>[]
          }
          upsert: {
            args: Prisma.StudentFeesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload>
          }
          aggregate: {
            args: Prisma.StudentFeesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentFees>
          }
          groupBy: {
            args: Prisma.StudentFeesGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentFeesGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentFeesCountArgs<ExtArgs>
            result: $Utils.Optional<StudentFeesCountAggregateOutputType> | number
          }
        }
      }
      StudentTotalFees: {
        payload: Prisma.$StudentTotalFeesPayload<ExtArgs>
        fields: Prisma.StudentTotalFeesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentTotalFeesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentTotalFeesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentTotalFeesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentTotalFeesPayload>
          }
          findFirst: {
            args: Prisma.StudentTotalFeesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentTotalFeesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentTotalFeesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentTotalFeesPayload>
          }
          findMany: {
            args: Prisma.StudentTotalFeesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentTotalFeesPayload>[]
          }
          create: {
            args: Prisma.StudentTotalFeesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentTotalFeesPayload>
          }
          createMany: {
            args: Prisma.StudentTotalFeesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentTotalFeesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentTotalFeesPayload>[]
          }
          delete: {
            args: Prisma.StudentTotalFeesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentTotalFeesPayload>
          }
          update: {
            args: Prisma.StudentTotalFeesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentTotalFeesPayload>
          }
          deleteMany: {
            args: Prisma.StudentTotalFeesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentTotalFeesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentTotalFeesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentTotalFeesPayload>[]
          }
          upsert: {
            args: Prisma.StudentTotalFeesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentTotalFeesPayload>
          }
          aggregate: {
            args: Prisma.StudentTotalFeesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentTotalFees>
          }
          groupBy: {
            args: Prisma.StudentTotalFeesGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentTotalFeesGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentTotalFeesCountArgs<ExtArgs>
            result: $Utils.Optional<StudentTotalFeesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    admin?: AdminOmit
    grade?: GradeOmit
    class?: ClassOmit
    lesson?: LessonOmit
    announcement?: AnnouncementOmit
    attendance?: AttendanceOmit
    event?: EventOmit
    exam?: ExamOmit
    examSubject?: ExamSubjectOmit
    homework?: HomeworkOmit
    result?: ResultOmit
    student?: StudentOmit
    clerkStudents?: ClerkStudentsOmit
    subject?: SubjectOmit
    teacher?: TeacherOmit
    teacherSubject?: TeacherSubjectOmit
    clerkTeachers?: ClerkTeachersOmit
    feeStructure?: FeeStructureOmit
    feeTransaction?: FeeTransactionOmit
    studentFees?: StudentFeesOmit
    studentTotalFees?: StudentTotalFeesOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type GradeCountOutputType
   */

  export type GradeCountOutputType = {
    feestructure: number
    Homework: number
    classes: number
  }

  export type GradeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feestructure?: boolean | GradeCountOutputTypeCountFeestructureArgs
    Homework?: boolean | GradeCountOutputTypeCountHomeworkArgs
    classes?: boolean | GradeCountOutputTypeCountClassesArgs
  }

  // Custom InputTypes
  /**
   * GradeCountOutputType without action
   */
  export type GradeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GradeCountOutputType
     */
    select?: GradeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GradeCountOutputType without action
   */
  export type GradeCountOutputTypeCountFeestructureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeeStructureWhereInput
  }

  /**
   * GradeCountOutputType without action
   */
  export type GradeCountOutputTypeCountHomeworkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HomeworkWhereInput
  }

  /**
   * GradeCountOutputType without action
   */
  export type GradeCountOutputTypeCountClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
  }


  /**
   * Count Type ClassCountOutputType
   */

  export type ClassCountOutputType = {
    Announcement: number
    attendance: number
    events: number
    exams: number
    homeworks: number
    lessons: number
    students: number
  }

  export type ClassCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Announcement?: boolean | ClassCountOutputTypeCountAnnouncementArgs
    attendance?: boolean | ClassCountOutputTypeCountAttendanceArgs
    events?: boolean | ClassCountOutputTypeCountEventsArgs
    exams?: boolean | ClassCountOutputTypeCountExamsArgs
    homeworks?: boolean | ClassCountOutputTypeCountHomeworksArgs
    lessons?: boolean | ClassCountOutputTypeCountLessonsArgs
    students?: boolean | ClassCountOutputTypeCountStudentsArgs
  }

  // Custom InputTypes
  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassCountOutputType
     */
    select?: ClassCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountAnnouncementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnnouncementWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountExamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountHomeworksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HomeworkWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountLessonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }


  /**
   * Count Type ExamCountOutputType
   */

  export type ExamCountOutputType = {
    subjects: number
    results: number
  }

  export type ExamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subjects?: boolean | ExamCountOutputTypeCountSubjectsArgs
    results?: boolean | ExamCountOutputTypeCountResultsArgs
  }

  // Custom InputTypes
  /**
   * ExamCountOutputType without action
   */
  export type ExamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamCountOutputType
     */
    select?: ExamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExamCountOutputType without action
   */
  export type ExamCountOutputTypeCountSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamSubjectWhereInput
  }

  /**
   * ExamCountOutputType without action
   */
  export type ExamCountOutputTypeCountResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResultWhereInput
  }


  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    Attendance: number
    feeTransactions: number
    results: number
    studentFees: number
    totalFees: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Attendance?: boolean | StudentCountOutputTypeCountAttendanceArgs
    feeTransactions?: boolean | StudentCountOutputTypeCountFeeTransactionsArgs
    results?: boolean | StudentCountOutputTypeCountResultsArgs
    studentFees?: boolean | StudentCountOutputTypeCountStudentFeesArgs
    totalFees?: boolean | StudentCountOutputTypeCountTotalFeesArgs
  }

  // Custom InputTypes
  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountFeeTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeeTransactionWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResultWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountStudentFeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentFeesWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountTotalFeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentTotalFeesWhereInput
  }


  /**
   * Count Type SubjectCountOutputType
   */

  export type SubjectCountOutputType = {
    exams: number
    lessons: number
    results: number
    teachers: number
  }

  export type SubjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exams?: boolean | SubjectCountOutputTypeCountExamsArgs
    lessons?: boolean | SubjectCountOutputTypeCountLessonsArgs
    results?: boolean | SubjectCountOutputTypeCountResultsArgs
    teachers?: boolean | SubjectCountOutputTypeCountTeachersArgs
  }

  // Custom InputTypes
  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectCountOutputType
     */
    select?: SubjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountExamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamSubjectWhereInput
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountLessonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonWhereInput
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResultWhereInput
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherSubjectWhereInput
  }


  /**
   * Count Type TeacherCountOutputType
   */

  export type TeacherCountOutputType = {
    lessons: number
    subjects: number
  }

  export type TeacherCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lessons?: boolean | TeacherCountOutputTypeCountLessonsArgs
    subjects?: boolean | TeacherCountOutputTypeCountSubjectsArgs
  }

  // Custom InputTypes
  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCountOutputType
     */
    select?: TeacherCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeCountLessonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonWhereInput
  }

  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeCountSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherSubjectWhereInput
  }


  /**
   * Count Type FeeStructureCountOutputType
   */

  export type FeeStructureCountOutputType = {
    studentFees: number
  }

  export type FeeStructureCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentFees?: boolean | FeeStructureCountOutputTypeCountStudentFeesArgs
  }

  // Custom InputTypes
  /**
   * FeeStructureCountOutputType without action
   */
  export type FeeStructureCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructureCountOutputType
     */
    select?: FeeStructureCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FeeStructureCountOutputType without action
   */
  export type FeeStructureCountOutputTypeCountStudentFeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentFeesWhereInput
  }


  /**
   * Count Type StudentFeesCountOutputType
   */

  export type StudentFeesCountOutputType = {
    feeTransactions: number
  }

  export type StudentFeesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feeTransactions?: boolean | StudentFeesCountOutputTypeCountFeeTransactionsArgs
  }

  // Custom InputTypes
  /**
   * StudentFeesCountOutputType without action
   */
  export type StudentFeesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFeesCountOutputType
     */
    select?: StudentFeesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentFeesCountOutputType without action
   */
  export type StudentFeesCountOutputTypeCountFeeTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeeTransactionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    id: number | null
  }

  export type AdminSumAggregateOutputType = {
    id: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    full_name: string | null
    parentName: string | null
    gender: string | null
    email: string | null
    phone: string | null
    address: string | null
    dob: Date | null
    img: string | null
    bloodType: string | null
    role: string | null
    createdAt: Date | null
  }

  export type AdminMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    full_name: string | null
    parentName: string | null
    gender: string | null
    email: string | null
    phone: string | null
    address: string | null
    dob: Date | null
    img: string | null
    bloodType: string | null
    role: string | null
    createdAt: Date | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    username: number
    password: number
    full_name: number
    parentName: number
    gender: number
    email: number
    phone: number
    address: number
    dob: number
    img: number
    bloodType: number
    role: number
    createdAt: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    id?: true
  }

  export type AdminSumAggregateInputType = {
    id?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    full_name?: true
    parentName?: true
    gender?: true
    email?: true
    phone?: true
    address?: true
    dob?: true
    img?: true
    bloodType?: true
    role?: true
    createdAt?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    full_name?: true
    parentName?: true
    gender?: true
    email?: true
    phone?: true
    address?: true
    dob?: true
    img?: true
    bloodType?: true
    role?: true
    createdAt?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    full_name?: true
    parentName?: true
    gender?: true
    email?: true
    phone?: true
    address?: true
    dob?: true
    img?: true
    bloodType?: true
    role?: true
    createdAt?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: number
    username: string
    password: string
    full_name: string
    parentName: string | null
    gender: string | null
    email: string | null
    phone: string | null
    address: string | null
    dob: Date | null
    img: string | null
    bloodType: string | null
    role: string
    createdAt: Date
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    full_name?: boolean
    parentName?: boolean
    gender?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    dob?: boolean
    img?: boolean
    bloodType?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    full_name?: boolean
    parentName?: boolean
    gender?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    dob?: boolean
    img?: boolean
    bloodType?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    full_name?: boolean
    parentName?: boolean
    gender?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    dob?: boolean
    img?: boolean
    bloodType?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    full_name?: boolean
    parentName?: boolean
    gender?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    dob?: boolean
    img?: boolean
    bloodType?: boolean
    role?: boolean
    createdAt?: boolean
  }

  export type AdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "full_name" | "parentName" | "gender" | "email" | "phone" | "address" | "dob" | "img" | "bloodType" | "role" | "createdAt", ExtArgs["result"]["admin"]>

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      password: string
      full_name: string
      parentName: string | null
      gender: string | null
      email: string | null
      phone: string | null
      address: string | null
      dob: Date | null
      img: string | null
      bloodType: string | null
      role: string
      createdAt: Date
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Admins and returns the data saved in the database.
     * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins and returns the data updated in the database.
     * @param {AdminUpdateManyAndReturnArgs} args - Arguments to update many Admins.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'Int'>
    readonly username: FieldRef<"Admin", 'String'>
    readonly password: FieldRef<"Admin", 'String'>
    readonly full_name: FieldRef<"Admin", 'String'>
    readonly parentName: FieldRef<"Admin", 'String'>
    readonly gender: FieldRef<"Admin", 'String'>
    readonly email: FieldRef<"Admin", 'String'>
    readonly phone: FieldRef<"Admin", 'String'>
    readonly address: FieldRef<"Admin", 'String'>
    readonly dob: FieldRef<"Admin", 'DateTime'>
    readonly img: FieldRef<"Admin", 'String'>
    readonly bloodType: FieldRef<"Admin", 'String'>
    readonly role: FieldRef<"Admin", 'String'>
    readonly createdAt: FieldRef<"Admin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin createManyAndReturn
   */
  export type AdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin updateManyAndReturn
   */
  export type AdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to delete.
     */
    limit?: number
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
  }


  /**
   * Model Grade
   */

  export type AggregateGrade = {
    _count: GradeCountAggregateOutputType | null
    _avg: GradeAvgAggregateOutputType | null
    _sum: GradeSumAggregateOutputType | null
    _min: GradeMinAggregateOutputType | null
    _max: GradeMaxAggregateOutputType | null
  }

  export type GradeAvgAggregateOutputType = {
    id: number | null
  }

  export type GradeSumAggregateOutputType = {
    id: number | null
  }

  export type GradeMinAggregateOutputType = {
    id: number | null
    level: string | null
  }

  export type GradeMaxAggregateOutputType = {
    id: number | null
    level: string | null
  }

  export type GradeCountAggregateOutputType = {
    id: number
    level: number
    _all: number
  }


  export type GradeAvgAggregateInputType = {
    id?: true
  }

  export type GradeSumAggregateInputType = {
    id?: true
  }

  export type GradeMinAggregateInputType = {
    id?: true
    level?: true
  }

  export type GradeMaxAggregateInputType = {
    id?: true
    level?: true
  }

  export type GradeCountAggregateInputType = {
    id?: true
    level?: true
    _all?: true
  }

  export type GradeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grade to aggregate.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Grades
    **/
    _count?: true | GradeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GradeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GradeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GradeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GradeMaxAggregateInputType
  }

  export type GetGradeAggregateType<T extends GradeAggregateArgs> = {
        [P in keyof T & keyof AggregateGrade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrade[P]>
      : GetScalarType<T[P], AggregateGrade[P]>
  }




  export type GradeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeWhereInput
    orderBy?: GradeOrderByWithAggregationInput | GradeOrderByWithAggregationInput[]
    by: GradeScalarFieldEnum[] | GradeScalarFieldEnum
    having?: GradeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GradeCountAggregateInputType | true
    _avg?: GradeAvgAggregateInputType
    _sum?: GradeSumAggregateInputType
    _min?: GradeMinAggregateInputType
    _max?: GradeMaxAggregateInputType
  }

  export type GradeGroupByOutputType = {
    id: number
    level: string
    _count: GradeCountAggregateOutputType | null
    _avg: GradeAvgAggregateOutputType | null
    _sum: GradeSumAggregateOutputType | null
    _min: GradeMinAggregateOutputType | null
    _max: GradeMaxAggregateOutputType | null
  }

  type GetGradeGroupByPayload<T extends GradeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GradeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GradeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GradeGroupByOutputType[P]>
            : GetScalarType<T[P], GradeGroupByOutputType[P]>
        }
      >
    >


  export type GradeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
    feestructure?: boolean | Grade$feestructureArgs<ExtArgs>
    Homework?: boolean | Grade$HomeworkArgs<ExtArgs>
    classes?: boolean | Grade$classesArgs<ExtArgs>
    _count?: boolean | GradeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grade"]>

  export type GradeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
  }, ExtArgs["result"]["grade"]>

  export type GradeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
  }, ExtArgs["result"]["grade"]>

  export type GradeSelectScalar = {
    id?: boolean
    level?: boolean
  }

  export type GradeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "level", ExtArgs["result"]["grade"]>
  export type GradeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feestructure?: boolean | Grade$feestructureArgs<ExtArgs>
    Homework?: boolean | Grade$HomeworkArgs<ExtArgs>
    classes?: boolean | Grade$classesArgs<ExtArgs>
    _count?: boolean | GradeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GradeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type GradeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GradePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Grade"
    objects: {
      feestructure: Prisma.$FeeStructurePayload<ExtArgs>[]
      Homework: Prisma.$HomeworkPayload<ExtArgs>[]
      classes: Prisma.$ClassPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      level: string
    }, ExtArgs["result"]["grade"]>
    composites: {}
  }

  type GradeGetPayload<S extends boolean | null | undefined | GradeDefaultArgs> = $Result.GetResult<Prisma.$GradePayload, S>

  type GradeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GradeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GradeCountAggregateInputType | true
    }

  export interface GradeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Grade'], meta: { name: 'Grade' } }
    /**
     * Find zero or one Grade that matches the filter.
     * @param {GradeFindUniqueArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GradeFindUniqueArgs>(args: SelectSubset<T, GradeFindUniqueArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Grade that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GradeFindUniqueOrThrowArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GradeFindUniqueOrThrowArgs>(args: SelectSubset<T, GradeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Grade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindFirstArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GradeFindFirstArgs>(args?: SelectSubset<T, GradeFindFirstArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Grade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindFirstOrThrowArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GradeFindFirstOrThrowArgs>(args?: SelectSubset<T, GradeFindFirstOrThrowArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Grades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Grades
     * const grades = await prisma.grade.findMany()
     * 
     * // Get first 10 Grades
     * const grades = await prisma.grade.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gradeWithIdOnly = await prisma.grade.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GradeFindManyArgs>(args?: SelectSubset<T, GradeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Grade.
     * @param {GradeCreateArgs} args - Arguments to create a Grade.
     * @example
     * // Create one Grade
     * const Grade = await prisma.grade.create({
     *   data: {
     *     // ... data to create a Grade
     *   }
     * })
     * 
     */
    create<T extends GradeCreateArgs>(args: SelectSubset<T, GradeCreateArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Grades.
     * @param {GradeCreateManyArgs} args - Arguments to create many Grades.
     * @example
     * // Create many Grades
     * const grade = await prisma.grade.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GradeCreateManyArgs>(args?: SelectSubset<T, GradeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Grades and returns the data saved in the database.
     * @param {GradeCreateManyAndReturnArgs} args - Arguments to create many Grades.
     * @example
     * // Create many Grades
     * const grade = await prisma.grade.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Grades and only return the `id`
     * const gradeWithIdOnly = await prisma.grade.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GradeCreateManyAndReturnArgs>(args?: SelectSubset<T, GradeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Grade.
     * @param {GradeDeleteArgs} args - Arguments to delete one Grade.
     * @example
     * // Delete one Grade
     * const Grade = await prisma.grade.delete({
     *   where: {
     *     // ... filter to delete one Grade
     *   }
     * })
     * 
     */
    delete<T extends GradeDeleteArgs>(args: SelectSubset<T, GradeDeleteArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Grade.
     * @param {GradeUpdateArgs} args - Arguments to update one Grade.
     * @example
     * // Update one Grade
     * const grade = await prisma.grade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GradeUpdateArgs>(args: SelectSubset<T, GradeUpdateArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Grades.
     * @param {GradeDeleteManyArgs} args - Arguments to filter Grades to delete.
     * @example
     * // Delete a few Grades
     * const { count } = await prisma.grade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GradeDeleteManyArgs>(args?: SelectSubset<T, GradeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Grades
     * const grade = await prisma.grade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GradeUpdateManyArgs>(args: SelectSubset<T, GradeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Grades and returns the data updated in the database.
     * @param {GradeUpdateManyAndReturnArgs} args - Arguments to update many Grades.
     * @example
     * // Update many Grades
     * const grade = await prisma.grade.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Grades and only return the `id`
     * const gradeWithIdOnly = await prisma.grade.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GradeUpdateManyAndReturnArgs>(args: SelectSubset<T, GradeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Grade.
     * @param {GradeUpsertArgs} args - Arguments to update or create a Grade.
     * @example
     * // Update or create a Grade
     * const grade = await prisma.grade.upsert({
     *   create: {
     *     // ... data to create a Grade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Grade we want to update
     *   }
     * })
     */
    upsert<T extends GradeUpsertArgs>(args: SelectSubset<T, GradeUpsertArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeCountArgs} args - Arguments to filter Grades to count.
     * @example
     * // Count the number of Grades
     * const count = await prisma.grade.count({
     *   where: {
     *     // ... the filter for the Grades we want to count
     *   }
     * })
    **/
    count<T extends GradeCountArgs>(
      args?: Subset<T, GradeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GradeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Grade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GradeAggregateArgs>(args: Subset<T, GradeAggregateArgs>): Prisma.PrismaPromise<GetGradeAggregateType<T>>

    /**
     * Group by Grade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GradeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GradeGroupByArgs['orderBy'] }
        : { orderBy?: GradeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GradeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGradeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Grade model
   */
  readonly fields: GradeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Grade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GradeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    feestructure<T extends Grade$feestructureArgs<ExtArgs> = {}>(args?: Subset<T, Grade$feestructureArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Homework<T extends Grade$HomeworkArgs<ExtArgs> = {}>(args?: Subset<T, Grade$HomeworkArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    classes<T extends Grade$classesArgs<ExtArgs> = {}>(args?: Subset<T, Grade$classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Grade model
   */
  interface GradeFieldRefs {
    readonly id: FieldRef<"Grade", 'Int'>
    readonly level: FieldRef<"Grade", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Grade findUnique
   */
  export type GradeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade findUniqueOrThrow
   */
  export type GradeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade findFirst
   */
  export type GradeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grades.
     */
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade findFirstOrThrow
   */
  export type GradeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grades.
     */
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade findMany
   */
  export type GradeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grades to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade create
   */
  export type GradeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The data needed to create a Grade.
     */
    data: XOR<GradeCreateInput, GradeUncheckedCreateInput>
  }

  /**
   * Grade createMany
   */
  export type GradeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Grades.
     */
    data: GradeCreateManyInput | GradeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Grade createManyAndReturn
   */
  export type GradeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * The data used to create many Grades.
     */
    data: GradeCreateManyInput | GradeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Grade update
   */
  export type GradeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The data needed to update a Grade.
     */
    data: XOR<GradeUpdateInput, GradeUncheckedUpdateInput>
    /**
     * Choose, which Grade to update.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade updateMany
   */
  export type GradeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Grades.
     */
    data: XOR<GradeUpdateManyMutationInput, GradeUncheckedUpdateManyInput>
    /**
     * Filter which Grades to update
     */
    where?: GradeWhereInput
    /**
     * Limit how many Grades to update.
     */
    limit?: number
  }

  /**
   * Grade updateManyAndReturn
   */
  export type GradeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * The data used to update Grades.
     */
    data: XOR<GradeUpdateManyMutationInput, GradeUncheckedUpdateManyInput>
    /**
     * Filter which Grades to update
     */
    where?: GradeWhereInput
    /**
     * Limit how many Grades to update.
     */
    limit?: number
  }

  /**
   * Grade upsert
   */
  export type GradeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The filter to search for the Grade to update in case it exists.
     */
    where: GradeWhereUniqueInput
    /**
     * In case the Grade found by the `where` argument doesn't exist, create a new Grade with this data.
     */
    create: XOR<GradeCreateInput, GradeUncheckedCreateInput>
    /**
     * In case the Grade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GradeUpdateInput, GradeUncheckedUpdateInput>
  }

  /**
   * Grade delete
   */
  export type GradeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter which Grade to delete.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade deleteMany
   */
  export type GradeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grades to delete
     */
    where?: GradeWhereInput
    /**
     * Limit how many Grades to delete.
     */
    limit?: number
  }

  /**
   * Grade.feestructure
   */
  export type Grade$feestructureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    where?: FeeStructureWhereInput
    orderBy?: FeeStructureOrderByWithRelationInput | FeeStructureOrderByWithRelationInput[]
    cursor?: FeeStructureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeeStructureScalarFieldEnum | FeeStructureScalarFieldEnum[]
  }

  /**
   * Grade.Homework
   */
  export type Grade$HomeworkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    where?: HomeworkWhereInput
    orderBy?: HomeworkOrderByWithRelationInput | HomeworkOrderByWithRelationInput[]
    cursor?: HomeworkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HomeworkScalarFieldEnum | HomeworkScalarFieldEnum[]
  }

  /**
   * Grade.classes
   */
  export type Grade$classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    cursor?: ClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Grade without action
   */
  export type GradeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
  }


  /**
   * Model Class
   */

  export type AggregateClass = {
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  export type ClassAvgAggregateOutputType = {
    id: number | null
    gradeId: number | null
  }

  export type ClassSumAggregateOutputType = {
    id: number | null
    gradeId: number | null
  }

  export type ClassMinAggregateOutputType = {
    id: number | null
    name: string | null
    supervisorId: string | null
    gradeId: number | null
  }

  export type ClassMaxAggregateOutputType = {
    id: number | null
    name: string | null
    supervisorId: string | null
    gradeId: number | null
  }

  export type ClassCountAggregateOutputType = {
    id: number
    name: number
    supervisorId: number
    gradeId: number
    _all: number
  }


  export type ClassAvgAggregateInputType = {
    id?: true
    gradeId?: true
  }

  export type ClassSumAggregateInputType = {
    id?: true
    gradeId?: true
  }

  export type ClassMinAggregateInputType = {
    id?: true
    name?: true
    supervisorId?: true
    gradeId?: true
  }

  export type ClassMaxAggregateInputType = {
    id?: true
    name?: true
    supervisorId?: true
    gradeId?: true
  }

  export type ClassCountAggregateInputType = {
    id?: true
    name?: true
    supervisorId?: true
    gradeId?: true
    _all?: true
  }

  export type ClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Class to aggregate.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    _count?: true | ClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassMaxAggregateInputType
  }

  export type GetClassAggregateType<T extends ClassAggregateArgs> = {
        [P in keyof T & keyof AggregateClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClass[P]>
      : GetScalarType<T[P], AggregateClass[P]>
  }




  export type ClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithAggregationInput | ClassOrderByWithAggregationInput[]
    by: ClassScalarFieldEnum[] | ClassScalarFieldEnum
    having?: ClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassCountAggregateInputType | true
    _avg?: ClassAvgAggregateInputType
    _sum?: ClassSumAggregateInputType
    _min?: ClassMinAggregateInputType
    _max?: ClassMaxAggregateInputType
  }

  export type ClassGroupByOutputType = {
    id: number
    name: string
    supervisorId: string | null
    gradeId: number
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  type GetClassGroupByPayload<T extends ClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassGroupByOutputType[P]>
            : GetScalarType<T[P], ClassGroupByOutputType[P]>
        }
      >
    >


  export type ClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    supervisorId?: boolean
    gradeId?: boolean
    Announcement?: boolean | Class$AnnouncementArgs<ExtArgs>
    attendance?: boolean | Class$attendanceArgs<ExtArgs>
    events?: boolean | Class$eventsArgs<ExtArgs>
    exams?: boolean | Class$examsArgs<ExtArgs>
    homeworks?: boolean | Class$homeworksArgs<ExtArgs>
    lessons?: boolean | Class$lessonsArgs<ExtArgs>
    students?: boolean | Class$studentsArgs<ExtArgs>
    Grade?: boolean | GradeDefaultArgs<ExtArgs>
    Teacher?: boolean | Class$TeacherArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    supervisorId?: boolean
    gradeId?: boolean
    Grade?: boolean | GradeDefaultArgs<ExtArgs>
    Teacher?: boolean | Class$TeacherArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    supervisorId?: boolean
    gradeId?: boolean
    Grade?: boolean | GradeDefaultArgs<ExtArgs>
    Teacher?: boolean | Class$TeacherArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectScalar = {
    id?: boolean
    name?: boolean
    supervisorId?: boolean
    gradeId?: boolean
  }

  export type ClassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "supervisorId" | "gradeId", ExtArgs["result"]["class"]>
  export type ClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Announcement?: boolean | Class$AnnouncementArgs<ExtArgs>
    attendance?: boolean | Class$attendanceArgs<ExtArgs>
    events?: boolean | Class$eventsArgs<ExtArgs>
    exams?: boolean | Class$examsArgs<ExtArgs>
    homeworks?: boolean | Class$homeworksArgs<ExtArgs>
    lessons?: boolean | Class$lessonsArgs<ExtArgs>
    students?: boolean | Class$studentsArgs<ExtArgs>
    Grade?: boolean | GradeDefaultArgs<ExtArgs>
    Teacher?: boolean | Class$TeacherArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Grade?: boolean | GradeDefaultArgs<ExtArgs>
    Teacher?: boolean | Class$TeacherArgs<ExtArgs>
  }
  export type ClassIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Grade?: boolean | GradeDefaultArgs<ExtArgs>
    Teacher?: boolean | Class$TeacherArgs<ExtArgs>
  }

  export type $ClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Class"
    objects: {
      Announcement: Prisma.$AnnouncementPayload<ExtArgs>[]
      attendance: Prisma.$AttendancePayload<ExtArgs>[]
      events: Prisma.$EventPayload<ExtArgs>[]
      exams: Prisma.$ExamPayload<ExtArgs>[]
      homeworks: Prisma.$HomeworkPayload<ExtArgs>[]
      lessons: Prisma.$LessonPayload<ExtArgs>[]
      students: Prisma.$StudentPayload<ExtArgs>[]
      Grade: Prisma.$GradePayload<ExtArgs>
      Teacher: Prisma.$TeacherPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      supervisorId: string | null
      gradeId: number
    }, ExtArgs["result"]["class"]>
    composites: {}
  }

  type ClassGetPayload<S extends boolean | null | undefined | ClassDefaultArgs> = $Result.GetResult<Prisma.$ClassPayload, S>

  type ClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassCountAggregateInputType | true
    }

  export interface ClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Class'], meta: { name: 'Class' } }
    /**
     * Find zero or one Class that matches the filter.
     * @param {ClassFindUniqueArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassFindUniqueArgs>(args: SelectSubset<T, ClassFindUniqueArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Class that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassFindUniqueOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassFindFirstArgs>(args?: SelectSubset<T, ClassFindFirstArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.class.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.class.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classWithIdOnly = await prisma.class.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassFindManyArgs>(args?: SelectSubset<T, ClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Class.
     * @param {ClassCreateArgs} args - Arguments to create a Class.
     * @example
     * // Create one Class
     * const Class = await prisma.class.create({
     *   data: {
     *     // ... data to create a Class
     *   }
     * })
     * 
     */
    create<T extends ClassCreateArgs>(args: SelectSubset<T, ClassCreateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Classes.
     * @param {ClassCreateManyArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassCreateManyArgs>(args?: SelectSubset<T, ClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classes and returns the data saved in the database.
     * @param {ClassCreateManyAndReturnArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Class.
     * @param {ClassDeleteArgs} args - Arguments to delete one Class.
     * @example
     * // Delete one Class
     * const Class = await prisma.class.delete({
     *   where: {
     *     // ... filter to delete one Class
     *   }
     * })
     * 
     */
    delete<T extends ClassDeleteArgs>(args: SelectSubset<T, ClassDeleteArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Class.
     * @param {ClassUpdateArgs} args - Arguments to update one Class.
     * @example
     * // Update one Class
     * const class = await prisma.class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassUpdateArgs>(args: SelectSubset<T, ClassUpdateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Classes.
     * @param {ClassDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassDeleteManyArgs>(args?: SelectSubset<T, ClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassUpdateManyArgs>(args: SelectSubset<T, ClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes and returns the data updated in the database.
     * @param {ClassUpdateManyAndReturnArgs} args - Arguments to update many Classes.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClassUpdateManyAndReturnArgs>(args: SelectSubset<T, ClassUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Class.
     * @param {ClassUpsertArgs} args - Arguments to update or create a Class.
     * @example
     * // Update or create a Class
     * const class = await prisma.class.upsert({
     *   create: {
     *     // ... data to create a Class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Class we want to update
     *   }
     * })
     */
    upsert<T extends ClassUpsertArgs>(args: SelectSubset<T, ClassUpsertArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.class.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClassCountArgs>(
      args?: Subset<T, ClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassAggregateArgs>(args: Subset<T, ClassAggregateArgs>): Prisma.PrismaPromise<GetClassAggregateType<T>>

    /**
     * Group by Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassGroupByArgs['orderBy'] }
        : { orderBy?: ClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Class model
   */
  readonly fields: ClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Announcement<T extends Class$AnnouncementArgs<ExtArgs> = {}>(args?: Subset<T, Class$AnnouncementArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attendance<T extends Class$attendanceArgs<ExtArgs> = {}>(args?: Subset<T, Class$attendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    events<T extends Class$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Class$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    exams<T extends Class$examsArgs<ExtArgs> = {}>(args?: Subset<T, Class$examsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    homeworks<T extends Class$homeworksArgs<ExtArgs> = {}>(args?: Subset<T, Class$homeworksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lessons<T extends Class$lessonsArgs<ExtArgs> = {}>(args?: Subset<T, Class$lessonsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    students<T extends Class$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Class$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Grade<T extends GradeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GradeDefaultArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Teacher<T extends Class$TeacherArgs<ExtArgs> = {}>(args?: Subset<T, Class$TeacherArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Class model
   */
  interface ClassFieldRefs {
    readonly id: FieldRef<"Class", 'Int'>
    readonly name: FieldRef<"Class", 'String'>
    readonly supervisorId: FieldRef<"Class", 'String'>
    readonly gradeId: FieldRef<"Class", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Class findUnique
   */
  export type ClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findUniqueOrThrow
   */
  export type ClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findFirst
   */
  export type ClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findFirstOrThrow
   */
  export type ClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findMany
   */
  export type ClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class create
   */
  export type ClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to create a Class.
     */
    data: XOR<ClassCreateInput, ClassUncheckedCreateInput>
  }

  /**
   * Class createMany
   */
  export type ClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Class createManyAndReturn
   */
  export type ClassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Class update
   */
  export type ClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to update a Class.
     */
    data: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
    /**
     * Choose, which Class to update.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class updateMany
   */
  export type ClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
  }

  /**
   * Class updateManyAndReturn
   */
  export type ClassUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Class upsert
   */
  export type ClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The filter to search for the Class to update in case it exists.
     */
    where: ClassWhereUniqueInput
    /**
     * In case the Class found by the `where` argument doesn't exist, create a new Class with this data.
     */
    create: XOR<ClassCreateInput, ClassUncheckedCreateInput>
    /**
     * In case the Class was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
  }

  /**
   * Class delete
   */
  export type ClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter which Class to delete.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class deleteMany
   */
  export type ClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classes to delete
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to delete.
     */
    limit?: number
  }

  /**
   * Class.Announcement
   */
  export type Class$AnnouncementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    where?: AnnouncementWhereInput
    orderBy?: AnnouncementOrderByWithRelationInput | AnnouncementOrderByWithRelationInput[]
    cursor?: AnnouncementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnnouncementScalarFieldEnum | AnnouncementScalarFieldEnum[]
  }

  /**
   * Class.attendance
   */
  export type Class$attendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    cursor?: AttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Class.events
   */
  export type Class$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Class.exams
   */
  export type Class$examsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    where?: ExamWhereInput
    orderBy?: ExamOrderByWithRelationInput | ExamOrderByWithRelationInput[]
    cursor?: ExamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExamScalarFieldEnum | ExamScalarFieldEnum[]
  }

  /**
   * Class.homeworks
   */
  export type Class$homeworksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    where?: HomeworkWhereInput
    orderBy?: HomeworkOrderByWithRelationInput | HomeworkOrderByWithRelationInput[]
    cursor?: HomeworkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HomeworkScalarFieldEnum | HomeworkScalarFieldEnum[]
  }

  /**
   * Class.lessons
   */
  export type Class$lessonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    where?: LessonWhereInput
    orderBy?: LessonOrderByWithRelationInput | LessonOrderByWithRelationInput[]
    cursor?: LessonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * Class.students
   */
  export type Class$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Class.Teacher
   */
  export type Class$TeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
  }

  /**
   * Class without action
   */
  export type ClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
  }


  /**
   * Model Lesson
   */

  export type AggregateLesson = {
    _count: LessonCountAggregateOutputType | null
    _avg: LessonAvgAggregateOutputType | null
    _sum: LessonSumAggregateOutputType | null
    _min: LessonMinAggregateOutputType | null
    _max: LessonMaxAggregateOutputType | null
  }

  export type LessonAvgAggregateOutputType = {
    id: number | null
    subjectId: number | null
    classId: number | null
  }

  export type LessonSumAggregateOutputType = {
    id: number | null
    subjectId: number | null
    classId: number | null
  }

  export type LessonMinAggregateOutputType = {
    id: number | null
    name: string | null
    day: $Enums.LessonDay | null
    startTime: Date | null
    endTime: Date | null
    subjectId: number | null
    classId: number | null
    teacherId: string | null
  }

  export type LessonMaxAggregateOutputType = {
    id: number | null
    name: string | null
    day: $Enums.LessonDay | null
    startTime: Date | null
    endTime: Date | null
    subjectId: number | null
    classId: number | null
    teacherId: string | null
  }

  export type LessonCountAggregateOutputType = {
    id: number
    name: number
    day: number
    startTime: number
    endTime: number
    subjectId: number
    classId: number
    teacherId: number
    _all: number
  }


  export type LessonAvgAggregateInputType = {
    id?: true
    subjectId?: true
    classId?: true
  }

  export type LessonSumAggregateInputType = {
    id?: true
    subjectId?: true
    classId?: true
  }

  export type LessonMinAggregateInputType = {
    id?: true
    name?: true
    day?: true
    startTime?: true
    endTime?: true
    subjectId?: true
    classId?: true
    teacherId?: true
  }

  export type LessonMaxAggregateInputType = {
    id?: true
    name?: true
    day?: true
    startTime?: true
    endTime?: true
    subjectId?: true
    classId?: true
    teacherId?: true
  }

  export type LessonCountAggregateInputType = {
    id?: true
    name?: true
    day?: true
    startTime?: true
    endTime?: true
    subjectId?: true
    classId?: true
    teacherId?: true
    _all?: true
  }

  export type LessonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lesson to aggregate.
     */
    where?: LessonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonOrderByWithRelationInput | LessonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LessonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lessons
    **/
    _count?: true | LessonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LessonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LessonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LessonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LessonMaxAggregateInputType
  }

  export type GetLessonAggregateType<T extends LessonAggregateArgs> = {
        [P in keyof T & keyof AggregateLesson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLesson[P]>
      : GetScalarType<T[P], AggregateLesson[P]>
  }




  export type LessonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonWhereInput
    orderBy?: LessonOrderByWithAggregationInput | LessonOrderByWithAggregationInput[]
    by: LessonScalarFieldEnum[] | LessonScalarFieldEnum
    having?: LessonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LessonCountAggregateInputType | true
    _avg?: LessonAvgAggregateInputType
    _sum?: LessonSumAggregateInputType
    _min?: LessonMinAggregateInputType
    _max?: LessonMaxAggregateInputType
  }

  export type LessonGroupByOutputType = {
    id: number
    name: string
    day: $Enums.LessonDay
    startTime: Date
    endTime: Date
    subjectId: number
    classId: number
    teacherId: string
    _count: LessonCountAggregateOutputType | null
    _avg: LessonAvgAggregateOutputType | null
    _sum: LessonSumAggregateOutputType | null
    _min: LessonMinAggregateOutputType | null
    _max: LessonMaxAggregateOutputType | null
  }

  type GetLessonGroupByPayload<T extends LessonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LessonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LessonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LessonGroupByOutputType[P]>
            : GetScalarType<T[P], LessonGroupByOutputType[P]>
        }
      >
    >


  export type LessonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    day?: boolean
    startTime?: boolean
    endTime?: boolean
    subjectId?: boolean
    classId?: boolean
    teacherId?: boolean
    Class?: boolean | ClassDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
    Teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lesson"]>

  export type LessonSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    day?: boolean
    startTime?: boolean
    endTime?: boolean
    subjectId?: boolean
    classId?: boolean
    teacherId?: boolean
    Class?: boolean | ClassDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
    Teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lesson"]>

  export type LessonSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    day?: boolean
    startTime?: boolean
    endTime?: boolean
    subjectId?: boolean
    classId?: boolean
    teacherId?: boolean
    Class?: boolean | ClassDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
    Teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lesson"]>

  export type LessonSelectScalar = {
    id?: boolean
    name?: boolean
    day?: boolean
    startTime?: boolean
    endTime?: boolean
    subjectId?: boolean
    classId?: boolean
    teacherId?: boolean
  }

  export type LessonOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "day" | "startTime" | "endTime" | "subjectId" | "classId" | "teacherId", ExtArgs["result"]["lesson"]>
  export type LessonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Class?: boolean | ClassDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
    Teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }
  export type LessonIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Class?: boolean | ClassDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
    Teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }
  export type LessonIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Class?: boolean | ClassDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
    Teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }

  export type $LessonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lesson"
    objects: {
      Class: Prisma.$ClassPayload<ExtArgs>
      Subject: Prisma.$SubjectPayload<ExtArgs>
      Teacher: Prisma.$TeacherPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      day: $Enums.LessonDay
      startTime: Date
      endTime: Date
      subjectId: number
      classId: number
      teacherId: string
    }, ExtArgs["result"]["lesson"]>
    composites: {}
  }

  type LessonGetPayload<S extends boolean | null | undefined | LessonDefaultArgs> = $Result.GetResult<Prisma.$LessonPayload, S>

  type LessonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LessonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LessonCountAggregateInputType | true
    }

  export interface LessonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lesson'], meta: { name: 'Lesson' } }
    /**
     * Find zero or one Lesson that matches the filter.
     * @param {LessonFindUniqueArgs} args - Arguments to find a Lesson
     * @example
     * // Get one Lesson
     * const lesson = await prisma.lesson.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LessonFindUniqueArgs>(args: SelectSubset<T, LessonFindUniqueArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Lesson that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LessonFindUniqueOrThrowArgs} args - Arguments to find a Lesson
     * @example
     * // Get one Lesson
     * const lesson = await prisma.lesson.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LessonFindUniqueOrThrowArgs>(args: SelectSubset<T, LessonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lesson that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonFindFirstArgs} args - Arguments to find a Lesson
     * @example
     * // Get one Lesson
     * const lesson = await prisma.lesson.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LessonFindFirstArgs>(args?: SelectSubset<T, LessonFindFirstArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lesson that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonFindFirstOrThrowArgs} args - Arguments to find a Lesson
     * @example
     * // Get one Lesson
     * const lesson = await prisma.lesson.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LessonFindFirstOrThrowArgs>(args?: SelectSubset<T, LessonFindFirstOrThrowArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Lessons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lessons
     * const lessons = await prisma.lesson.findMany()
     * 
     * // Get first 10 Lessons
     * const lessons = await prisma.lesson.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lessonWithIdOnly = await prisma.lesson.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LessonFindManyArgs>(args?: SelectSubset<T, LessonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Lesson.
     * @param {LessonCreateArgs} args - Arguments to create a Lesson.
     * @example
     * // Create one Lesson
     * const Lesson = await prisma.lesson.create({
     *   data: {
     *     // ... data to create a Lesson
     *   }
     * })
     * 
     */
    create<T extends LessonCreateArgs>(args: SelectSubset<T, LessonCreateArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Lessons.
     * @param {LessonCreateManyArgs} args - Arguments to create many Lessons.
     * @example
     * // Create many Lessons
     * const lesson = await prisma.lesson.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LessonCreateManyArgs>(args?: SelectSubset<T, LessonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lessons and returns the data saved in the database.
     * @param {LessonCreateManyAndReturnArgs} args - Arguments to create many Lessons.
     * @example
     * // Create many Lessons
     * const lesson = await prisma.lesson.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lessons and only return the `id`
     * const lessonWithIdOnly = await prisma.lesson.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LessonCreateManyAndReturnArgs>(args?: SelectSubset<T, LessonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Lesson.
     * @param {LessonDeleteArgs} args - Arguments to delete one Lesson.
     * @example
     * // Delete one Lesson
     * const Lesson = await prisma.lesson.delete({
     *   where: {
     *     // ... filter to delete one Lesson
     *   }
     * })
     * 
     */
    delete<T extends LessonDeleteArgs>(args: SelectSubset<T, LessonDeleteArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Lesson.
     * @param {LessonUpdateArgs} args - Arguments to update one Lesson.
     * @example
     * // Update one Lesson
     * const lesson = await prisma.lesson.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LessonUpdateArgs>(args: SelectSubset<T, LessonUpdateArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Lessons.
     * @param {LessonDeleteManyArgs} args - Arguments to filter Lessons to delete.
     * @example
     * // Delete a few Lessons
     * const { count } = await prisma.lesson.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LessonDeleteManyArgs>(args?: SelectSubset<T, LessonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lessons
     * const lesson = await prisma.lesson.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LessonUpdateManyArgs>(args: SelectSubset<T, LessonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lessons and returns the data updated in the database.
     * @param {LessonUpdateManyAndReturnArgs} args - Arguments to update many Lessons.
     * @example
     * // Update many Lessons
     * const lesson = await prisma.lesson.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Lessons and only return the `id`
     * const lessonWithIdOnly = await prisma.lesson.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LessonUpdateManyAndReturnArgs>(args: SelectSubset<T, LessonUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Lesson.
     * @param {LessonUpsertArgs} args - Arguments to update or create a Lesson.
     * @example
     * // Update or create a Lesson
     * const lesson = await prisma.lesson.upsert({
     *   create: {
     *     // ... data to create a Lesson
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lesson we want to update
     *   }
     * })
     */
    upsert<T extends LessonUpsertArgs>(args: SelectSubset<T, LessonUpsertArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonCountArgs} args - Arguments to filter Lessons to count.
     * @example
     * // Count the number of Lessons
     * const count = await prisma.lesson.count({
     *   where: {
     *     // ... the filter for the Lessons we want to count
     *   }
     * })
    **/
    count<T extends LessonCountArgs>(
      args?: Subset<T, LessonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LessonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lesson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LessonAggregateArgs>(args: Subset<T, LessonAggregateArgs>): Prisma.PrismaPromise<GetLessonAggregateType<T>>

    /**
     * Group by Lesson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LessonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LessonGroupByArgs['orderBy'] }
        : { orderBy?: LessonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LessonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLessonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lesson model
   */
  readonly fields: LessonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lesson.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LessonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Teacher<T extends TeacherDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeacherDefaultArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lesson model
   */
  interface LessonFieldRefs {
    readonly id: FieldRef<"Lesson", 'Int'>
    readonly name: FieldRef<"Lesson", 'String'>
    readonly day: FieldRef<"Lesson", 'LessonDay'>
    readonly startTime: FieldRef<"Lesson", 'DateTime'>
    readonly endTime: FieldRef<"Lesson", 'DateTime'>
    readonly subjectId: FieldRef<"Lesson", 'Int'>
    readonly classId: FieldRef<"Lesson", 'Int'>
    readonly teacherId: FieldRef<"Lesson", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Lesson findUnique
   */
  export type LessonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    /**
     * Filter, which Lesson to fetch.
     */
    where: LessonWhereUniqueInput
  }

  /**
   * Lesson findUniqueOrThrow
   */
  export type LessonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    /**
     * Filter, which Lesson to fetch.
     */
    where: LessonWhereUniqueInput
  }

  /**
   * Lesson findFirst
   */
  export type LessonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    /**
     * Filter, which Lesson to fetch.
     */
    where?: LessonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonOrderByWithRelationInput | LessonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lessons.
     */
    cursor?: LessonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lessons.
     */
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * Lesson findFirstOrThrow
   */
  export type LessonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    /**
     * Filter, which Lesson to fetch.
     */
    where?: LessonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonOrderByWithRelationInput | LessonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lessons.
     */
    cursor?: LessonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lessons.
     */
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * Lesson findMany
   */
  export type LessonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    /**
     * Filter, which Lessons to fetch.
     */
    where?: LessonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonOrderByWithRelationInput | LessonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lessons.
     */
    cursor?: LessonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * Lesson create
   */
  export type LessonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    /**
     * The data needed to create a Lesson.
     */
    data: XOR<LessonCreateInput, LessonUncheckedCreateInput>
  }

  /**
   * Lesson createMany
   */
  export type LessonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lessons.
     */
    data: LessonCreateManyInput | LessonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lesson createManyAndReturn
   */
  export type LessonCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * The data used to create many Lessons.
     */
    data: LessonCreateManyInput | LessonCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lesson update
   */
  export type LessonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    /**
     * The data needed to update a Lesson.
     */
    data: XOR<LessonUpdateInput, LessonUncheckedUpdateInput>
    /**
     * Choose, which Lesson to update.
     */
    where: LessonWhereUniqueInput
  }

  /**
   * Lesson updateMany
   */
  export type LessonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lessons.
     */
    data: XOR<LessonUpdateManyMutationInput, LessonUncheckedUpdateManyInput>
    /**
     * Filter which Lessons to update
     */
    where?: LessonWhereInput
    /**
     * Limit how many Lessons to update.
     */
    limit?: number
  }

  /**
   * Lesson updateManyAndReturn
   */
  export type LessonUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * The data used to update Lessons.
     */
    data: XOR<LessonUpdateManyMutationInput, LessonUncheckedUpdateManyInput>
    /**
     * Filter which Lessons to update
     */
    where?: LessonWhereInput
    /**
     * Limit how many Lessons to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lesson upsert
   */
  export type LessonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    /**
     * The filter to search for the Lesson to update in case it exists.
     */
    where: LessonWhereUniqueInput
    /**
     * In case the Lesson found by the `where` argument doesn't exist, create a new Lesson with this data.
     */
    create: XOR<LessonCreateInput, LessonUncheckedCreateInput>
    /**
     * In case the Lesson was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LessonUpdateInput, LessonUncheckedUpdateInput>
  }

  /**
   * Lesson delete
   */
  export type LessonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    /**
     * Filter which Lesson to delete.
     */
    where: LessonWhereUniqueInput
  }

  /**
   * Lesson deleteMany
   */
  export type LessonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lessons to delete
     */
    where?: LessonWhereInput
    /**
     * Limit how many Lessons to delete.
     */
    limit?: number
  }

  /**
   * Lesson without action
   */
  export type LessonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
  }


  /**
   * Model Announcement
   */

  export type AggregateAnnouncement = {
    _count: AnnouncementCountAggregateOutputType | null
    _avg: AnnouncementAvgAggregateOutputType | null
    _sum: AnnouncementSumAggregateOutputType | null
    _min: AnnouncementMinAggregateOutputType | null
    _max: AnnouncementMaxAggregateOutputType | null
  }

  export type AnnouncementAvgAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type AnnouncementSumAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type AnnouncementMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    date: Date | null
    classId: number | null
  }

  export type AnnouncementMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    date: Date | null
    classId: number | null
  }

  export type AnnouncementCountAggregateOutputType = {
    id: number
    title: number
    description: number
    date: number
    classId: number
    _all: number
  }


  export type AnnouncementAvgAggregateInputType = {
    id?: true
    classId?: true
  }

  export type AnnouncementSumAggregateInputType = {
    id?: true
    classId?: true
  }

  export type AnnouncementMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    date?: true
    classId?: true
  }

  export type AnnouncementMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    date?: true
    classId?: true
  }

  export type AnnouncementCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    date?: true
    classId?: true
    _all?: true
  }

  export type AnnouncementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Announcement to aggregate.
     */
    where?: AnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Announcements to fetch.
     */
    orderBy?: AnnouncementOrderByWithRelationInput | AnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Announcements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Announcements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Announcements
    **/
    _count?: true | AnnouncementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnnouncementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnnouncementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnnouncementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnnouncementMaxAggregateInputType
  }

  export type GetAnnouncementAggregateType<T extends AnnouncementAggregateArgs> = {
        [P in keyof T & keyof AggregateAnnouncement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnnouncement[P]>
      : GetScalarType<T[P], AggregateAnnouncement[P]>
  }




  export type AnnouncementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnnouncementWhereInput
    orderBy?: AnnouncementOrderByWithAggregationInput | AnnouncementOrderByWithAggregationInput[]
    by: AnnouncementScalarFieldEnum[] | AnnouncementScalarFieldEnum
    having?: AnnouncementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnnouncementCountAggregateInputType | true
    _avg?: AnnouncementAvgAggregateInputType
    _sum?: AnnouncementSumAggregateInputType
    _min?: AnnouncementMinAggregateInputType
    _max?: AnnouncementMaxAggregateInputType
  }

  export type AnnouncementGroupByOutputType = {
    id: number
    title: string
    description: string
    date: Date
    classId: number | null
    _count: AnnouncementCountAggregateOutputType | null
    _avg: AnnouncementAvgAggregateOutputType | null
    _sum: AnnouncementSumAggregateOutputType | null
    _min: AnnouncementMinAggregateOutputType | null
    _max: AnnouncementMaxAggregateOutputType | null
  }

  type GetAnnouncementGroupByPayload<T extends AnnouncementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnnouncementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnnouncementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnnouncementGroupByOutputType[P]>
            : GetScalarType<T[P], AnnouncementGroupByOutputType[P]>
        }
      >
    >


  export type AnnouncementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    classId?: boolean
    Class?: boolean | Announcement$ClassArgs<ExtArgs>
  }, ExtArgs["result"]["announcement"]>

  export type AnnouncementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    classId?: boolean
    Class?: boolean | Announcement$ClassArgs<ExtArgs>
  }, ExtArgs["result"]["announcement"]>

  export type AnnouncementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    classId?: boolean
    Class?: boolean | Announcement$ClassArgs<ExtArgs>
  }, ExtArgs["result"]["announcement"]>

  export type AnnouncementSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    classId?: boolean
  }

  export type AnnouncementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "date" | "classId", ExtArgs["result"]["announcement"]>
  export type AnnouncementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Class?: boolean | Announcement$ClassArgs<ExtArgs>
  }
  export type AnnouncementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Class?: boolean | Announcement$ClassArgs<ExtArgs>
  }
  export type AnnouncementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Class?: boolean | Announcement$ClassArgs<ExtArgs>
  }

  export type $AnnouncementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Announcement"
    objects: {
      Class: Prisma.$ClassPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      date: Date
      classId: number | null
    }, ExtArgs["result"]["announcement"]>
    composites: {}
  }

  type AnnouncementGetPayload<S extends boolean | null | undefined | AnnouncementDefaultArgs> = $Result.GetResult<Prisma.$AnnouncementPayload, S>

  type AnnouncementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnnouncementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnnouncementCountAggregateInputType | true
    }

  export interface AnnouncementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Announcement'], meta: { name: 'Announcement' } }
    /**
     * Find zero or one Announcement that matches the filter.
     * @param {AnnouncementFindUniqueArgs} args - Arguments to find a Announcement
     * @example
     * // Get one Announcement
     * const announcement = await prisma.announcement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnnouncementFindUniqueArgs>(args: SelectSubset<T, AnnouncementFindUniqueArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Announcement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnnouncementFindUniqueOrThrowArgs} args - Arguments to find a Announcement
     * @example
     * // Get one Announcement
     * const announcement = await prisma.announcement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnnouncementFindUniqueOrThrowArgs>(args: SelectSubset<T, AnnouncementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Announcement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementFindFirstArgs} args - Arguments to find a Announcement
     * @example
     * // Get one Announcement
     * const announcement = await prisma.announcement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnnouncementFindFirstArgs>(args?: SelectSubset<T, AnnouncementFindFirstArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Announcement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementFindFirstOrThrowArgs} args - Arguments to find a Announcement
     * @example
     * // Get one Announcement
     * const announcement = await prisma.announcement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnnouncementFindFirstOrThrowArgs>(args?: SelectSubset<T, AnnouncementFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Announcements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Announcements
     * const announcements = await prisma.announcement.findMany()
     * 
     * // Get first 10 Announcements
     * const announcements = await prisma.announcement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const announcementWithIdOnly = await prisma.announcement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnnouncementFindManyArgs>(args?: SelectSubset<T, AnnouncementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Announcement.
     * @param {AnnouncementCreateArgs} args - Arguments to create a Announcement.
     * @example
     * // Create one Announcement
     * const Announcement = await prisma.announcement.create({
     *   data: {
     *     // ... data to create a Announcement
     *   }
     * })
     * 
     */
    create<T extends AnnouncementCreateArgs>(args: SelectSubset<T, AnnouncementCreateArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Announcements.
     * @param {AnnouncementCreateManyArgs} args - Arguments to create many Announcements.
     * @example
     * // Create many Announcements
     * const announcement = await prisma.announcement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnnouncementCreateManyArgs>(args?: SelectSubset<T, AnnouncementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Announcements and returns the data saved in the database.
     * @param {AnnouncementCreateManyAndReturnArgs} args - Arguments to create many Announcements.
     * @example
     * // Create many Announcements
     * const announcement = await prisma.announcement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Announcements and only return the `id`
     * const announcementWithIdOnly = await prisma.announcement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnnouncementCreateManyAndReturnArgs>(args?: SelectSubset<T, AnnouncementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Announcement.
     * @param {AnnouncementDeleteArgs} args - Arguments to delete one Announcement.
     * @example
     * // Delete one Announcement
     * const Announcement = await prisma.announcement.delete({
     *   where: {
     *     // ... filter to delete one Announcement
     *   }
     * })
     * 
     */
    delete<T extends AnnouncementDeleteArgs>(args: SelectSubset<T, AnnouncementDeleteArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Announcement.
     * @param {AnnouncementUpdateArgs} args - Arguments to update one Announcement.
     * @example
     * // Update one Announcement
     * const announcement = await prisma.announcement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnnouncementUpdateArgs>(args: SelectSubset<T, AnnouncementUpdateArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Announcements.
     * @param {AnnouncementDeleteManyArgs} args - Arguments to filter Announcements to delete.
     * @example
     * // Delete a few Announcements
     * const { count } = await prisma.announcement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnnouncementDeleteManyArgs>(args?: SelectSubset<T, AnnouncementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Announcements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Announcements
     * const announcement = await prisma.announcement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnnouncementUpdateManyArgs>(args: SelectSubset<T, AnnouncementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Announcements and returns the data updated in the database.
     * @param {AnnouncementUpdateManyAndReturnArgs} args - Arguments to update many Announcements.
     * @example
     * // Update many Announcements
     * const announcement = await prisma.announcement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Announcements and only return the `id`
     * const announcementWithIdOnly = await prisma.announcement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnnouncementUpdateManyAndReturnArgs>(args: SelectSubset<T, AnnouncementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Announcement.
     * @param {AnnouncementUpsertArgs} args - Arguments to update or create a Announcement.
     * @example
     * // Update or create a Announcement
     * const announcement = await prisma.announcement.upsert({
     *   create: {
     *     // ... data to create a Announcement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Announcement we want to update
     *   }
     * })
     */
    upsert<T extends AnnouncementUpsertArgs>(args: SelectSubset<T, AnnouncementUpsertArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Announcements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementCountArgs} args - Arguments to filter Announcements to count.
     * @example
     * // Count the number of Announcements
     * const count = await prisma.announcement.count({
     *   where: {
     *     // ... the filter for the Announcements we want to count
     *   }
     * })
    **/
    count<T extends AnnouncementCountArgs>(
      args?: Subset<T, AnnouncementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnnouncementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Announcement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnnouncementAggregateArgs>(args: Subset<T, AnnouncementAggregateArgs>): Prisma.PrismaPromise<GetAnnouncementAggregateType<T>>

    /**
     * Group by Announcement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnnouncementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnnouncementGroupByArgs['orderBy'] }
        : { orderBy?: AnnouncementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnnouncementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnnouncementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Announcement model
   */
  readonly fields: AnnouncementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Announcement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnnouncementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Class<T extends Announcement$ClassArgs<ExtArgs> = {}>(args?: Subset<T, Announcement$ClassArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Announcement model
   */
  interface AnnouncementFieldRefs {
    readonly id: FieldRef<"Announcement", 'Int'>
    readonly title: FieldRef<"Announcement", 'String'>
    readonly description: FieldRef<"Announcement", 'String'>
    readonly date: FieldRef<"Announcement", 'DateTime'>
    readonly classId: FieldRef<"Announcement", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Announcement findUnique
   */
  export type AnnouncementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which Announcement to fetch.
     */
    where: AnnouncementWhereUniqueInput
  }

  /**
   * Announcement findUniqueOrThrow
   */
  export type AnnouncementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which Announcement to fetch.
     */
    where: AnnouncementWhereUniqueInput
  }

  /**
   * Announcement findFirst
   */
  export type AnnouncementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which Announcement to fetch.
     */
    where?: AnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Announcements to fetch.
     */
    orderBy?: AnnouncementOrderByWithRelationInput | AnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Announcements.
     */
    cursor?: AnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Announcements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Announcements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Announcements.
     */
    distinct?: AnnouncementScalarFieldEnum | AnnouncementScalarFieldEnum[]
  }

  /**
   * Announcement findFirstOrThrow
   */
  export type AnnouncementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which Announcement to fetch.
     */
    where?: AnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Announcements to fetch.
     */
    orderBy?: AnnouncementOrderByWithRelationInput | AnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Announcements.
     */
    cursor?: AnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Announcements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Announcements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Announcements.
     */
    distinct?: AnnouncementScalarFieldEnum | AnnouncementScalarFieldEnum[]
  }

  /**
   * Announcement findMany
   */
  export type AnnouncementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which Announcements to fetch.
     */
    where?: AnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Announcements to fetch.
     */
    orderBy?: AnnouncementOrderByWithRelationInput | AnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Announcements.
     */
    cursor?: AnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Announcements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Announcements.
     */
    skip?: number
    distinct?: AnnouncementScalarFieldEnum | AnnouncementScalarFieldEnum[]
  }

  /**
   * Announcement create
   */
  export type AnnouncementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * The data needed to create a Announcement.
     */
    data: XOR<AnnouncementCreateInput, AnnouncementUncheckedCreateInput>
  }

  /**
   * Announcement createMany
   */
  export type AnnouncementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Announcements.
     */
    data: AnnouncementCreateManyInput | AnnouncementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Announcement createManyAndReturn
   */
  export type AnnouncementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * The data used to create many Announcements.
     */
    data: AnnouncementCreateManyInput | AnnouncementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Announcement update
   */
  export type AnnouncementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * The data needed to update a Announcement.
     */
    data: XOR<AnnouncementUpdateInput, AnnouncementUncheckedUpdateInput>
    /**
     * Choose, which Announcement to update.
     */
    where: AnnouncementWhereUniqueInput
  }

  /**
   * Announcement updateMany
   */
  export type AnnouncementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Announcements.
     */
    data: XOR<AnnouncementUpdateManyMutationInput, AnnouncementUncheckedUpdateManyInput>
    /**
     * Filter which Announcements to update
     */
    where?: AnnouncementWhereInput
    /**
     * Limit how many Announcements to update.
     */
    limit?: number
  }

  /**
   * Announcement updateManyAndReturn
   */
  export type AnnouncementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * The data used to update Announcements.
     */
    data: XOR<AnnouncementUpdateManyMutationInput, AnnouncementUncheckedUpdateManyInput>
    /**
     * Filter which Announcements to update
     */
    where?: AnnouncementWhereInput
    /**
     * Limit how many Announcements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Announcement upsert
   */
  export type AnnouncementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * The filter to search for the Announcement to update in case it exists.
     */
    where: AnnouncementWhereUniqueInput
    /**
     * In case the Announcement found by the `where` argument doesn't exist, create a new Announcement with this data.
     */
    create: XOR<AnnouncementCreateInput, AnnouncementUncheckedCreateInput>
    /**
     * In case the Announcement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnnouncementUpdateInput, AnnouncementUncheckedUpdateInput>
  }

  /**
   * Announcement delete
   */
  export type AnnouncementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * Filter which Announcement to delete.
     */
    where: AnnouncementWhereUniqueInput
  }

  /**
   * Announcement deleteMany
   */
  export type AnnouncementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Announcements to delete
     */
    where?: AnnouncementWhereInput
    /**
     * Limit how many Announcements to delete.
     */
    limit?: number
  }

  /**
   * Announcement.Class
   */
  export type Announcement$ClassArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
  }

  /**
   * Announcement without action
   */
  export type AnnouncementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
  }


  /**
   * Model Attendance
   */

  export type AggregateAttendance = {
    _count: AttendanceCountAggregateOutputType | null
    _avg: AttendanceAvgAggregateOutputType | null
    _sum: AttendanceSumAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  export type AttendanceAvgAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type AttendanceSumAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type AttendanceMinAggregateOutputType = {
    id: number | null
    date: Date | null
    present: boolean | null
    studentId: string | null
    classId: number | null
  }

  export type AttendanceMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    present: boolean | null
    studentId: string | null
    classId: number | null
  }

  export type AttendanceCountAggregateOutputType = {
    id: number
    date: number
    present: number
    studentId: number
    classId: number
    _all: number
  }


  export type AttendanceAvgAggregateInputType = {
    id?: true
    classId?: true
  }

  export type AttendanceSumAggregateInputType = {
    id?: true
    classId?: true
  }

  export type AttendanceMinAggregateInputType = {
    id?: true
    date?: true
    present?: true
    studentId?: true
    classId?: true
  }

  export type AttendanceMaxAggregateInputType = {
    id?: true
    date?: true
    present?: true
    studentId?: true
    classId?: true
  }

  export type AttendanceCountAggregateInputType = {
    id?: true
    date?: true
    present?: true
    studentId?: true
    classId?: true
    _all?: true
  }

  export type AttendanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendance to aggregate.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attendances
    **/
    _count?: true | AttendanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttendanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttendanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceMaxAggregateInputType
  }

  export type GetAttendanceAggregateType<T extends AttendanceAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendance[P]>
      : GetScalarType<T[P], AggregateAttendance[P]>
  }




  export type AttendanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithAggregationInput | AttendanceOrderByWithAggregationInput[]
    by: AttendanceScalarFieldEnum[] | AttendanceScalarFieldEnum
    having?: AttendanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceCountAggregateInputType | true
    _avg?: AttendanceAvgAggregateInputType
    _sum?: AttendanceSumAggregateInputType
    _min?: AttendanceMinAggregateInputType
    _max?: AttendanceMaxAggregateInputType
  }

  export type AttendanceGroupByOutputType = {
    id: number
    date: Date
    present: boolean
    studentId: string
    classId: number
    _count: AttendanceCountAggregateOutputType | null
    _avg: AttendanceAvgAggregateOutputType | null
    _sum: AttendanceSumAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  type GetAttendanceGroupByPayload<T extends AttendanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
        }
      >
    >


  export type AttendanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    present?: boolean
    studentId?: boolean
    classId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    present?: boolean
    studentId?: boolean
    classId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    present?: boolean
    studentId?: boolean
    classId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectScalar = {
    id?: boolean
    date?: boolean
    present?: boolean
    studentId?: boolean
    classId?: boolean
  }

  export type AttendanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "present" | "studentId" | "classId", ExtArgs["result"]["attendance"]>
  export type AttendanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type AttendanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type AttendanceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $AttendancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attendance"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      Student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      present: boolean
      studentId: string
      classId: number
    }, ExtArgs["result"]["attendance"]>
    composites: {}
  }

  type AttendanceGetPayload<S extends boolean | null | undefined | AttendanceDefaultArgs> = $Result.GetResult<Prisma.$AttendancePayload, S>

  type AttendanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AttendanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttendanceCountAggregateInputType | true
    }

  export interface AttendanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attendance'], meta: { name: 'Attendance' } }
    /**
     * Find zero or one Attendance that matches the filter.
     * @param {AttendanceFindUniqueArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttendanceFindUniqueArgs>(args: SelectSubset<T, AttendanceFindUniqueArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Attendance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AttendanceFindUniqueOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttendanceFindUniqueOrThrowArgs>(args: SelectSubset<T, AttendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attendance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindFirstArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttendanceFindFirstArgs>(args?: SelectSubset<T, AttendanceFindFirstArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attendance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindFirstOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttendanceFindFirstOrThrowArgs>(args?: SelectSubset<T, AttendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Attendances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attendances
     * const attendances = await prisma.attendance.findMany()
     * 
     * // Get first 10 Attendances
     * const attendances = await prisma.attendance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendanceWithIdOnly = await prisma.attendance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttendanceFindManyArgs>(args?: SelectSubset<T, AttendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Attendance.
     * @param {AttendanceCreateArgs} args - Arguments to create a Attendance.
     * @example
     * // Create one Attendance
     * const Attendance = await prisma.attendance.create({
     *   data: {
     *     // ... data to create a Attendance
     *   }
     * })
     * 
     */
    create<T extends AttendanceCreateArgs>(args: SelectSubset<T, AttendanceCreateArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Attendances.
     * @param {AttendanceCreateManyArgs} args - Arguments to create many Attendances.
     * @example
     * // Create many Attendances
     * const attendance = await prisma.attendance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttendanceCreateManyArgs>(args?: SelectSubset<T, AttendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Attendances and returns the data saved in the database.
     * @param {AttendanceCreateManyAndReturnArgs} args - Arguments to create many Attendances.
     * @example
     * // Create many Attendances
     * const attendance = await prisma.attendance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Attendances and only return the `id`
     * const attendanceWithIdOnly = await prisma.attendance.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttendanceCreateManyAndReturnArgs>(args?: SelectSubset<T, AttendanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Attendance.
     * @param {AttendanceDeleteArgs} args - Arguments to delete one Attendance.
     * @example
     * // Delete one Attendance
     * const Attendance = await prisma.attendance.delete({
     *   where: {
     *     // ... filter to delete one Attendance
     *   }
     * })
     * 
     */
    delete<T extends AttendanceDeleteArgs>(args: SelectSubset<T, AttendanceDeleteArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Attendance.
     * @param {AttendanceUpdateArgs} args - Arguments to update one Attendance.
     * @example
     * // Update one Attendance
     * const attendance = await prisma.attendance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttendanceUpdateArgs>(args: SelectSubset<T, AttendanceUpdateArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Attendances.
     * @param {AttendanceDeleteManyArgs} args - Arguments to filter Attendances to delete.
     * @example
     * // Delete a few Attendances
     * const { count } = await prisma.attendance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttendanceDeleteManyArgs>(args?: SelectSubset<T, AttendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attendances
     * const attendance = await prisma.attendance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttendanceUpdateManyArgs>(args: SelectSubset<T, AttendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendances and returns the data updated in the database.
     * @param {AttendanceUpdateManyAndReturnArgs} args - Arguments to update many Attendances.
     * @example
     * // Update many Attendances
     * const attendance = await prisma.attendance.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Attendances and only return the `id`
     * const attendanceWithIdOnly = await prisma.attendance.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AttendanceUpdateManyAndReturnArgs>(args: SelectSubset<T, AttendanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Attendance.
     * @param {AttendanceUpsertArgs} args - Arguments to update or create a Attendance.
     * @example
     * // Update or create a Attendance
     * const attendance = await prisma.attendance.upsert({
     *   create: {
     *     // ... data to create a Attendance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attendance we want to update
     *   }
     * })
     */
    upsert<T extends AttendanceUpsertArgs>(args: SelectSubset<T, AttendanceUpsertArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceCountArgs} args - Arguments to filter Attendances to count.
     * @example
     * // Count the number of Attendances
     * const count = await prisma.attendance.count({
     *   where: {
     *     // ... the filter for the Attendances we want to count
     *   }
     * })
    **/
    count<T extends AttendanceCountArgs>(
      args?: Subset<T, AttendanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceAggregateArgs>(args: Subset<T, AttendanceAggregateArgs>): Prisma.PrismaPromise<GetAttendanceAggregateType<T>>

    /**
     * Group by Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttendanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttendanceGroupByArgs['orderBy'] }
        : { orderBy?: AttendanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attendance model
   */
  readonly fields: AttendanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attendance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttendanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attendance model
   */
  interface AttendanceFieldRefs {
    readonly id: FieldRef<"Attendance", 'Int'>
    readonly date: FieldRef<"Attendance", 'DateTime'>
    readonly present: FieldRef<"Attendance", 'Boolean'>
    readonly studentId: FieldRef<"Attendance", 'String'>
    readonly classId: FieldRef<"Attendance", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Attendance findUnique
   */
  export type AttendanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance findUniqueOrThrow
   */
  export type AttendanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance findFirst
   */
  export type AttendanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance findFirstOrThrow
   */
  export type AttendanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance findMany
   */
  export type AttendanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendances to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance create
   */
  export type AttendanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The data needed to create a Attendance.
     */
    data: XOR<AttendanceCreateInput, AttendanceUncheckedCreateInput>
  }

  /**
   * Attendance createMany
   */
  export type AttendanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attendances.
     */
    data: AttendanceCreateManyInput | AttendanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Attendance createManyAndReturn
   */
  export type AttendanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * The data used to create many Attendances.
     */
    data: AttendanceCreateManyInput | AttendanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attendance update
   */
  export type AttendanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The data needed to update a Attendance.
     */
    data: XOR<AttendanceUpdateInput, AttendanceUncheckedUpdateInput>
    /**
     * Choose, which Attendance to update.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance updateMany
   */
  export type AttendanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attendances.
     */
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyInput>
    /**
     * Filter which Attendances to update
     */
    where?: AttendanceWhereInput
    /**
     * Limit how many Attendances to update.
     */
    limit?: number
  }

  /**
   * Attendance updateManyAndReturn
   */
  export type AttendanceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * The data used to update Attendances.
     */
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyInput>
    /**
     * Filter which Attendances to update
     */
    where?: AttendanceWhereInput
    /**
     * Limit how many Attendances to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attendance upsert
   */
  export type AttendanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The filter to search for the Attendance to update in case it exists.
     */
    where: AttendanceWhereUniqueInput
    /**
     * In case the Attendance found by the `where` argument doesn't exist, create a new Attendance with this data.
     */
    create: XOR<AttendanceCreateInput, AttendanceUncheckedCreateInput>
    /**
     * In case the Attendance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttendanceUpdateInput, AttendanceUncheckedUpdateInput>
  }

  /**
   * Attendance delete
   */
  export type AttendanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter which Attendance to delete.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance deleteMany
   */
  export type AttendanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendances to delete
     */
    where?: AttendanceWhereInput
    /**
     * Limit how many Attendances to delete.
     */
    limit?: number
  }

  /**
   * Attendance without action
   */
  export type AttendanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type EventSumAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type EventMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    startTime: Date | null
    endTime: Date | null
    classId: number | null
  }

  export type EventMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    startTime: Date | null
    endTime: Date | null
    classId: number | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    title: number
    description: number
    startTime: number
    endTime: number
    classId: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    id?: true
    classId?: true
  }

  export type EventSumAggregateInputType = {
    id?: true
    classId?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startTime?: true
    endTime?: true
    classId?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startTime?: true
    endTime?: true
    classId?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startTime?: true
    endTime?: true
    classId?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: number
    title: string
    description: string
    startTime: Date
    endTime: Date
    classId: number | null
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    classId?: boolean
    Class?: boolean | Event$ClassArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    classId?: boolean
    Class?: boolean | Event$ClassArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    classId?: boolean
    Class?: boolean | Event$ClassArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    classId?: boolean
  }

  export type EventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "startTime" | "endTime" | "classId", ExtArgs["result"]["event"]>
  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Class?: boolean | Event$ClassArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Class?: boolean | Event$ClassArgs<ExtArgs>
  }
  export type EventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Class?: boolean | Event$ClassArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      Class: Prisma.$ClassPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      startTime: Date
      endTime: Date
      classId: number | null
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events and returns the data updated in the database.
     * @param {EventUpdateManyAndReturnArgs} args - Arguments to update many Events.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventUpdateManyAndReturnArgs>(args: SelectSubset<T, EventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Class<T extends Event$ClassArgs<ExtArgs> = {}>(args?: Subset<T, Event$ClassArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'Int'>
    readonly title: FieldRef<"Event", 'String'>
    readonly description: FieldRef<"Event", 'String'>
    readonly startTime: FieldRef<"Event", 'DateTime'>
    readonly endTime: FieldRef<"Event", 'DateTime'>
    readonly classId: FieldRef<"Event", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
  }

  /**
   * Event updateManyAndReturn
   */
  export type EventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to delete.
     */
    limit?: number
  }

  /**
   * Event.Class
   */
  export type Event$ClassArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model Exam
   */

  export type AggregateExam = {
    _count: ExamCountAggregateOutputType | null
    _avg: ExamAvgAggregateOutputType | null
    _sum: ExamSumAggregateOutputType | null
    _min: ExamMinAggregateOutputType | null
    _max: ExamMaxAggregateOutputType | null
  }

  export type ExamAvgAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type ExamSumAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type ExamMinAggregateOutputType = {
    id: number | null
    title: string | null
    date: Date | null
    classId: number | null
  }

  export type ExamMaxAggregateOutputType = {
    id: number | null
    title: string | null
    date: Date | null
    classId: number | null
  }

  export type ExamCountAggregateOutputType = {
    id: number
    title: number
    date: number
    classId: number
    _all: number
  }


  export type ExamAvgAggregateInputType = {
    id?: true
    classId?: true
  }

  export type ExamSumAggregateInputType = {
    id?: true
    classId?: true
  }

  export type ExamMinAggregateInputType = {
    id?: true
    title?: true
    date?: true
    classId?: true
  }

  export type ExamMaxAggregateInputType = {
    id?: true
    title?: true
    date?: true
    classId?: true
  }

  export type ExamCountAggregateInputType = {
    id?: true
    title?: true
    date?: true
    classId?: true
    _all?: true
  }

  export type ExamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exam to aggregate.
     */
    where?: ExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     */
    orderBy?: ExamOrderByWithRelationInput | ExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exams
    **/
    _count?: true | ExamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExamMaxAggregateInputType
  }

  export type GetExamAggregateType<T extends ExamAggregateArgs> = {
        [P in keyof T & keyof AggregateExam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExam[P]>
      : GetScalarType<T[P], AggregateExam[P]>
  }




  export type ExamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamWhereInput
    orderBy?: ExamOrderByWithAggregationInput | ExamOrderByWithAggregationInput[]
    by: ExamScalarFieldEnum[] | ExamScalarFieldEnum
    having?: ExamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExamCountAggregateInputType | true
    _avg?: ExamAvgAggregateInputType
    _sum?: ExamSumAggregateInputType
    _min?: ExamMinAggregateInputType
    _max?: ExamMaxAggregateInputType
  }

  export type ExamGroupByOutputType = {
    id: number
    title: string
    date: Date
    classId: number
    _count: ExamCountAggregateOutputType | null
    _avg: ExamAvgAggregateOutputType | null
    _sum: ExamSumAggregateOutputType | null
    _min: ExamMinAggregateOutputType | null
    _max: ExamMaxAggregateOutputType | null
  }

  type GetExamGroupByPayload<T extends ExamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExamGroupByOutputType[P]>
            : GetScalarType<T[P], ExamGroupByOutputType[P]>
        }
      >
    >


  export type ExamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    date?: boolean
    classId?: boolean
    Class?: boolean | ClassDefaultArgs<ExtArgs>
    subjects?: boolean | Exam$subjectsArgs<ExtArgs>
    results?: boolean | Exam$resultsArgs<ExtArgs>
    _count?: boolean | ExamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exam"]>

  export type ExamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    date?: boolean
    classId?: boolean
    Class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exam"]>

  export type ExamSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    date?: boolean
    classId?: boolean
    Class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exam"]>

  export type ExamSelectScalar = {
    id?: boolean
    title?: boolean
    date?: boolean
    classId?: boolean
  }

  export type ExamOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "date" | "classId", ExtArgs["result"]["exam"]>
  export type ExamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Class?: boolean | ClassDefaultArgs<ExtArgs>
    subjects?: boolean | Exam$subjectsArgs<ExtArgs>
    results?: boolean | Exam$resultsArgs<ExtArgs>
    _count?: boolean | ExamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type ExamIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Class?: boolean | ClassDefaultArgs<ExtArgs>
  }

  export type $ExamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Exam"
    objects: {
      Class: Prisma.$ClassPayload<ExtArgs>
      subjects: Prisma.$ExamSubjectPayload<ExtArgs>[]
      results: Prisma.$ResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      date: Date
      classId: number
    }, ExtArgs["result"]["exam"]>
    composites: {}
  }

  type ExamGetPayload<S extends boolean | null | undefined | ExamDefaultArgs> = $Result.GetResult<Prisma.$ExamPayload, S>

  type ExamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExamCountAggregateInputType | true
    }

  export interface ExamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exam'], meta: { name: 'Exam' } }
    /**
     * Find zero or one Exam that matches the filter.
     * @param {ExamFindUniqueArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExamFindUniqueArgs>(args: SelectSubset<T, ExamFindUniqueArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Exam that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExamFindUniqueOrThrowArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExamFindUniqueOrThrowArgs>(args: SelectSubset<T, ExamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exam that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamFindFirstArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExamFindFirstArgs>(args?: SelectSubset<T, ExamFindFirstArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exam that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamFindFirstOrThrowArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExamFindFirstOrThrowArgs>(args?: SelectSubset<T, ExamFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Exams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exams
     * const exams = await prisma.exam.findMany()
     * 
     * // Get first 10 Exams
     * const exams = await prisma.exam.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const examWithIdOnly = await prisma.exam.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExamFindManyArgs>(args?: SelectSubset<T, ExamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Exam.
     * @param {ExamCreateArgs} args - Arguments to create a Exam.
     * @example
     * // Create one Exam
     * const Exam = await prisma.exam.create({
     *   data: {
     *     // ... data to create a Exam
     *   }
     * })
     * 
     */
    create<T extends ExamCreateArgs>(args: SelectSubset<T, ExamCreateArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Exams.
     * @param {ExamCreateManyArgs} args - Arguments to create many Exams.
     * @example
     * // Create many Exams
     * const exam = await prisma.exam.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExamCreateManyArgs>(args?: SelectSubset<T, ExamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Exams and returns the data saved in the database.
     * @param {ExamCreateManyAndReturnArgs} args - Arguments to create many Exams.
     * @example
     * // Create many Exams
     * const exam = await prisma.exam.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Exams and only return the `id`
     * const examWithIdOnly = await prisma.exam.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExamCreateManyAndReturnArgs>(args?: SelectSubset<T, ExamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Exam.
     * @param {ExamDeleteArgs} args - Arguments to delete one Exam.
     * @example
     * // Delete one Exam
     * const Exam = await prisma.exam.delete({
     *   where: {
     *     // ... filter to delete one Exam
     *   }
     * })
     * 
     */
    delete<T extends ExamDeleteArgs>(args: SelectSubset<T, ExamDeleteArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Exam.
     * @param {ExamUpdateArgs} args - Arguments to update one Exam.
     * @example
     * // Update one Exam
     * const exam = await prisma.exam.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExamUpdateArgs>(args: SelectSubset<T, ExamUpdateArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Exams.
     * @param {ExamDeleteManyArgs} args - Arguments to filter Exams to delete.
     * @example
     * // Delete a few Exams
     * const { count } = await prisma.exam.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExamDeleteManyArgs>(args?: SelectSubset<T, ExamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exams
     * const exam = await prisma.exam.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExamUpdateManyArgs>(args: SelectSubset<T, ExamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exams and returns the data updated in the database.
     * @param {ExamUpdateManyAndReturnArgs} args - Arguments to update many Exams.
     * @example
     * // Update many Exams
     * const exam = await prisma.exam.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Exams and only return the `id`
     * const examWithIdOnly = await prisma.exam.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExamUpdateManyAndReturnArgs>(args: SelectSubset<T, ExamUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Exam.
     * @param {ExamUpsertArgs} args - Arguments to update or create a Exam.
     * @example
     * // Update or create a Exam
     * const exam = await prisma.exam.upsert({
     *   create: {
     *     // ... data to create a Exam
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exam we want to update
     *   }
     * })
     */
    upsert<T extends ExamUpsertArgs>(args: SelectSubset<T, ExamUpsertArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamCountArgs} args - Arguments to filter Exams to count.
     * @example
     * // Count the number of Exams
     * const count = await prisma.exam.count({
     *   where: {
     *     // ... the filter for the Exams we want to count
     *   }
     * })
    **/
    count<T extends ExamCountArgs>(
      args?: Subset<T, ExamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExamAggregateArgs>(args: Subset<T, ExamAggregateArgs>): Prisma.PrismaPromise<GetExamAggregateType<T>>

    /**
     * Group by Exam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExamGroupByArgs['orderBy'] }
        : { orderBy?: ExamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exam model
   */
  readonly fields: ExamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exam.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subjects<T extends Exam$subjectsArgs<ExtArgs> = {}>(args?: Subset<T, Exam$subjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    results<T extends Exam$resultsArgs<ExtArgs> = {}>(args?: Subset<T, Exam$resultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Exam model
   */
  interface ExamFieldRefs {
    readonly id: FieldRef<"Exam", 'Int'>
    readonly title: FieldRef<"Exam", 'String'>
    readonly date: FieldRef<"Exam", 'DateTime'>
    readonly classId: FieldRef<"Exam", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Exam findUnique
   */
  export type ExamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * Filter, which Exam to fetch.
     */
    where: ExamWhereUniqueInput
  }

  /**
   * Exam findUniqueOrThrow
   */
  export type ExamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * Filter, which Exam to fetch.
     */
    where: ExamWhereUniqueInput
  }

  /**
   * Exam findFirst
   */
  export type ExamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * Filter, which Exam to fetch.
     */
    where?: ExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     */
    orderBy?: ExamOrderByWithRelationInput | ExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exams.
     */
    cursor?: ExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exams.
     */
    distinct?: ExamScalarFieldEnum | ExamScalarFieldEnum[]
  }

  /**
   * Exam findFirstOrThrow
   */
  export type ExamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * Filter, which Exam to fetch.
     */
    where?: ExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     */
    orderBy?: ExamOrderByWithRelationInput | ExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exams.
     */
    cursor?: ExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exams.
     */
    distinct?: ExamScalarFieldEnum | ExamScalarFieldEnum[]
  }

  /**
   * Exam findMany
   */
  export type ExamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * Filter, which Exams to fetch.
     */
    where?: ExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     */
    orderBy?: ExamOrderByWithRelationInput | ExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exams.
     */
    cursor?: ExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     */
    skip?: number
    distinct?: ExamScalarFieldEnum | ExamScalarFieldEnum[]
  }

  /**
   * Exam create
   */
  export type ExamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * The data needed to create a Exam.
     */
    data: XOR<ExamCreateInput, ExamUncheckedCreateInput>
  }

  /**
   * Exam createMany
   */
  export type ExamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exams.
     */
    data: ExamCreateManyInput | ExamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exam createManyAndReturn
   */
  export type ExamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * The data used to create many Exams.
     */
    data: ExamCreateManyInput | ExamCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Exam update
   */
  export type ExamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * The data needed to update a Exam.
     */
    data: XOR<ExamUpdateInput, ExamUncheckedUpdateInput>
    /**
     * Choose, which Exam to update.
     */
    where: ExamWhereUniqueInput
  }

  /**
   * Exam updateMany
   */
  export type ExamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exams.
     */
    data: XOR<ExamUpdateManyMutationInput, ExamUncheckedUpdateManyInput>
    /**
     * Filter which Exams to update
     */
    where?: ExamWhereInput
    /**
     * Limit how many Exams to update.
     */
    limit?: number
  }

  /**
   * Exam updateManyAndReturn
   */
  export type ExamUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * The data used to update Exams.
     */
    data: XOR<ExamUpdateManyMutationInput, ExamUncheckedUpdateManyInput>
    /**
     * Filter which Exams to update
     */
    where?: ExamWhereInput
    /**
     * Limit how many Exams to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Exam upsert
   */
  export type ExamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * The filter to search for the Exam to update in case it exists.
     */
    where: ExamWhereUniqueInput
    /**
     * In case the Exam found by the `where` argument doesn't exist, create a new Exam with this data.
     */
    create: XOR<ExamCreateInput, ExamUncheckedCreateInput>
    /**
     * In case the Exam was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExamUpdateInput, ExamUncheckedUpdateInput>
  }

  /**
   * Exam delete
   */
  export type ExamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * Filter which Exam to delete.
     */
    where: ExamWhereUniqueInput
  }

  /**
   * Exam deleteMany
   */
  export type ExamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exams to delete
     */
    where?: ExamWhereInput
    /**
     * Limit how many Exams to delete.
     */
    limit?: number
  }

  /**
   * Exam.subjects
   */
  export type Exam$subjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubject
     */
    select?: ExamSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubject
     */
    omit?: ExamSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubjectInclude<ExtArgs> | null
    where?: ExamSubjectWhereInput
    orderBy?: ExamSubjectOrderByWithRelationInput | ExamSubjectOrderByWithRelationInput[]
    cursor?: ExamSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExamSubjectScalarFieldEnum | ExamSubjectScalarFieldEnum[]
  }

  /**
   * Exam.results
   */
  export type Exam$resultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    where?: ResultWhereInput
    orderBy?: ResultOrderByWithRelationInput | ResultOrderByWithRelationInput[]
    cursor?: ResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResultScalarFieldEnum | ResultScalarFieldEnum[]
  }

  /**
   * Exam without action
   */
  export type ExamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
  }


  /**
   * Model ExamSubject
   */

  export type AggregateExamSubject = {
    _count: ExamSubjectCountAggregateOutputType | null
    _avg: ExamSubjectAvgAggregateOutputType | null
    _sum: ExamSubjectSumAggregateOutputType | null
    _min: ExamSubjectMinAggregateOutputType | null
    _max: ExamSubjectMaxAggregateOutputType | null
  }

  export type ExamSubjectAvgAggregateOutputType = {
    id: number | null
    examId: number | null
    subjectId: number | null
    maxMarks: number | null
  }

  export type ExamSubjectSumAggregateOutputType = {
    id: number | null
    examId: number | null
    subjectId: number | null
    maxMarks: number | null
  }

  export type ExamSubjectMinAggregateOutputType = {
    id: number | null
    examId: number | null
    subjectId: number | null
    maxMarks: number | null
  }

  export type ExamSubjectMaxAggregateOutputType = {
    id: number | null
    examId: number | null
    subjectId: number | null
    maxMarks: number | null
  }

  export type ExamSubjectCountAggregateOutputType = {
    id: number
    examId: number
    subjectId: number
    maxMarks: number
    _all: number
  }


  export type ExamSubjectAvgAggregateInputType = {
    id?: true
    examId?: true
    subjectId?: true
    maxMarks?: true
  }

  export type ExamSubjectSumAggregateInputType = {
    id?: true
    examId?: true
    subjectId?: true
    maxMarks?: true
  }

  export type ExamSubjectMinAggregateInputType = {
    id?: true
    examId?: true
    subjectId?: true
    maxMarks?: true
  }

  export type ExamSubjectMaxAggregateInputType = {
    id?: true
    examId?: true
    subjectId?: true
    maxMarks?: true
  }

  export type ExamSubjectCountAggregateInputType = {
    id?: true
    examId?: true
    subjectId?: true
    maxMarks?: true
    _all?: true
  }

  export type ExamSubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExamSubject to aggregate.
     */
    where?: ExamSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamSubjects to fetch.
     */
    orderBy?: ExamSubjectOrderByWithRelationInput | ExamSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExamSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExamSubjects
    **/
    _count?: true | ExamSubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExamSubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExamSubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExamSubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExamSubjectMaxAggregateInputType
  }

  export type GetExamSubjectAggregateType<T extends ExamSubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateExamSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExamSubject[P]>
      : GetScalarType<T[P], AggregateExamSubject[P]>
  }




  export type ExamSubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamSubjectWhereInput
    orderBy?: ExamSubjectOrderByWithAggregationInput | ExamSubjectOrderByWithAggregationInput[]
    by: ExamSubjectScalarFieldEnum[] | ExamSubjectScalarFieldEnum
    having?: ExamSubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExamSubjectCountAggregateInputType | true
    _avg?: ExamSubjectAvgAggregateInputType
    _sum?: ExamSubjectSumAggregateInputType
    _min?: ExamSubjectMinAggregateInputType
    _max?: ExamSubjectMaxAggregateInputType
  }

  export type ExamSubjectGroupByOutputType = {
    id: number
    examId: number
    subjectId: number
    maxMarks: number
    _count: ExamSubjectCountAggregateOutputType | null
    _avg: ExamSubjectAvgAggregateOutputType | null
    _sum: ExamSubjectSumAggregateOutputType | null
    _min: ExamSubjectMinAggregateOutputType | null
    _max: ExamSubjectMaxAggregateOutputType | null
  }

  type GetExamSubjectGroupByPayload<T extends ExamSubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExamSubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExamSubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExamSubjectGroupByOutputType[P]>
            : GetScalarType<T[P], ExamSubjectGroupByOutputType[P]>
        }
      >
    >


  export type ExamSubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    examId?: boolean
    subjectId?: boolean
    maxMarks?: boolean
    Exam?: boolean | ExamDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["examSubject"]>

  export type ExamSubjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    examId?: boolean
    subjectId?: boolean
    maxMarks?: boolean
    Exam?: boolean | ExamDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["examSubject"]>

  export type ExamSubjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    examId?: boolean
    subjectId?: boolean
    maxMarks?: boolean
    Exam?: boolean | ExamDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["examSubject"]>

  export type ExamSubjectSelectScalar = {
    id?: boolean
    examId?: boolean
    subjectId?: boolean
    maxMarks?: boolean
  }

  export type ExamSubjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "examId" | "subjectId" | "maxMarks", ExtArgs["result"]["examSubject"]>
  export type ExamSubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Exam?: boolean | ExamDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }
  export type ExamSubjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Exam?: boolean | ExamDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }
  export type ExamSubjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Exam?: boolean | ExamDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }

  export type $ExamSubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExamSubject"
    objects: {
      Exam: Prisma.$ExamPayload<ExtArgs>
      Subject: Prisma.$SubjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      examId: number
      subjectId: number
      maxMarks: number
    }, ExtArgs["result"]["examSubject"]>
    composites: {}
  }

  type ExamSubjectGetPayload<S extends boolean | null | undefined | ExamSubjectDefaultArgs> = $Result.GetResult<Prisma.$ExamSubjectPayload, S>

  type ExamSubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExamSubjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExamSubjectCountAggregateInputType | true
    }

  export interface ExamSubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExamSubject'], meta: { name: 'ExamSubject' } }
    /**
     * Find zero or one ExamSubject that matches the filter.
     * @param {ExamSubjectFindUniqueArgs} args - Arguments to find a ExamSubject
     * @example
     * // Get one ExamSubject
     * const examSubject = await prisma.examSubject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExamSubjectFindUniqueArgs>(args: SelectSubset<T, ExamSubjectFindUniqueArgs<ExtArgs>>): Prisma__ExamSubjectClient<$Result.GetResult<Prisma.$ExamSubjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ExamSubject that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExamSubjectFindUniqueOrThrowArgs} args - Arguments to find a ExamSubject
     * @example
     * // Get one ExamSubject
     * const examSubject = await prisma.examSubject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExamSubjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ExamSubjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExamSubjectClient<$Result.GetResult<Prisma.$ExamSubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExamSubject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamSubjectFindFirstArgs} args - Arguments to find a ExamSubject
     * @example
     * // Get one ExamSubject
     * const examSubject = await prisma.examSubject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExamSubjectFindFirstArgs>(args?: SelectSubset<T, ExamSubjectFindFirstArgs<ExtArgs>>): Prisma__ExamSubjectClient<$Result.GetResult<Prisma.$ExamSubjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExamSubject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamSubjectFindFirstOrThrowArgs} args - Arguments to find a ExamSubject
     * @example
     * // Get one ExamSubject
     * const examSubject = await prisma.examSubject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExamSubjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ExamSubjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExamSubjectClient<$Result.GetResult<Prisma.$ExamSubjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ExamSubjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamSubjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExamSubjects
     * const examSubjects = await prisma.examSubject.findMany()
     * 
     * // Get first 10 ExamSubjects
     * const examSubjects = await prisma.examSubject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const examSubjectWithIdOnly = await prisma.examSubject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExamSubjectFindManyArgs>(args?: SelectSubset<T, ExamSubjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ExamSubject.
     * @param {ExamSubjectCreateArgs} args - Arguments to create a ExamSubject.
     * @example
     * // Create one ExamSubject
     * const ExamSubject = await prisma.examSubject.create({
     *   data: {
     *     // ... data to create a ExamSubject
     *   }
     * })
     * 
     */
    create<T extends ExamSubjectCreateArgs>(args: SelectSubset<T, ExamSubjectCreateArgs<ExtArgs>>): Prisma__ExamSubjectClient<$Result.GetResult<Prisma.$ExamSubjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ExamSubjects.
     * @param {ExamSubjectCreateManyArgs} args - Arguments to create many ExamSubjects.
     * @example
     * // Create many ExamSubjects
     * const examSubject = await prisma.examSubject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExamSubjectCreateManyArgs>(args?: SelectSubset<T, ExamSubjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExamSubjects and returns the data saved in the database.
     * @param {ExamSubjectCreateManyAndReturnArgs} args - Arguments to create many ExamSubjects.
     * @example
     * // Create many ExamSubjects
     * const examSubject = await prisma.examSubject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExamSubjects and only return the `id`
     * const examSubjectWithIdOnly = await prisma.examSubject.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExamSubjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ExamSubjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamSubjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ExamSubject.
     * @param {ExamSubjectDeleteArgs} args - Arguments to delete one ExamSubject.
     * @example
     * // Delete one ExamSubject
     * const ExamSubject = await prisma.examSubject.delete({
     *   where: {
     *     // ... filter to delete one ExamSubject
     *   }
     * })
     * 
     */
    delete<T extends ExamSubjectDeleteArgs>(args: SelectSubset<T, ExamSubjectDeleteArgs<ExtArgs>>): Prisma__ExamSubjectClient<$Result.GetResult<Prisma.$ExamSubjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ExamSubject.
     * @param {ExamSubjectUpdateArgs} args - Arguments to update one ExamSubject.
     * @example
     * // Update one ExamSubject
     * const examSubject = await prisma.examSubject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExamSubjectUpdateArgs>(args: SelectSubset<T, ExamSubjectUpdateArgs<ExtArgs>>): Prisma__ExamSubjectClient<$Result.GetResult<Prisma.$ExamSubjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ExamSubjects.
     * @param {ExamSubjectDeleteManyArgs} args - Arguments to filter ExamSubjects to delete.
     * @example
     * // Delete a few ExamSubjects
     * const { count } = await prisma.examSubject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExamSubjectDeleteManyArgs>(args?: SelectSubset<T, ExamSubjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExamSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamSubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExamSubjects
     * const examSubject = await prisma.examSubject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExamSubjectUpdateManyArgs>(args: SelectSubset<T, ExamSubjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExamSubjects and returns the data updated in the database.
     * @param {ExamSubjectUpdateManyAndReturnArgs} args - Arguments to update many ExamSubjects.
     * @example
     * // Update many ExamSubjects
     * const examSubject = await prisma.examSubject.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ExamSubjects and only return the `id`
     * const examSubjectWithIdOnly = await prisma.examSubject.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExamSubjectUpdateManyAndReturnArgs>(args: SelectSubset<T, ExamSubjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamSubjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ExamSubject.
     * @param {ExamSubjectUpsertArgs} args - Arguments to update or create a ExamSubject.
     * @example
     * // Update or create a ExamSubject
     * const examSubject = await prisma.examSubject.upsert({
     *   create: {
     *     // ... data to create a ExamSubject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExamSubject we want to update
     *   }
     * })
     */
    upsert<T extends ExamSubjectUpsertArgs>(args: SelectSubset<T, ExamSubjectUpsertArgs<ExtArgs>>): Prisma__ExamSubjectClient<$Result.GetResult<Prisma.$ExamSubjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ExamSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamSubjectCountArgs} args - Arguments to filter ExamSubjects to count.
     * @example
     * // Count the number of ExamSubjects
     * const count = await prisma.examSubject.count({
     *   where: {
     *     // ... the filter for the ExamSubjects we want to count
     *   }
     * })
    **/
    count<T extends ExamSubjectCountArgs>(
      args?: Subset<T, ExamSubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExamSubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExamSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamSubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExamSubjectAggregateArgs>(args: Subset<T, ExamSubjectAggregateArgs>): Prisma.PrismaPromise<GetExamSubjectAggregateType<T>>

    /**
     * Group by ExamSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamSubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExamSubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExamSubjectGroupByArgs['orderBy'] }
        : { orderBy?: ExamSubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExamSubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExamSubject model
   */
  readonly fields: ExamSubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExamSubject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExamSubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Exam<T extends ExamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExamDefaultArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExamSubject model
   */
  interface ExamSubjectFieldRefs {
    readonly id: FieldRef<"ExamSubject", 'Int'>
    readonly examId: FieldRef<"ExamSubject", 'Int'>
    readonly subjectId: FieldRef<"ExamSubject", 'Int'>
    readonly maxMarks: FieldRef<"ExamSubject", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ExamSubject findUnique
   */
  export type ExamSubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubject
     */
    select?: ExamSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubject
     */
    omit?: ExamSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubjectInclude<ExtArgs> | null
    /**
     * Filter, which ExamSubject to fetch.
     */
    where: ExamSubjectWhereUniqueInput
  }

  /**
   * ExamSubject findUniqueOrThrow
   */
  export type ExamSubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubject
     */
    select?: ExamSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubject
     */
    omit?: ExamSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubjectInclude<ExtArgs> | null
    /**
     * Filter, which ExamSubject to fetch.
     */
    where: ExamSubjectWhereUniqueInput
  }

  /**
   * ExamSubject findFirst
   */
  export type ExamSubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubject
     */
    select?: ExamSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubject
     */
    omit?: ExamSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubjectInclude<ExtArgs> | null
    /**
     * Filter, which ExamSubject to fetch.
     */
    where?: ExamSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamSubjects to fetch.
     */
    orderBy?: ExamSubjectOrderByWithRelationInput | ExamSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExamSubjects.
     */
    cursor?: ExamSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExamSubjects.
     */
    distinct?: ExamSubjectScalarFieldEnum | ExamSubjectScalarFieldEnum[]
  }

  /**
   * ExamSubject findFirstOrThrow
   */
  export type ExamSubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubject
     */
    select?: ExamSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubject
     */
    omit?: ExamSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubjectInclude<ExtArgs> | null
    /**
     * Filter, which ExamSubject to fetch.
     */
    where?: ExamSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamSubjects to fetch.
     */
    orderBy?: ExamSubjectOrderByWithRelationInput | ExamSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExamSubjects.
     */
    cursor?: ExamSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExamSubjects.
     */
    distinct?: ExamSubjectScalarFieldEnum | ExamSubjectScalarFieldEnum[]
  }

  /**
   * ExamSubject findMany
   */
  export type ExamSubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubject
     */
    select?: ExamSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubject
     */
    omit?: ExamSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubjectInclude<ExtArgs> | null
    /**
     * Filter, which ExamSubjects to fetch.
     */
    where?: ExamSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamSubjects to fetch.
     */
    orderBy?: ExamSubjectOrderByWithRelationInput | ExamSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExamSubjects.
     */
    cursor?: ExamSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamSubjects.
     */
    skip?: number
    distinct?: ExamSubjectScalarFieldEnum | ExamSubjectScalarFieldEnum[]
  }

  /**
   * ExamSubject create
   */
  export type ExamSubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubject
     */
    select?: ExamSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubject
     */
    omit?: ExamSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a ExamSubject.
     */
    data: XOR<ExamSubjectCreateInput, ExamSubjectUncheckedCreateInput>
  }

  /**
   * ExamSubject createMany
   */
  export type ExamSubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExamSubjects.
     */
    data: ExamSubjectCreateManyInput | ExamSubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExamSubject createManyAndReturn
   */
  export type ExamSubjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubject
     */
    select?: ExamSubjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubject
     */
    omit?: ExamSubjectOmit<ExtArgs> | null
    /**
     * The data used to create many ExamSubjects.
     */
    data: ExamSubjectCreateManyInput | ExamSubjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExamSubject update
   */
  export type ExamSubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubject
     */
    select?: ExamSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubject
     */
    omit?: ExamSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a ExamSubject.
     */
    data: XOR<ExamSubjectUpdateInput, ExamSubjectUncheckedUpdateInput>
    /**
     * Choose, which ExamSubject to update.
     */
    where: ExamSubjectWhereUniqueInput
  }

  /**
   * ExamSubject updateMany
   */
  export type ExamSubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExamSubjects.
     */
    data: XOR<ExamSubjectUpdateManyMutationInput, ExamSubjectUncheckedUpdateManyInput>
    /**
     * Filter which ExamSubjects to update
     */
    where?: ExamSubjectWhereInput
    /**
     * Limit how many ExamSubjects to update.
     */
    limit?: number
  }

  /**
   * ExamSubject updateManyAndReturn
   */
  export type ExamSubjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubject
     */
    select?: ExamSubjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubject
     */
    omit?: ExamSubjectOmit<ExtArgs> | null
    /**
     * The data used to update ExamSubjects.
     */
    data: XOR<ExamSubjectUpdateManyMutationInput, ExamSubjectUncheckedUpdateManyInput>
    /**
     * Filter which ExamSubjects to update
     */
    where?: ExamSubjectWhereInput
    /**
     * Limit how many ExamSubjects to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubjectIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExamSubject upsert
   */
  export type ExamSubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubject
     */
    select?: ExamSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubject
     */
    omit?: ExamSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the ExamSubject to update in case it exists.
     */
    where: ExamSubjectWhereUniqueInput
    /**
     * In case the ExamSubject found by the `where` argument doesn't exist, create a new ExamSubject with this data.
     */
    create: XOR<ExamSubjectCreateInput, ExamSubjectUncheckedCreateInput>
    /**
     * In case the ExamSubject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExamSubjectUpdateInput, ExamSubjectUncheckedUpdateInput>
  }

  /**
   * ExamSubject delete
   */
  export type ExamSubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubject
     */
    select?: ExamSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubject
     */
    omit?: ExamSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubjectInclude<ExtArgs> | null
    /**
     * Filter which ExamSubject to delete.
     */
    where: ExamSubjectWhereUniqueInput
  }

  /**
   * ExamSubject deleteMany
   */
  export type ExamSubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExamSubjects to delete
     */
    where?: ExamSubjectWhereInput
    /**
     * Limit how many ExamSubjects to delete.
     */
    limit?: number
  }

  /**
   * ExamSubject without action
   */
  export type ExamSubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubject
     */
    select?: ExamSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubject
     */
    omit?: ExamSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubjectInclude<ExtArgs> | null
  }


  /**
   * Model Homework
   */

  export type AggregateHomework = {
    _count: HomeworkCountAggregateOutputType | null
    _avg: HomeworkAvgAggregateOutputType | null
    _sum: HomeworkSumAggregateOutputType | null
    _min: HomeworkMinAggregateOutputType | null
    _max: HomeworkMaxAggregateOutputType | null
  }

  export type HomeworkAvgAggregateOutputType = {
    id: number | null
    classId: number | null
    gradeId: number | null
  }

  export type HomeworkSumAggregateOutputType = {
    id: number | null
    classId: number | null
    gradeId: number | null
  }

  export type HomeworkMinAggregateOutputType = {
    id: number | null
    description: string | null
    date: Date | null
    classId: number | null
    gradeId: number | null
  }

  export type HomeworkMaxAggregateOutputType = {
    id: number | null
    description: string | null
    date: Date | null
    classId: number | null
    gradeId: number | null
  }

  export type HomeworkCountAggregateOutputType = {
    id: number
    description: number
    date: number
    classId: number
    gradeId: number
    _all: number
  }


  export type HomeworkAvgAggregateInputType = {
    id?: true
    classId?: true
    gradeId?: true
  }

  export type HomeworkSumAggregateInputType = {
    id?: true
    classId?: true
    gradeId?: true
  }

  export type HomeworkMinAggregateInputType = {
    id?: true
    description?: true
    date?: true
    classId?: true
    gradeId?: true
  }

  export type HomeworkMaxAggregateInputType = {
    id?: true
    description?: true
    date?: true
    classId?: true
    gradeId?: true
  }

  export type HomeworkCountAggregateInputType = {
    id?: true
    description?: true
    date?: true
    classId?: true
    gradeId?: true
    _all?: true
  }

  export type HomeworkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Homework to aggregate.
     */
    where?: HomeworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Homework to fetch.
     */
    orderBy?: HomeworkOrderByWithRelationInput | HomeworkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HomeworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Homework from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Homework.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Homework
    **/
    _count?: true | HomeworkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HomeworkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HomeworkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HomeworkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HomeworkMaxAggregateInputType
  }

  export type GetHomeworkAggregateType<T extends HomeworkAggregateArgs> = {
        [P in keyof T & keyof AggregateHomework]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHomework[P]>
      : GetScalarType<T[P], AggregateHomework[P]>
  }




  export type HomeworkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HomeworkWhereInput
    orderBy?: HomeworkOrderByWithAggregationInput | HomeworkOrderByWithAggregationInput[]
    by: HomeworkScalarFieldEnum[] | HomeworkScalarFieldEnum
    having?: HomeworkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HomeworkCountAggregateInputType | true
    _avg?: HomeworkAvgAggregateInputType
    _sum?: HomeworkSumAggregateInputType
    _min?: HomeworkMinAggregateInputType
    _max?: HomeworkMaxAggregateInputType
  }

  export type HomeworkGroupByOutputType = {
    id: number
    description: string
    date: Date
    classId: number
    gradeId: number
    _count: HomeworkCountAggregateOutputType | null
    _avg: HomeworkAvgAggregateOutputType | null
    _sum: HomeworkSumAggregateOutputType | null
    _min: HomeworkMinAggregateOutputType | null
    _max: HomeworkMaxAggregateOutputType | null
  }

  type GetHomeworkGroupByPayload<T extends HomeworkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HomeworkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HomeworkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HomeworkGroupByOutputType[P]>
            : GetScalarType<T[P], HomeworkGroupByOutputType[P]>
        }
      >
    >


  export type HomeworkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    date?: boolean
    classId?: boolean
    gradeId?: boolean
    Class?: boolean | ClassDefaultArgs<ExtArgs>
    Grade?: boolean | GradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["homework"]>

  export type HomeworkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    date?: boolean
    classId?: boolean
    gradeId?: boolean
    Class?: boolean | ClassDefaultArgs<ExtArgs>
    Grade?: boolean | GradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["homework"]>

  export type HomeworkSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    date?: boolean
    classId?: boolean
    gradeId?: boolean
    Class?: boolean | ClassDefaultArgs<ExtArgs>
    Grade?: boolean | GradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["homework"]>

  export type HomeworkSelectScalar = {
    id?: boolean
    description?: boolean
    date?: boolean
    classId?: boolean
    gradeId?: boolean
  }

  export type HomeworkOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "description" | "date" | "classId" | "gradeId", ExtArgs["result"]["homework"]>
  export type HomeworkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Class?: boolean | ClassDefaultArgs<ExtArgs>
    Grade?: boolean | GradeDefaultArgs<ExtArgs>
  }
  export type HomeworkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Class?: boolean | ClassDefaultArgs<ExtArgs>
    Grade?: boolean | GradeDefaultArgs<ExtArgs>
  }
  export type HomeworkIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Class?: boolean | ClassDefaultArgs<ExtArgs>
    Grade?: boolean | GradeDefaultArgs<ExtArgs>
  }

  export type $HomeworkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Homework"
    objects: {
      Class: Prisma.$ClassPayload<ExtArgs>
      Grade: Prisma.$GradePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      description: string
      date: Date
      classId: number
      gradeId: number
    }, ExtArgs["result"]["homework"]>
    composites: {}
  }

  type HomeworkGetPayload<S extends boolean | null | undefined | HomeworkDefaultArgs> = $Result.GetResult<Prisma.$HomeworkPayload, S>

  type HomeworkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HomeworkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HomeworkCountAggregateInputType | true
    }

  export interface HomeworkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Homework'], meta: { name: 'Homework' } }
    /**
     * Find zero or one Homework that matches the filter.
     * @param {HomeworkFindUniqueArgs} args - Arguments to find a Homework
     * @example
     * // Get one Homework
     * const homework = await prisma.homework.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HomeworkFindUniqueArgs>(args: SelectSubset<T, HomeworkFindUniqueArgs<ExtArgs>>): Prisma__HomeworkClient<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Homework that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HomeworkFindUniqueOrThrowArgs} args - Arguments to find a Homework
     * @example
     * // Get one Homework
     * const homework = await prisma.homework.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HomeworkFindUniqueOrThrowArgs>(args: SelectSubset<T, HomeworkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HomeworkClient<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Homework that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkFindFirstArgs} args - Arguments to find a Homework
     * @example
     * // Get one Homework
     * const homework = await prisma.homework.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HomeworkFindFirstArgs>(args?: SelectSubset<T, HomeworkFindFirstArgs<ExtArgs>>): Prisma__HomeworkClient<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Homework that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkFindFirstOrThrowArgs} args - Arguments to find a Homework
     * @example
     * // Get one Homework
     * const homework = await prisma.homework.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HomeworkFindFirstOrThrowArgs>(args?: SelectSubset<T, HomeworkFindFirstOrThrowArgs<ExtArgs>>): Prisma__HomeworkClient<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Homework that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Homework
     * const homework = await prisma.homework.findMany()
     * 
     * // Get first 10 Homework
     * const homework = await prisma.homework.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const homeworkWithIdOnly = await prisma.homework.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HomeworkFindManyArgs>(args?: SelectSubset<T, HomeworkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Homework.
     * @param {HomeworkCreateArgs} args - Arguments to create a Homework.
     * @example
     * // Create one Homework
     * const Homework = await prisma.homework.create({
     *   data: {
     *     // ... data to create a Homework
     *   }
     * })
     * 
     */
    create<T extends HomeworkCreateArgs>(args: SelectSubset<T, HomeworkCreateArgs<ExtArgs>>): Prisma__HomeworkClient<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Homework.
     * @param {HomeworkCreateManyArgs} args - Arguments to create many Homework.
     * @example
     * // Create many Homework
     * const homework = await prisma.homework.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HomeworkCreateManyArgs>(args?: SelectSubset<T, HomeworkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Homework and returns the data saved in the database.
     * @param {HomeworkCreateManyAndReturnArgs} args - Arguments to create many Homework.
     * @example
     * // Create many Homework
     * const homework = await prisma.homework.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Homework and only return the `id`
     * const homeworkWithIdOnly = await prisma.homework.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HomeworkCreateManyAndReturnArgs>(args?: SelectSubset<T, HomeworkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Homework.
     * @param {HomeworkDeleteArgs} args - Arguments to delete one Homework.
     * @example
     * // Delete one Homework
     * const Homework = await prisma.homework.delete({
     *   where: {
     *     // ... filter to delete one Homework
     *   }
     * })
     * 
     */
    delete<T extends HomeworkDeleteArgs>(args: SelectSubset<T, HomeworkDeleteArgs<ExtArgs>>): Prisma__HomeworkClient<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Homework.
     * @param {HomeworkUpdateArgs} args - Arguments to update one Homework.
     * @example
     * // Update one Homework
     * const homework = await prisma.homework.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HomeworkUpdateArgs>(args: SelectSubset<T, HomeworkUpdateArgs<ExtArgs>>): Prisma__HomeworkClient<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Homework.
     * @param {HomeworkDeleteManyArgs} args - Arguments to filter Homework to delete.
     * @example
     * // Delete a few Homework
     * const { count } = await prisma.homework.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HomeworkDeleteManyArgs>(args?: SelectSubset<T, HomeworkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Homework.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Homework
     * const homework = await prisma.homework.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HomeworkUpdateManyArgs>(args: SelectSubset<T, HomeworkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Homework and returns the data updated in the database.
     * @param {HomeworkUpdateManyAndReturnArgs} args - Arguments to update many Homework.
     * @example
     * // Update many Homework
     * const homework = await prisma.homework.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Homework and only return the `id`
     * const homeworkWithIdOnly = await prisma.homework.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HomeworkUpdateManyAndReturnArgs>(args: SelectSubset<T, HomeworkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Homework.
     * @param {HomeworkUpsertArgs} args - Arguments to update or create a Homework.
     * @example
     * // Update or create a Homework
     * const homework = await prisma.homework.upsert({
     *   create: {
     *     // ... data to create a Homework
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Homework we want to update
     *   }
     * })
     */
    upsert<T extends HomeworkUpsertArgs>(args: SelectSubset<T, HomeworkUpsertArgs<ExtArgs>>): Prisma__HomeworkClient<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Homework.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkCountArgs} args - Arguments to filter Homework to count.
     * @example
     * // Count the number of Homework
     * const count = await prisma.homework.count({
     *   where: {
     *     // ... the filter for the Homework we want to count
     *   }
     * })
    **/
    count<T extends HomeworkCountArgs>(
      args?: Subset<T, HomeworkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HomeworkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Homework.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HomeworkAggregateArgs>(args: Subset<T, HomeworkAggregateArgs>): Prisma.PrismaPromise<GetHomeworkAggregateType<T>>

    /**
     * Group by Homework.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HomeworkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HomeworkGroupByArgs['orderBy'] }
        : { orderBy?: HomeworkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HomeworkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHomeworkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Homework model
   */
  readonly fields: HomeworkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Homework.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HomeworkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Grade<T extends GradeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GradeDefaultArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Homework model
   */
  interface HomeworkFieldRefs {
    readonly id: FieldRef<"Homework", 'Int'>
    readonly description: FieldRef<"Homework", 'String'>
    readonly date: FieldRef<"Homework", 'DateTime'>
    readonly classId: FieldRef<"Homework", 'Int'>
    readonly gradeId: FieldRef<"Homework", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Homework findUnique
   */
  export type HomeworkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    /**
     * Filter, which Homework to fetch.
     */
    where: HomeworkWhereUniqueInput
  }

  /**
   * Homework findUniqueOrThrow
   */
  export type HomeworkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    /**
     * Filter, which Homework to fetch.
     */
    where: HomeworkWhereUniqueInput
  }

  /**
   * Homework findFirst
   */
  export type HomeworkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    /**
     * Filter, which Homework to fetch.
     */
    where?: HomeworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Homework to fetch.
     */
    orderBy?: HomeworkOrderByWithRelationInput | HomeworkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Homework.
     */
    cursor?: HomeworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Homework from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Homework.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Homework.
     */
    distinct?: HomeworkScalarFieldEnum | HomeworkScalarFieldEnum[]
  }

  /**
   * Homework findFirstOrThrow
   */
  export type HomeworkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    /**
     * Filter, which Homework to fetch.
     */
    where?: HomeworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Homework to fetch.
     */
    orderBy?: HomeworkOrderByWithRelationInput | HomeworkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Homework.
     */
    cursor?: HomeworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Homework from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Homework.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Homework.
     */
    distinct?: HomeworkScalarFieldEnum | HomeworkScalarFieldEnum[]
  }

  /**
   * Homework findMany
   */
  export type HomeworkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    /**
     * Filter, which Homework to fetch.
     */
    where?: HomeworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Homework to fetch.
     */
    orderBy?: HomeworkOrderByWithRelationInput | HomeworkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Homework.
     */
    cursor?: HomeworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Homework from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Homework.
     */
    skip?: number
    distinct?: HomeworkScalarFieldEnum | HomeworkScalarFieldEnum[]
  }

  /**
   * Homework create
   */
  export type HomeworkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    /**
     * The data needed to create a Homework.
     */
    data: XOR<HomeworkCreateInput, HomeworkUncheckedCreateInput>
  }

  /**
   * Homework createMany
   */
  export type HomeworkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Homework.
     */
    data: HomeworkCreateManyInput | HomeworkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Homework createManyAndReturn
   */
  export type HomeworkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * The data used to create many Homework.
     */
    data: HomeworkCreateManyInput | HomeworkCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Homework update
   */
  export type HomeworkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    /**
     * The data needed to update a Homework.
     */
    data: XOR<HomeworkUpdateInput, HomeworkUncheckedUpdateInput>
    /**
     * Choose, which Homework to update.
     */
    where: HomeworkWhereUniqueInput
  }

  /**
   * Homework updateMany
   */
  export type HomeworkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Homework.
     */
    data: XOR<HomeworkUpdateManyMutationInput, HomeworkUncheckedUpdateManyInput>
    /**
     * Filter which Homework to update
     */
    where?: HomeworkWhereInput
    /**
     * Limit how many Homework to update.
     */
    limit?: number
  }

  /**
   * Homework updateManyAndReturn
   */
  export type HomeworkUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * The data used to update Homework.
     */
    data: XOR<HomeworkUpdateManyMutationInput, HomeworkUncheckedUpdateManyInput>
    /**
     * Filter which Homework to update
     */
    where?: HomeworkWhereInput
    /**
     * Limit how many Homework to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Homework upsert
   */
  export type HomeworkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    /**
     * The filter to search for the Homework to update in case it exists.
     */
    where: HomeworkWhereUniqueInput
    /**
     * In case the Homework found by the `where` argument doesn't exist, create a new Homework with this data.
     */
    create: XOR<HomeworkCreateInput, HomeworkUncheckedCreateInput>
    /**
     * In case the Homework was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HomeworkUpdateInput, HomeworkUncheckedUpdateInput>
  }

  /**
   * Homework delete
   */
  export type HomeworkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    /**
     * Filter which Homework to delete.
     */
    where: HomeworkWhereUniqueInput
  }

  /**
   * Homework deleteMany
   */
  export type HomeworkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Homework to delete
     */
    where?: HomeworkWhereInput
    /**
     * Limit how many Homework to delete.
     */
    limit?: number
  }

  /**
   * Homework without action
   */
  export type HomeworkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
  }


  /**
   * Model Result
   */

  export type AggregateResult = {
    _count: ResultCountAggregateOutputType | null
    _avg: ResultAvgAggregateOutputType | null
    _sum: ResultSumAggregateOutputType | null
    _min: ResultMinAggregateOutputType | null
    _max: ResultMaxAggregateOutputType | null
  }

  export type ResultAvgAggregateOutputType = {
    id: number | null
    score: number | null
    examId: number | null
    subjectId: number | null
  }

  export type ResultSumAggregateOutputType = {
    id: number | null
    score: number | null
    examId: number | null
    subjectId: number | null
  }

  export type ResultMinAggregateOutputType = {
    id: number | null
    score: number | null
    studentId: string | null
    examId: number | null
    subjectId: number | null
  }

  export type ResultMaxAggregateOutputType = {
    id: number | null
    score: number | null
    studentId: string | null
    examId: number | null
    subjectId: number | null
  }

  export type ResultCountAggregateOutputType = {
    id: number
    score: number
    studentId: number
    examId: number
    subjectId: number
    _all: number
  }


  export type ResultAvgAggregateInputType = {
    id?: true
    score?: true
    examId?: true
    subjectId?: true
  }

  export type ResultSumAggregateInputType = {
    id?: true
    score?: true
    examId?: true
    subjectId?: true
  }

  export type ResultMinAggregateInputType = {
    id?: true
    score?: true
    studentId?: true
    examId?: true
    subjectId?: true
  }

  export type ResultMaxAggregateInputType = {
    id?: true
    score?: true
    studentId?: true
    examId?: true
    subjectId?: true
  }

  export type ResultCountAggregateInputType = {
    id?: true
    score?: true
    studentId?: true
    examId?: true
    subjectId?: true
    _all?: true
  }

  export type ResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Result to aggregate.
     */
    where?: ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Results to fetch.
     */
    orderBy?: ResultOrderByWithRelationInput | ResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Results.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Results
    **/
    _count?: true | ResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResultMaxAggregateInputType
  }

  export type GetResultAggregateType<T extends ResultAggregateArgs> = {
        [P in keyof T & keyof AggregateResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResult[P]>
      : GetScalarType<T[P], AggregateResult[P]>
  }




  export type ResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResultWhereInput
    orderBy?: ResultOrderByWithAggregationInput | ResultOrderByWithAggregationInput[]
    by: ResultScalarFieldEnum[] | ResultScalarFieldEnum
    having?: ResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResultCountAggregateInputType | true
    _avg?: ResultAvgAggregateInputType
    _sum?: ResultSumAggregateInputType
    _min?: ResultMinAggregateInputType
    _max?: ResultMaxAggregateInputType
  }

  export type ResultGroupByOutputType = {
    id: number
    score: number
    studentId: string
    examId: number
    subjectId: number
    _count: ResultCountAggregateOutputType | null
    _avg: ResultAvgAggregateOutputType | null
    _sum: ResultSumAggregateOutputType | null
    _min: ResultMinAggregateOutputType | null
    _max: ResultMaxAggregateOutputType | null
  }

  type GetResultGroupByPayload<T extends ResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResultGroupByOutputType[P]>
            : GetScalarType<T[P], ResultGroupByOutputType[P]>
        }
      >
    >


  export type ResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    score?: boolean
    studentId?: boolean
    examId?: boolean
    subjectId?: boolean
    Exam?: boolean | ExamDefaultArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["result"]>

  export type ResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    score?: boolean
    studentId?: boolean
    examId?: boolean
    subjectId?: boolean
    Exam?: boolean | ExamDefaultArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["result"]>

  export type ResultSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    score?: boolean
    studentId?: boolean
    examId?: boolean
    subjectId?: boolean
    Exam?: boolean | ExamDefaultArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["result"]>

  export type ResultSelectScalar = {
    id?: boolean
    score?: boolean
    studentId?: boolean
    examId?: boolean
    subjectId?: boolean
  }

  export type ResultOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "score" | "studentId" | "examId" | "subjectId", ExtArgs["result"]["result"]>
  export type ResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Exam?: boolean | ExamDefaultArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }
  export type ResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Exam?: boolean | ExamDefaultArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }
  export type ResultIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Exam?: boolean | ExamDefaultArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }

  export type $ResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Result"
    objects: {
      Exam: Prisma.$ExamPayload<ExtArgs>
      Student: Prisma.$StudentPayload<ExtArgs>
      Subject: Prisma.$SubjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      score: number
      studentId: string
      examId: number
      subjectId: number
    }, ExtArgs["result"]["result"]>
    composites: {}
  }

  type ResultGetPayload<S extends boolean | null | undefined | ResultDefaultArgs> = $Result.GetResult<Prisma.$ResultPayload, S>

  type ResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResultCountAggregateInputType | true
    }

  export interface ResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Result'], meta: { name: 'Result' } }
    /**
     * Find zero or one Result that matches the filter.
     * @param {ResultFindUniqueArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResultFindUniqueArgs>(args: SelectSubset<T, ResultFindUniqueArgs<ExtArgs>>): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Result that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResultFindUniqueOrThrowArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResultFindUniqueOrThrowArgs>(args: SelectSubset<T, ResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Result that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultFindFirstArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResultFindFirstArgs>(args?: SelectSubset<T, ResultFindFirstArgs<ExtArgs>>): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Result that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultFindFirstOrThrowArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResultFindFirstOrThrowArgs>(args?: SelectSubset<T, ResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Results that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Results
     * const results = await prisma.result.findMany()
     * 
     * // Get first 10 Results
     * const results = await prisma.result.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resultWithIdOnly = await prisma.result.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResultFindManyArgs>(args?: SelectSubset<T, ResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Result.
     * @param {ResultCreateArgs} args - Arguments to create a Result.
     * @example
     * // Create one Result
     * const Result = await prisma.result.create({
     *   data: {
     *     // ... data to create a Result
     *   }
     * })
     * 
     */
    create<T extends ResultCreateArgs>(args: SelectSubset<T, ResultCreateArgs<ExtArgs>>): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Results.
     * @param {ResultCreateManyArgs} args - Arguments to create many Results.
     * @example
     * // Create many Results
     * const result = await prisma.result.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResultCreateManyArgs>(args?: SelectSubset<T, ResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Results and returns the data saved in the database.
     * @param {ResultCreateManyAndReturnArgs} args - Arguments to create many Results.
     * @example
     * // Create many Results
     * const result = await prisma.result.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Results and only return the `id`
     * const resultWithIdOnly = await prisma.result.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResultCreateManyAndReturnArgs>(args?: SelectSubset<T, ResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Result.
     * @param {ResultDeleteArgs} args - Arguments to delete one Result.
     * @example
     * // Delete one Result
     * const Result = await prisma.result.delete({
     *   where: {
     *     // ... filter to delete one Result
     *   }
     * })
     * 
     */
    delete<T extends ResultDeleteArgs>(args: SelectSubset<T, ResultDeleteArgs<ExtArgs>>): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Result.
     * @param {ResultUpdateArgs} args - Arguments to update one Result.
     * @example
     * // Update one Result
     * const result = await prisma.result.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResultUpdateArgs>(args: SelectSubset<T, ResultUpdateArgs<ExtArgs>>): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Results.
     * @param {ResultDeleteManyArgs} args - Arguments to filter Results to delete.
     * @example
     * // Delete a few Results
     * const { count } = await prisma.result.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResultDeleteManyArgs>(args?: SelectSubset<T, ResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Results.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Results
     * const result = await prisma.result.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResultUpdateManyArgs>(args: SelectSubset<T, ResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Results and returns the data updated in the database.
     * @param {ResultUpdateManyAndReturnArgs} args - Arguments to update many Results.
     * @example
     * // Update many Results
     * const result = await prisma.result.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Results and only return the `id`
     * const resultWithIdOnly = await prisma.result.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResultUpdateManyAndReturnArgs>(args: SelectSubset<T, ResultUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Result.
     * @param {ResultUpsertArgs} args - Arguments to update or create a Result.
     * @example
     * // Update or create a Result
     * const result = await prisma.result.upsert({
     *   create: {
     *     // ... data to create a Result
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Result we want to update
     *   }
     * })
     */
    upsert<T extends ResultUpsertArgs>(args: SelectSubset<T, ResultUpsertArgs<ExtArgs>>): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Results.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultCountArgs} args - Arguments to filter Results to count.
     * @example
     * // Count the number of Results
     * const count = await prisma.result.count({
     *   where: {
     *     // ... the filter for the Results we want to count
     *   }
     * })
    **/
    count<T extends ResultCountArgs>(
      args?: Subset<T, ResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Result.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResultAggregateArgs>(args: Subset<T, ResultAggregateArgs>): Prisma.PrismaPromise<GetResultAggregateType<T>>

    /**
     * Group by Result.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResultGroupByArgs['orderBy'] }
        : { orderBy?: ResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Result model
   */
  readonly fields: ResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Result.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Exam<T extends ExamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExamDefaultArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Result model
   */
  interface ResultFieldRefs {
    readonly id: FieldRef<"Result", 'Int'>
    readonly score: FieldRef<"Result", 'Float'>
    readonly studentId: FieldRef<"Result", 'String'>
    readonly examId: FieldRef<"Result", 'Int'>
    readonly subjectId: FieldRef<"Result", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Result findUnique
   */
  export type ResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * Filter, which Result to fetch.
     */
    where: ResultWhereUniqueInput
  }

  /**
   * Result findUniqueOrThrow
   */
  export type ResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * Filter, which Result to fetch.
     */
    where: ResultWhereUniqueInput
  }

  /**
   * Result findFirst
   */
  export type ResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * Filter, which Result to fetch.
     */
    where?: ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Results to fetch.
     */
    orderBy?: ResultOrderByWithRelationInput | ResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Results.
     */
    cursor?: ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Results.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Results.
     */
    distinct?: ResultScalarFieldEnum | ResultScalarFieldEnum[]
  }

  /**
   * Result findFirstOrThrow
   */
  export type ResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * Filter, which Result to fetch.
     */
    where?: ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Results to fetch.
     */
    orderBy?: ResultOrderByWithRelationInput | ResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Results.
     */
    cursor?: ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Results.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Results.
     */
    distinct?: ResultScalarFieldEnum | ResultScalarFieldEnum[]
  }

  /**
   * Result findMany
   */
  export type ResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * Filter, which Results to fetch.
     */
    where?: ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Results to fetch.
     */
    orderBy?: ResultOrderByWithRelationInput | ResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Results.
     */
    cursor?: ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Results.
     */
    skip?: number
    distinct?: ResultScalarFieldEnum | ResultScalarFieldEnum[]
  }

  /**
   * Result create
   */
  export type ResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * The data needed to create a Result.
     */
    data: XOR<ResultCreateInput, ResultUncheckedCreateInput>
  }

  /**
   * Result createMany
   */
  export type ResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Results.
     */
    data: ResultCreateManyInput | ResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Result createManyAndReturn
   */
  export type ResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * The data used to create many Results.
     */
    data: ResultCreateManyInput | ResultCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Result update
   */
  export type ResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * The data needed to update a Result.
     */
    data: XOR<ResultUpdateInput, ResultUncheckedUpdateInput>
    /**
     * Choose, which Result to update.
     */
    where: ResultWhereUniqueInput
  }

  /**
   * Result updateMany
   */
  export type ResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Results.
     */
    data: XOR<ResultUpdateManyMutationInput, ResultUncheckedUpdateManyInput>
    /**
     * Filter which Results to update
     */
    where?: ResultWhereInput
    /**
     * Limit how many Results to update.
     */
    limit?: number
  }

  /**
   * Result updateManyAndReturn
   */
  export type ResultUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * The data used to update Results.
     */
    data: XOR<ResultUpdateManyMutationInput, ResultUncheckedUpdateManyInput>
    /**
     * Filter which Results to update
     */
    where?: ResultWhereInput
    /**
     * Limit how many Results to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Result upsert
   */
  export type ResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * The filter to search for the Result to update in case it exists.
     */
    where: ResultWhereUniqueInput
    /**
     * In case the Result found by the `where` argument doesn't exist, create a new Result with this data.
     */
    create: XOR<ResultCreateInput, ResultUncheckedCreateInput>
    /**
     * In case the Result was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResultUpdateInput, ResultUncheckedUpdateInput>
  }

  /**
   * Result delete
   */
  export type ResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * Filter which Result to delete.
     */
    where: ResultWhereUniqueInput
  }

  /**
   * Result deleteMany
   */
  export type ResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Results to delete
     */
    where?: ResultWhereInput
    /**
     * Limit how many Results to delete.
     */
    limit?: number
  }

  /**
   * Result without action
   */
  export type ResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
  }


  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    classId: number | null
  }

  export type StudentSumAggregateOutputType = {
    classId: number | null
  }

  export type StudentMinAggregateOutputType = {
    id: string | null
    username: string | null
    name: string | null
    surname: string | null
    parentName: string | null
    email: string | null
    phone: string | null
    address: string | null
    img: string | null
    bloodType: string | null
    gender: $Enums.Gender | null
    dob: Date | null
    createdAt: Date | null
    deletedAt: Date | null
    classId: number | null
    clerk_id: string | null
    academicYear: $Enums.AcademicYear | null
  }

  export type StudentMaxAggregateOutputType = {
    id: string | null
    username: string | null
    name: string | null
    surname: string | null
    parentName: string | null
    email: string | null
    phone: string | null
    address: string | null
    img: string | null
    bloodType: string | null
    gender: $Enums.Gender | null
    dob: Date | null
    createdAt: Date | null
    deletedAt: Date | null
    classId: number | null
    clerk_id: string | null
    academicYear: $Enums.AcademicYear | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    username: number
    name: number
    surname: number
    parentName: number
    email: number
    phone: number
    address: number
    img: number
    bloodType: number
    gender: number
    dob: number
    createdAt: number
    deletedAt: number
    classId: number
    clerk_id: number
    academicYear: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    classId?: true
  }

  export type StudentSumAggregateInputType = {
    classId?: true
  }

  export type StudentMinAggregateInputType = {
    id?: true
    username?: true
    name?: true
    surname?: true
    parentName?: true
    email?: true
    phone?: true
    address?: true
    img?: true
    bloodType?: true
    gender?: true
    dob?: true
    createdAt?: true
    deletedAt?: true
    classId?: true
    clerk_id?: true
    academicYear?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    username?: true
    name?: true
    surname?: true
    parentName?: true
    email?: true
    phone?: true
    address?: true
    img?: true
    bloodType?: true
    gender?: true
    dob?: true
    createdAt?: true
    deletedAt?: true
    classId?: true
    clerk_id?: true
    academicYear?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    username?: true
    name?: true
    surname?: true
    parentName?: true
    email?: true
    phone?: true
    address?: true
    img?: true
    bloodType?: true
    gender?: true
    dob?: true
    createdAt?: true
    deletedAt?: true
    classId?: true
    clerk_id?: true
    academicYear?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    id: string
    username: string
    name: string
    surname: string | null
    parentName: string
    email: string | null
    phone: string
    address: string
    img: string | null
    bloodType: string | null
    gender: $Enums.Gender
    dob: Date
    createdAt: Date
    deletedAt: Date | null
    classId: number
    clerk_id: string | null
    academicYear: $Enums.AcademicYear
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    name?: boolean
    surname?: boolean
    parentName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    img?: boolean
    bloodType?: boolean
    gender?: boolean
    dob?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    classId?: boolean
    clerk_id?: boolean
    academicYear?: boolean
    Attendance?: boolean | Student$AttendanceArgs<ExtArgs>
    clerkStudent?: boolean | Student$clerkStudentArgs<ExtArgs>
    feeTransactions?: boolean | Student$feeTransactionsArgs<ExtArgs>
    results?: boolean | Student$resultsArgs<ExtArgs>
    Class?: boolean | ClassDefaultArgs<ExtArgs>
    studentFees?: boolean | Student$studentFeesArgs<ExtArgs>
    totalFees?: boolean | Student$totalFeesArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    name?: boolean
    surname?: boolean
    parentName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    img?: boolean
    bloodType?: boolean
    gender?: boolean
    dob?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    classId?: boolean
    clerk_id?: boolean
    academicYear?: boolean
    Class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    name?: boolean
    surname?: boolean
    parentName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    img?: boolean
    bloodType?: boolean
    gender?: boolean
    dob?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    classId?: boolean
    clerk_id?: boolean
    academicYear?: boolean
    Class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    id?: boolean
    username?: boolean
    name?: boolean
    surname?: boolean
    parentName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    img?: boolean
    bloodType?: boolean
    gender?: boolean
    dob?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    classId?: boolean
    clerk_id?: boolean
    academicYear?: boolean
  }

  export type StudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "name" | "surname" | "parentName" | "email" | "phone" | "address" | "img" | "bloodType" | "gender" | "dob" | "createdAt" | "deletedAt" | "classId" | "clerk_id" | "academicYear", ExtArgs["result"]["student"]>
  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Attendance?: boolean | Student$AttendanceArgs<ExtArgs>
    clerkStudent?: boolean | Student$clerkStudentArgs<ExtArgs>
    feeTransactions?: boolean | Student$feeTransactionsArgs<ExtArgs>
    results?: boolean | Student$resultsArgs<ExtArgs>
    Class?: boolean | ClassDefaultArgs<ExtArgs>
    studentFees?: boolean | Student$studentFeesArgs<ExtArgs>
    totalFees?: boolean | Student$totalFeesArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type StudentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Class?: boolean | ClassDefaultArgs<ExtArgs>
  }

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      Attendance: Prisma.$AttendancePayload<ExtArgs>[]
      clerkStudent: Prisma.$ClerkStudentsPayload<ExtArgs> | null
      feeTransactions: Prisma.$FeeTransactionPayload<ExtArgs>[]
      results: Prisma.$ResultPayload<ExtArgs>[]
      Class: Prisma.$ClassPayload<ExtArgs>
      studentFees: Prisma.$StudentFeesPayload<ExtArgs>[]
      totalFees: Prisma.$StudentTotalFeesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      name: string
      surname: string | null
      parentName: string
      email: string | null
      phone: string
      address: string
      img: string | null
      bloodType: string | null
      gender: $Enums.Gender
      dob: Date
      createdAt: Date
      deletedAt: Date | null
      classId: number
      clerk_id: string | null
      academicYear: $Enums.AcademicYear
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFindUniqueArgs>(args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFindFirstArgs>(args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentFindManyArgs>(args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
     */
    create<T extends StudentCreateArgs>(args: SelectSubset<T, StudentCreateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCreateManyArgs>(args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Students and returns the data saved in the database.
     * @param {StudentCreateManyAndReturnArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Students and only return the `id`
     * const studentWithIdOnly = await prisma.student.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
     */
    delete<T extends StudentDeleteArgs>(args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentUpdateArgs>(args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentDeleteManyArgs>(args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentUpdateManyArgs>(args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students and returns the data updated in the database.
     * @param {StudentUpdateManyAndReturnArgs} args - Arguments to update many Students.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Students and only return the `id`
     * const studentWithIdOnly = await prisma.student.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
     */
    upsert<T extends StudentUpsertArgs>(args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Attendance<T extends Student$AttendanceArgs<ExtArgs> = {}>(args?: Subset<T, Student$AttendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    clerkStudent<T extends Student$clerkStudentArgs<ExtArgs> = {}>(args?: Subset<T, Student$clerkStudentArgs<ExtArgs>>): Prisma__ClerkStudentsClient<$Result.GetResult<Prisma.$ClerkStudentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    feeTransactions<T extends Student$feeTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Student$feeTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeeTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    results<T extends Student$resultsArgs<ExtArgs> = {}>(args?: Subset<T, Student$resultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    studentFees<T extends Student$studentFeesArgs<ExtArgs> = {}>(args?: Subset<T, Student$studentFeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    totalFees<T extends Student$totalFeesArgs<ExtArgs> = {}>(args?: Subset<T, Student$totalFeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentTotalFeesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student model
   */
  interface StudentFieldRefs {
    readonly id: FieldRef<"Student", 'String'>
    readonly username: FieldRef<"Student", 'String'>
    readonly name: FieldRef<"Student", 'String'>
    readonly surname: FieldRef<"Student", 'String'>
    readonly parentName: FieldRef<"Student", 'String'>
    readonly email: FieldRef<"Student", 'String'>
    readonly phone: FieldRef<"Student", 'String'>
    readonly address: FieldRef<"Student", 'String'>
    readonly img: FieldRef<"Student", 'String'>
    readonly bloodType: FieldRef<"Student", 'String'>
    readonly gender: FieldRef<"Student", 'Gender'>
    readonly dob: FieldRef<"Student", 'DateTime'>
    readonly createdAt: FieldRef<"Student", 'DateTime'>
    readonly deletedAt: FieldRef<"Student", 'DateTime'>
    readonly classId: FieldRef<"Student", 'Int'>
    readonly clerk_id: FieldRef<"Student", 'String'>
    readonly academicYear: FieldRef<"Student", 'AcademicYear'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student createManyAndReturn
   */
  export type StudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student updateManyAndReturn
   */
  export type StudentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to delete.
     */
    limit?: number
  }

  /**
   * Student.Attendance
   */
  export type Student$AttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    cursor?: AttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Student.clerkStudent
   */
  export type Student$clerkStudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkStudents
     */
    select?: ClerkStudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkStudents
     */
    omit?: ClerkStudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkStudentsInclude<ExtArgs> | null
    where?: ClerkStudentsWhereInput
  }

  /**
   * Student.feeTransactions
   */
  export type Student$feeTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeTransaction
     */
    select?: FeeTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeTransaction
     */
    omit?: FeeTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeTransactionInclude<ExtArgs> | null
    where?: FeeTransactionWhereInput
    orderBy?: FeeTransactionOrderByWithRelationInput | FeeTransactionOrderByWithRelationInput[]
    cursor?: FeeTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeeTransactionScalarFieldEnum | FeeTransactionScalarFieldEnum[]
  }

  /**
   * Student.results
   */
  export type Student$resultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    where?: ResultWhereInput
    orderBy?: ResultOrderByWithRelationInput | ResultOrderByWithRelationInput[]
    cursor?: ResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResultScalarFieldEnum | ResultScalarFieldEnum[]
  }

  /**
   * Student.studentFees
   */
  export type Student$studentFeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    where?: StudentFeesWhereInput
    orderBy?: StudentFeesOrderByWithRelationInput | StudentFeesOrderByWithRelationInput[]
    cursor?: StudentFeesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentFeesScalarFieldEnum | StudentFeesScalarFieldEnum[]
  }

  /**
   * Student.totalFees
   */
  export type Student$totalFeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentTotalFees
     */
    select?: StudentTotalFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentTotalFees
     */
    omit?: StudentTotalFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentTotalFeesInclude<ExtArgs> | null
    where?: StudentTotalFeesWhereInput
    orderBy?: StudentTotalFeesOrderByWithRelationInput | StudentTotalFeesOrderByWithRelationInput[]
    cursor?: StudentTotalFeesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentTotalFeesScalarFieldEnum | StudentTotalFeesScalarFieldEnum[]
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model ClerkStudents
   */

  export type AggregateClerkStudents = {
    _count: ClerkStudentsCountAggregateOutputType | null
    _min: ClerkStudentsMinAggregateOutputType | null
    _max: ClerkStudentsMaxAggregateOutputType | null
  }

  export type ClerkStudentsMinAggregateOutputType = {
    clerk_id: string | null
    user_id: string | null
    username: string | null
    password: string | null
    full_name: string | null
    role: string | null
    studentId: string | null
  }

  export type ClerkStudentsMaxAggregateOutputType = {
    clerk_id: string | null
    user_id: string | null
    username: string | null
    password: string | null
    full_name: string | null
    role: string | null
    studentId: string | null
  }

  export type ClerkStudentsCountAggregateOutputType = {
    clerk_id: number
    user_id: number
    username: number
    password: number
    full_name: number
    role: number
    studentId: number
    _all: number
  }


  export type ClerkStudentsMinAggregateInputType = {
    clerk_id?: true
    user_id?: true
    username?: true
    password?: true
    full_name?: true
    role?: true
    studentId?: true
  }

  export type ClerkStudentsMaxAggregateInputType = {
    clerk_id?: true
    user_id?: true
    username?: true
    password?: true
    full_name?: true
    role?: true
    studentId?: true
  }

  export type ClerkStudentsCountAggregateInputType = {
    clerk_id?: true
    user_id?: true
    username?: true
    password?: true
    full_name?: true
    role?: true
    studentId?: true
    _all?: true
  }

  export type ClerkStudentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClerkStudents to aggregate.
     */
    where?: ClerkStudentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClerkStudents to fetch.
     */
    orderBy?: ClerkStudentsOrderByWithRelationInput | ClerkStudentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClerkStudentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClerkStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClerkStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClerkStudents
    **/
    _count?: true | ClerkStudentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClerkStudentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClerkStudentsMaxAggregateInputType
  }

  export type GetClerkStudentsAggregateType<T extends ClerkStudentsAggregateArgs> = {
        [P in keyof T & keyof AggregateClerkStudents]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClerkStudents[P]>
      : GetScalarType<T[P], AggregateClerkStudents[P]>
  }




  export type ClerkStudentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClerkStudentsWhereInput
    orderBy?: ClerkStudentsOrderByWithAggregationInput | ClerkStudentsOrderByWithAggregationInput[]
    by: ClerkStudentsScalarFieldEnum[] | ClerkStudentsScalarFieldEnum
    having?: ClerkStudentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClerkStudentsCountAggregateInputType | true
    _min?: ClerkStudentsMinAggregateInputType
    _max?: ClerkStudentsMaxAggregateInputType
  }

  export type ClerkStudentsGroupByOutputType = {
    clerk_id: string
    user_id: string | null
    username: string
    password: string
    full_name: string
    role: string
    studentId: string | null
    _count: ClerkStudentsCountAggregateOutputType | null
    _min: ClerkStudentsMinAggregateOutputType | null
    _max: ClerkStudentsMaxAggregateOutputType | null
  }

  type GetClerkStudentsGroupByPayload<T extends ClerkStudentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClerkStudentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClerkStudentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClerkStudentsGroupByOutputType[P]>
            : GetScalarType<T[P], ClerkStudentsGroupByOutputType[P]>
        }
      >
    >


  export type ClerkStudentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    clerk_id?: boolean
    user_id?: boolean
    username?: boolean
    password?: boolean
    full_name?: boolean
    role?: boolean
    studentId?: boolean
    student?: boolean | ClerkStudents$studentArgs<ExtArgs>
  }, ExtArgs["result"]["clerkStudents"]>

  export type ClerkStudentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    clerk_id?: boolean
    user_id?: boolean
    username?: boolean
    password?: boolean
    full_name?: boolean
    role?: boolean
    studentId?: boolean
    student?: boolean | ClerkStudents$studentArgs<ExtArgs>
  }, ExtArgs["result"]["clerkStudents"]>

  export type ClerkStudentsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    clerk_id?: boolean
    user_id?: boolean
    username?: boolean
    password?: boolean
    full_name?: boolean
    role?: boolean
    studentId?: boolean
    student?: boolean | ClerkStudents$studentArgs<ExtArgs>
  }, ExtArgs["result"]["clerkStudents"]>

  export type ClerkStudentsSelectScalar = {
    clerk_id?: boolean
    user_id?: boolean
    username?: boolean
    password?: boolean
    full_name?: boolean
    role?: boolean
    studentId?: boolean
  }

  export type ClerkStudentsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"clerk_id" | "user_id" | "username" | "password" | "full_name" | "role" | "studentId", ExtArgs["result"]["clerkStudents"]>
  export type ClerkStudentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | ClerkStudents$studentArgs<ExtArgs>
  }
  export type ClerkStudentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | ClerkStudents$studentArgs<ExtArgs>
  }
  export type ClerkStudentsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | ClerkStudents$studentArgs<ExtArgs>
  }

  export type $ClerkStudentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClerkStudents"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      clerk_id: string
      user_id: string | null
      username: string
      password: string
      full_name: string
      role: string
      studentId: string | null
    }, ExtArgs["result"]["clerkStudents"]>
    composites: {}
  }

  type ClerkStudentsGetPayload<S extends boolean | null | undefined | ClerkStudentsDefaultArgs> = $Result.GetResult<Prisma.$ClerkStudentsPayload, S>

  type ClerkStudentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClerkStudentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClerkStudentsCountAggregateInputType | true
    }

  export interface ClerkStudentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClerkStudents'], meta: { name: 'ClerkStudents' } }
    /**
     * Find zero or one ClerkStudents that matches the filter.
     * @param {ClerkStudentsFindUniqueArgs} args - Arguments to find a ClerkStudents
     * @example
     * // Get one ClerkStudents
     * const clerkStudents = await prisma.clerkStudents.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClerkStudentsFindUniqueArgs>(args: SelectSubset<T, ClerkStudentsFindUniqueArgs<ExtArgs>>): Prisma__ClerkStudentsClient<$Result.GetResult<Prisma.$ClerkStudentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClerkStudents that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClerkStudentsFindUniqueOrThrowArgs} args - Arguments to find a ClerkStudents
     * @example
     * // Get one ClerkStudents
     * const clerkStudents = await prisma.clerkStudents.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClerkStudentsFindUniqueOrThrowArgs>(args: SelectSubset<T, ClerkStudentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClerkStudentsClient<$Result.GetResult<Prisma.$ClerkStudentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClerkStudents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClerkStudentsFindFirstArgs} args - Arguments to find a ClerkStudents
     * @example
     * // Get one ClerkStudents
     * const clerkStudents = await prisma.clerkStudents.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClerkStudentsFindFirstArgs>(args?: SelectSubset<T, ClerkStudentsFindFirstArgs<ExtArgs>>): Prisma__ClerkStudentsClient<$Result.GetResult<Prisma.$ClerkStudentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClerkStudents that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClerkStudentsFindFirstOrThrowArgs} args - Arguments to find a ClerkStudents
     * @example
     * // Get one ClerkStudents
     * const clerkStudents = await prisma.clerkStudents.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClerkStudentsFindFirstOrThrowArgs>(args?: SelectSubset<T, ClerkStudentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClerkStudentsClient<$Result.GetResult<Prisma.$ClerkStudentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClerkStudents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClerkStudentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClerkStudents
     * const clerkStudents = await prisma.clerkStudents.findMany()
     * 
     * // Get first 10 ClerkStudents
     * const clerkStudents = await prisma.clerkStudents.findMany({ take: 10 })
     * 
     * // Only select the `clerk_id`
     * const clerkStudentsWithClerk_idOnly = await prisma.clerkStudents.findMany({ select: { clerk_id: true } })
     * 
     */
    findMany<T extends ClerkStudentsFindManyArgs>(args?: SelectSubset<T, ClerkStudentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClerkStudentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClerkStudents.
     * @param {ClerkStudentsCreateArgs} args - Arguments to create a ClerkStudents.
     * @example
     * // Create one ClerkStudents
     * const ClerkStudents = await prisma.clerkStudents.create({
     *   data: {
     *     // ... data to create a ClerkStudents
     *   }
     * })
     * 
     */
    create<T extends ClerkStudentsCreateArgs>(args: SelectSubset<T, ClerkStudentsCreateArgs<ExtArgs>>): Prisma__ClerkStudentsClient<$Result.GetResult<Prisma.$ClerkStudentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClerkStudents.
     * @param {ClerkStudentsCreateManyArgs} args - Arguments to create many ClerkStudents.
     * @example
     * // Create many ClerkStudents
     * const clerkStudents = await prisma.clerkStudents.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClerkStudentsCreateManyArgs>(args?: SelectSubset<T, ClerkStudentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClerkStudents and returns the data saved in the database.
     * @param {ClerkStudentsCreateManyAndReturnArgs} args - Arguments to create many ClerkStudents.
     * @example
     * // Create many ClerkStudents
     * const clerkStudents = await prisma.clerkStudents.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClerkStudents and only return the `clerk_id`
     * const clerkStudentsWithClerk_idOnly = await prisma.clerkStudents.createManyAndReturn({
     *   select: { clerk_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClerkStudentsCreateManyAndReturnArgs>(args?: SelectSubset<T, ClerkStudentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClerkStudentsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ClerkStudents.
     * @param {ClerkStudentsDeleteArgs} args - Arguments to delete one ClerkStudents.
     * @example
     * // Delete one ClerkStudents
     * const ClerkStudents = await prisma.clerkStudents.delete({
     *   where: {
     *     // ... filter to delete one ClerkStudents
     *   }
     * })
     * 
     */
    delete<T extends ClerkStudentsDeleteArgs>(args: SelectSubset<T, ClerkStudentsDeleteArgs<ExtArgs>>): Prisma__ClerkStudentsClient<$Result.GetResult<Prisma.$ClerkStudentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClerkStudents.
     * @param {ClerkStudentsUpdateArgs} args - Arguments to update one ClerkStudents.
     * @example
     * // Update one ClerkStudents
     * const clerkStudents = await prisma.clerkStudents.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClerkStudentsUpdateArgs>(args: SelectSubset<T, ClerkStudentsUpdateArgs<ExtArgs>>): Prisma__ClerkStudentsClient<$Result.GetResult<Prisma.$ClerkStudentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClerkStudents.
     * @param {ClerkStudentsDeleteManyArgs} args - Arguments to filter ClerkStudents to delete.
     * @example
     * // Delete a few ClerkStudents
     * const { count } = await prisma.clerkStudents.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClerkStudentsDeleteManyArgs>(args?: SelectSubset<T, ClerkStudentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClerkStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClerkStudentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClerkStudents
     * const clerkStudents = await prisma.clerkStudents.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClerkStudentsUpdateManyArgs>(args: SelectSubset<T, ClerkStudentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClerkStudents and returns the data updated in the database.
     * @param {ClerkStudentsUpdateManyAndReturnArgs} args - Arguments to update many ClerkStudents.
     * @example
     * // Update many ClerkStudents
     * const clerkStudents = await prisma.clerkStudents.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ClerkStudents and only return the `clerk_id`
     * const clerkStudentsWithClerk_idOnly = await prisma.clerkStudents.updateManyAndReturn({
     *   select: { clerk_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClerkStudentsUpdateManyAndReturnArgs>(args: SelectSubset<T, ClerkStudentsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClerkStudentsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ClerkStudents.
     * @param {ClerkStudentsUpsertArgs} args - Arguments to update or create a ClerkStudents.
     * @example
     * // Update or create a ClerkStudents
     * const clerkStudents = await prisma.clerkStudents.upsert({
     *   create: {
     *     // ... data to create a ClerkStudents
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClerkStudents we want to update
     *   }
     * })
     */
    upsert<T extends ClerkStudentsUpsertArgs>(args: SelectSubset<T, ClerkStudentsUpsertArgs<ExtArgs>>): Prisma__ClerkStudentsClient<$Result.GetResult<Prisma.$ClerkStudentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClerkStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClerkStudentsCountArgs} args - Arguments to filter ClerkStudents to count.
     * @example
     * // Count the number of ClerkStudents
     * const count = await prisma.clerkStudents.count({
     *   where: {
     *     // ... the filter for the ClerkStudents we want to count
     *   }
     * })
    **/
    count<T extends ClerkStudentsCountArgs>(
      args?: Subset<T, ClerkStudentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClerkStudentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClerkStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClerkStudentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClerkStudentsAggregateArgs>(args: Subset<T, ClerkStudentsAggregateArgs>): Prisma.PrismaPromise<GetClerkStudentsAggregateType<T>>

    /**
     * Group by ClerkStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClerkStudentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClerkStudentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClerkStudentsGroupByArgs['orderBy'] }
        : { orderBy?: ClerkStudentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClerkStudentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClerkStudentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClerkStudents model
   */
  readonly fields: ClerkStudentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClerkStudents.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClerkStudentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends ClerkStudents$studentArgs<ExtArgs> = {}>(args?: Subset<T, ClerkStudents$studentArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClerkStudents model
   */
  interface ClerkStudentsFieldRefs {
    readonly clerk_id: FieldRef<"ClerkStudents", 'String'>
    readonly user_id: FieldRef<"ClerkStudents", 'String'>
    readonly username: FieldRef<"ClerkStudents", 'String'>
    readonly password: FieldRef<"ClerkStudents", 'String'>
    readonly full_name: FieldRef<"ClerkStudents", 'String'>
    readonly role: FieldRef<"ClerkStudents", 'String'>
    readonly studentId: FieldRef<"ClerkStudents", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ClerkStudents findUnique
   */
  export type ClerkStudentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkStudents
     */
    select?: ClerkStudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkStudents
     */
    omit?: ClerkStudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkStudentsInclude<ExtArgs> | null
    /**
     * Filter, which ClerkStudents to fetch.
     */
    where: ClerkStudentsWhereUniqueInput
  }

  /**
   * ClerkStudents findUniqueOrThrow
   */
  export type ClerkStudentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkStudents
     */
    select?: ClerkStudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkStudents
     */
    omit?: ClerkStudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkStudentsInclude<ExtArgs> | null
    /**
     * Filter, which ClerkStudents to fetch.
     */
    where: ClerkStudentsWhereUniqueInput
  }

  /**
   * ClerkStudents findFirst
   */
  export type ClerkStudentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkStudents
     */
    select?: ClerkStudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkStudents
     */
    omit?: ClerkStudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkStudentsInclude<ExtArgs> | null
    /**
     * Filter, which ClerkStudents to fetch.
     */
    where?: ClerkStudentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClerkStudents to fetch.
     */
    orderBy?: ClerkStudentsOrderByWithRelationInput | ClerkStudentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClerkStudents.
     */
    cursor?: ClerkStudentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClerkStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClerkStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClerkStudents.
     */
    distinct?: ClerkStudentsScalarFieldEnum | ClerkStudentsScalarFieldEnum[]
  }

  /**
   * ClerkStudents findFirstOrThrow
   */
  export type ClerkStudentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkStudents
     */
    select?: ClerkStudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkStudents
     */
    omit?: ClerkStudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkStudentsInclude<ExtArgs> | null
    /**
     * Filter, which ClerkStudents to fetch.
     */
    where?: ClerkStudentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClerkStudents to fetch.
     */
    orderBy?: ClerkStudentsOrderByWithRelationInput | ClerkStudentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClerkStudents.
     */
    cursor?: ClerkStudentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClerkStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClerkStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClerkStudents.
     */
    distinct?: ClerkStudentsScalarFieldEnum | ClerkStudentsScalarFieldEnum[]
  }

  /**
   * ClerkStudents findMany
   */
  export type ClerkStudentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkStudents
     */
    select?: ClerkStudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkStudents
     */
    omit?: ClerkStudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkStudentsInclude<ExtArgs> | null
    /**
     * Filter, which ClerkStudents to fetch.
     */
    where?: ClerkStudentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClerkStudents to fetch.
     */
    orderBy?: ClerkStudentsOrderByWithRelationInput | ClerkStudentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClerkStudents.
     */
    cursor?: ClerkStudentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClerkStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClerkStudents.
     */
    skip?: number
    distinct?: ClerkStudentsScalarFieldEnum | ClerkStudentsScalarFieldEnum[]
  }

  /**
   * ClerkStudents create
   */
  export type ClerkStudentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkStudents
     */
    select?: ClerkStudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkStudents
     */
    omit?: ClerkStudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkStudentsInclude<ExtArgs> | null
    /**
     * The data needed to create a ClerkStudents.
     */
    data: XOR<ClerkStudentsCreateInput, ClerkStudentsUncheckedCreateInput>
  }

  /**
   * ClerkStudents createMany
   */
  export type ClerkStudentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClerkStudents.
     */
    data: ClerkStudentsCreateManyInput | ClerkStudentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClerkStudents createManyAndReturn
   */
  export type ClerkStudentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkStudents
     */
    select?: ClerkStudentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkStudents
     */
    omit?: ClerkStudentsOmit<ExtArgs> | null
    /**
     * The data used to create many ClerkStudents.
     */
    data: ClerkStudentsCreateManyInput | ClerkStudentsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkStudentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClerkStudents update
   */
  export type ClerkStudentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkStudents
     */
    select?: ClerkStudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkStudents
     */
    omit?: ClerkStudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkStudentsInclude<ExtArgs> | null
    /**
     * The data needed to update a ClerkStudents.
     */
    data: XOR<ClerkStudentsUpdateInput, ClerkStudentsUncheckedUpdateInput>
    /**
     * Choose, which ClerkStudents to update.
     */
    where: ClerkStudentsWhereUniqueInput
  }

  /**
   * ClerkStudents updateMany
   */
  export type ClerkStudentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClerkStudents.
     */
    data: XOR<ClerkStudentsUpdateManyMutationInput, ClerkStudentsUncheckedUpdateManyInput>
    /**
     * Filter which ClerkStudents to update
     */
    where?: ClerkStudentsWhereInput
    /**
     * Limit how many ClerkStudents to update.
     */
    limit?: number
  }

  /**
   * ClerkStudents updateManyAndReturn
   */
  export type ClerkStudentsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkStudents
     */
    select?: ClerkStudentsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkStudents
     */
    omit?: ClerkStudentsOmit<ExtArgs> | null
    /**
     * The data used to update ClerkStudents.
     */
    data: XOR<ClerkStudentsUpdateManyMutationInput, ClerkStudentsUncheckedUpdateManyInput>
    /**
     * Filter which ClerkStudents to update
     */
    where?: ClerkStudentsWhereInput
    /**
     * Limit how many ClerkStudents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkStudentsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClerkStudents upsert
   */
  export type ClerkStudentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkStudents
     */
    select?: ClerkStudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkStudents
     */
    omit?: ClerkStudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkStudentsInclude<ExtArgs> | null
    /**
     * The filter to search for the ClerkStudents to update in case it exists.
     */
    where: ClerkStudentsWhereUniqueInput
    /**
     * In case the ClerkStudents found by the `where` argument doesn't exist, create a new ClerkStudents with this data.
     */
    create: XOR<ClerkStudentsCreateInput, ClerkStudentsUncheckedCreateInput>
    /**
     * In case the ClerkStudents was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClerkStudentsUpdateInput, ClerkStudentsUncheckedUpdateInput>
  }

  /**
   * ClerkStudents delete
   */
  export type ClerkStudentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkStudents
     */
    select?: ClerkStudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkStudents
     */
    omit?: ClerkStudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkStudentsInclude<ExtArgs> | null
    /**
     * Filter which ClerkStudents to delete.
     */
    where: ClerkStudentsWhereUniqueInput
  }

  /**
   * ClerkStudents deleteMany
   */
  export type ClerkStudentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClerkStudents to delete
     */
    where?: ClerkStudentsWhereInput
    /**
     * Limit how many ClerkStudents to delete.
     */
    limit?: number
  }

  /**
   * ClerkStudents.student
   */
  export type ClerkStudents$studentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
  }

  /**
   * ClerkStudents without action
   */
  export type ClerkStudentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkStudents
     */
    select?: ClerkStudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkStudents
     */
    omit?: ClerkStudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkStudentsInclude<ExtArgs> | null
  }


  /**
   * Model Subject
   */

  export type AggregateSubject = {
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  export type SubjectAvgAggregateOutputType = {
    id: number | null
  }

  export type SubjectSumAggregateOutputType = {
    id: number | null
  }

  export type SubjectMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
  }

  export type SubjectMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
  }

  export type SubjectCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    _all: number
  }


  export type SubjectAvgAggregateInputType = {
    id?: true
  }

  export type SubjectSumAggregateInputType = {
    id?: true
  }

  export type SubjectMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type SubjectMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type SubjectCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type SubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subject to aggregate.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subjects
    **/
    _count?: true | SubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectMaxAggregateInputType
  }

  export type GetSubjectAggregateType<T extends SubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubject[P]>
      : GetScalarType<T[P], AggregateSubject[P]>
  }




  export type SubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithAggregationInput | SubjectOrderByWithAggregationInput[]
    by: SubjectScalarFieldEnum[] | SubjectScalarFieldEnum
    having?: SubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectCountAggregateInputType | true
    _avg?: SubjectAvgAggregateInputType
    _sum?: SubjectSumAggregateInputType
    _min?: SubjectMinAggregateInputType
    _max?: SubjectMaxAggregateInputType
  }

  export type SubjectGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  type GetSubjectGroupByPayload<T extends SubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectGroupByOutputType[P]>
        }
      >
    >


  export type SubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    exams?: boolean | Subject$examsArgs<ExtArgs>
    lessons?: boolean | Subject$lessonsArgs<ExtArgs>
    results?: boolean | Subject$resultsArgs<ExtArgs>
    teachers?: boolean | Subject$teachersArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }

  export type SubjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt", ExtArgs["result"]["subject"]>
  export type SubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exams?: boolean | Subject$examsArgs<ExtArgs>
    lessons?: boolean | Subject$lessonsArgs<ExtArgs>
    results?: boolean | Subject$resultsArgs<ExtArgs>
    teachers?: boolean | Subject$teachersArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SubjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subject"
    objects: {
      exams: Prisma.$ExamSubjectPayload<ExtArgs>[]
      lessons: Prisma.$LessonPayload<ExtArgs>[]
      results: Prisma.$ResultPayload<ExtArgs>[]
      teachers: Prisma.$TeacherSubjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
    }, ExtArgs["result"]["subject"]>
    composites: {}
  }

  type SubjectGetPayload<S extends boolean | null | undefined | SubjectDefaultArgs> = $Result.GetResult<Prisma.$SubjectPayload, S>

  type SubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubjectCountAggregateInputType | true
    }

  export interface SubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subject'], meta: { name: 'Subject' } }
    /**
     * Find zero or one Subject that matches the filter.
     * @param {SubjectFindUniqueArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubjectFindUniqueArgs>(args: SelectSubset<T, SubjectFindUniqueArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subject that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubjectFindUniqueOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubjectFindUniqueOrThrowArgs>(args: SelectSubset<T, SubjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubjectFindFirstArgs>(args?: SelectSubset<T, SubjectFindFirstArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubjectFindFirstOrThrowArgs>(args?: SelectSubset<T, SubjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subject.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectWithIdOnly = await prisma.subject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubjectFindManyArgs>(args?: SelectSubset<T, SubjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subject.
     * @param {SubjectCreateArgs} args - Arguments to create a Subject.
     * @example
     * // Create one Subject
     * const Subject = await prisma.subject.create({
     *   data: {
     *     // ... data to create a Subject
     *   }
     * })
     * 
     */
    create<T extends SubjectCreateArgs>(args: SelectSubset<T, SubjectCreateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subjects.
     * @param {SubjectCreateManyArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subject = await prisma.subject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubjectCreateManyArgs>(args?: SelectSubset<T, SubjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subjects and returns the data saved in the database.
     * @param {SubjectCreateManyAndReturnArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subject = await prisma.subject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subjects and only return the `id`
     * const subjectWithIdOnly = await prisma.subject.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubjectCreateManyAndReturnArgs>(args?: SelectSubset<T, SubjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Subject.
     * @param {SubjectDeleteArgs} args - Arguments to delete one Subject.
     * @example
     * // Delete one Subject
     * const Subject = await prisma.subject.delete({
     *   where: {
     *     // ... filter to delete one Subject
     *   }
     * })
     * 
     */
    delete<T extends SubjectDeleteArgs>(args: SelectSubset<T, SubjectDeleteArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subject.
     * @param {SubjectUpdateArgs} args - Arguments to update one Subject.
     * @example
     * // Update one Subject
     * const subject = await prisma.subject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubjectUpdateArgs>(args: SelectSubset<T, SubjectUpdateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subjects.
     * @param {SubjectDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubjectDeleteManyArgs>(args?: SelectSubset<T, SubjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubjectUpdateManyArgs>(args: SelectSubset<T, SubjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects and returns the data updated in the database.
     * @param {SubjectUpdateManyAndReturnArgs} args - Arguments to update many Subjects.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subjects and only return the `id`
     * const subjectWithIdOnly = await prisma.subject.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubjectUpdateManyAndReturnArgs>(args: SelectSubset<T, SubjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Subject.
     * @param {SubjectUpsertArgs} args - Arguments to update or create a Subject.
     * @example
     * // Update or create a Subject
     * const subject = await prisma.subject.upsert({
     *   create: {
     *     // ... data to create a Subject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subject we want to update
     *   }
     * })
     */
    upsert<T extends SubjectUpsertArgs>(args: SelectSubset<T, SubjectUpsertArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subject.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends SubjectCountArgs>(
      args?: Subset<T, SubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectAggregateArgs>(args: Subset<T, SubjectAggregateArgs>): Prisma.PrismaPromise<GetSubjectAggregateType<T>>

    /**
     * Group by Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectGroupByArgs['orderBy'] }
        : { orderBy?: SubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subject model
   */
  readonly fields: SubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exams<T extends Subject$examsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$examsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lessons<T extends Subject$lessonsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$lessonsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    results<T extends Subject$resultsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$resultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teachers<T extends Subject$teachersArgs<ExtArgs> = {}>(args?: Subset<T, Subject$teachersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subject model
   */
  interface SubjectFieldRefs {
    readonly id: FieldRef<"Subject", 'Int'>
    readonly name: FieldRef<"Subject", 'String'>
    readonly createdAt: FieldRef<"Subject", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subject findUnique
   */
  export type SubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findUniqueOrThrow
   */
  export type SubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findFirst
   */
  export type SubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findFirstOrThrow
   */
  export type SubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findMany
   */
  export type SubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subjects to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject create
   */
  export type SubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Subject.
     */
    data: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
  }

  /**
   * Subject createMany
   */
  export type SubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subject createManyAndReturn
   */
  export type SubjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subject update
   */
  export type SubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Subject.
     */
    data: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
    /**
     * Choose, which Subject to update.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject updateMany
   */
  export type SubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to update.
     */
    limit?: number
  }

  /**
   * Subject updateManyAndReturn
   */
  export type SubjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to update.
     */
    limit?: number
  }

  /**
   * Subject upsert
   */
  export type SubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Subject to update in case it exists.
     */
    where: SubjectWhereUniqueInput
    /**
     * In case the Subject found by the `where` argument doesn't exist, create a new Subject with this data.
     */
    create: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
    /**
     * In case the Subject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
  }

  /**
   * Subject delete
   */
  export type SubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter which Subject to delete.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject deleteMany
   */
  export type SubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subjects to delete
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to delete.
     */
    limit?: number
  }

  /**
   * Subject.exams
   */
  export type Subject$examsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubject
     */
    select?: ExamSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubject
     */
    omit?: ExamSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubjectInclude<ExtArgs> | null
    where?: ExamSubjectWhereInput
    orderBy?: ExamSubjectOrderByWithRelationInput | ExamSubjectOrderByWithRelationInput[]
    cursor?: ExamSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExamSubjectScalarFieldEnum | ExamSubjectScalarFieldEnum[]
  }

  /**
   * Subject.lessons
   */
  export type Subject$lessonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    where?: LessonWhereInput
    orderBy?: LessonOrderByWithRelationInput | LessonOrderByWithRelationInput[]
    cursor?: LessonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * Subject.results
   */
  export type Subject$resultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    where?: ResultWhereInput
    orderBy?: ResultOrderByWithRelationInput | ResultOrderByWithRelationInput[]
    cursor?: ResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResultScalarFieldEnum | ResultScalarFieldEnum[]
  }

  /**
   * Subject.teachers
   */
  export type Subject$teachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSubject
     */
    select?: TeacherSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSubject
     */
    omit?: TeacherSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherSubjectInclude<ExtArgs> | null
    where?: TeacherSubjectWhereInput
    orderBy?: TeacherSubjectOrderByWithRelationInput | TeacherSubjectOrderByWithRelationInput[]
    cursor?: TeacherSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherSubjectScalarFieldEnum | TeacherSubjectScalarFieldEnum[]
  }

  /**
   * Subject without action
   */
  export type SubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
  }


  /**
   * Model Teacher
   */

  export type AggregateTeacher = {
    _count: TeacherCountAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  export type TeacherMinAggregateOutputType = {
    id: string | null
    username: string | null
    name: string | null
    surname: string | null
    email: string | null
    phone: string | null
    address: string | null
    img: string | null
    bloodType: string | null
    gender: $Enums.Gender | null
    createdAt: Date | null
    deletedAt: Date | null
    supervisor: boolean | null
    dob: Date | null
    classId: string | null
    clerk_id: string | null
  }

  export type TeacherMaxAggregateOutputType = {
    id: string | null
    username: string | null
    name: string | null
    surname: string | null
    email: string | null
    phone: string | null
    address: string | null
    img: string | null
    bloodType: string | null
    gender: $Enums.Gender | null
    createdAt: Date | null
    deletedAt: Date | null
    supervisor: boolean | null
    dob: Date | null
    classId: string | null
    clerk_id: string | null
  }

  export type TeacherCountAggregateOutputType = {
    id: number
    username: number
    name: number
    surname: number
    email: number
    phone: number
    address: number
    img: number
    bloodType: number
    gender: number
    createdAt: number
    deletedAt: number
    supervisor: number
    dob: number
    classId: number
    clerk_id: number
    _all: number
  }


  export type TeacherMinAggregateInputType = {
    id?: true
    username?: true
    name?: true
    surname?: true
    email?: true
    phone?: true
    address?: true
    img?: true
    bloodType?: true
    gender?: true
    createdAt?: true
    deletedAt?: true
    supervisor?: true
    dob?: true
    classId?: true
    clerk_id?: true
  }

  export type TeacherMaxAggregateInputType = {
    id?: true
    username?: true
    name?: true
    surname?: true
    email?: true
    phone?: true
    address?: true
    img?: true
    bloodType?: true
    gender?: true
    createdAt?: true
    deletedAt?: true
    supervisor?: true
    dob?: true
    classId?: true
    clerk_id?: true
  }

  export type TeacherCountAggregateInputType = {
    id?: true
    username?: true
    name?: true
    surname?: true
    email?: true
    phone?: true
    address?: true
    img?: true
    bloodType?: true
    gender?: true
    createdAt?: true
    deletedAt?: true
    supervisor?: true
    dob?: true
    classId?: true
    clerk_id?: true
    _all?: true
  }

  export type TeacherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teacher to aggregate.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teachers
    **/
    _count?: true | TeacherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherMaxAggregateInputType
  }

  export type GetTeacherAggregateType<T extends TeacherAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacher[P]>
      : GetScalarType<T[P], AggregateTeacher[P]>
  }




  export type TeacherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithAggregationInput | TeacherOrderByWithAggregationInput[]
    by: TeacherScalarFieldEnum[] | TeacherScalarFieldEnum
    having?: TeacherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherCountAggregateInputType | true
    _min?: TeacherMinAggregateInputType
    _max?: TeacherMaxAggregateInputType
  }

  export type TeacherGroupByOutputType = {
    id: string
    username: string
    name: string
    surname: string | null
    email: string | null
    phone: string
    address: string
    img: string | null
    bloodType: string | null
    gender: $Enums.Gender
    createdAt: Date
    deletedAt: Date | null
    supervisor: boolean
    dob: Date | null
    classId: string | null
    clerk_id: string | null
    _count: TeacherCountAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  type GetTeacherGroupByPayload<T extends TeacherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeacherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherGroupByOutputType[P]>
        }
      >
    >


  export type TeacherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    name?: boolean
    surname?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    img?: boolean
    bloodType?: boolean
    gender?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    supervisor?: boolean
    dob?: boolean
    classId?: boolean
    clerk_id?: boolean
    ClerkTeachers?: boolean | Teacher$ClerkTeachersArgs<ExtArgs>
    lessons?: boolean | Teacher$lessonsArgs<ExtArgs>
    subjects?: boolean | Teacher$subjectsArgs<ExtArgs>
    class?: boolean | Teacher$classArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    name?: boolean
    surname?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    img?: boolean
    bloodType?: boolean
    gender?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    supervisor?: boolean
    dob?: boolean
    classId?: boolean
    clerk_id?: boolean
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    name?: boolean
    surname?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    img?: boolean
    bloodType?: boolean
    gender?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    supervisor?: boolean
    dob?: boolean
    classId?: boolean
    clerk_id?: boolean
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectScalar = {
    id?: boolean
    username?: boolean
    name?: boolean
    surname?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    img?: boolean
    bloodType?: boolean
    gender?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    supervisor?: boolean
    dob?: boolean
    classId?: boolean
    clerk_id?: boolean
  }

  export type TeacherOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "name" | "surname" | "email" | "phone" | "address" | "img" | "bloodType" | "gender" | "createdAt" | "deletedAt" | "supervisor" | "dob" | "classId" | "clerk_id", ExtArgs["result"]["teacher"]>
  export type TeacherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ClerkTeachers?: boolean | Teacher$ClerkTeachersArgs<ExtArgs>
    lessons?: boolean | Teacher$lessonsArgs<ExtArgs>
    subjects?: boolean | Teacher$subjectsArgs<ExtArgs>
    class?: boolean | Teacher$classArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeacherIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TeacherIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TeacherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Teacher"
    objects: {
      ClerkTeachers: Prisma.$ClerkTeachersPayload<ExtArgs> | null
      lessons: Prisma.$LessonPayload<ExtArgs>[]
      subjects: Prisma.$TeacherSubjectPayload<ExtArgs>[]
      class: Prisma.$ClassPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      name: string
      surname: string | null
      email: string | null
      phone: string
      address: string
      img: string | null
      bloodType: string | null
      gender: $Enums.Gender
      createdAt: Date
      deletedAt: Date | null
      supervisor: boolean
      dob: Date | null
      classId: string | null
      clerk_id: string | null
    }, ExtArgs["result"]["teacher"]>
    composites: {}
  }

  type TeacherGetPayload<S extends boolean | null | undefined | TeacherDefaultArgs> = $Result.GetResult<Prisma.$TeacherPayload, S>

  type TeacherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeacherFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeacherCountAggregateInputType | true
    }

  export interface TeacherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Teacher'], meta: { name: 'Teacher' } }
    /**
     * Find zero or one Teacher that matches the filter.
     * @param {TeacherFindUniqueArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeacherFindUniqueArgs>(args: SelectSubset<T, TeacherFindUniqueArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Teacher that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeacherFindUniqueOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeacherFindUniqueOrThrowArgs>(args: SelectSubset<T, TeacherFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teacher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeacherFindFirstArgs>(args?: SelectSubset<T, TeacherFindFirstArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teacher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeacherFindFirstOrThrowArgs>(args?: SelectSubset<T, TeacherFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teachers
     * const teachers = await prisma.teacher.findMany()
     * 
     * // Get first 10 Teachers
     * const teachers = await prisma.teacher.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teacherWithIdOnly = await prisma.teacher.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeacherFindManyArgs>(args?: SelectSubset<T, TeacherFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Teacher.
     * @param {TeacherCreateArgs} args - Arguments to create a Teacher.
     * @example
     * // Create one Teacher
     * const Teacher = await prisma.teacher.create({
     *   data: {
     *     // ... data to create a Teacher
     *   }
     * })
     * 
     */
    create<T extends TeacherCreateArgs>(args: SelectSubset<T, TeacherCreateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teachers.
     * @param {TeacherCreateManyArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeacherCreateManyArgs>(args?: SelectSubset<T, TeacherCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teachers and returns the data saved in the database.
     * @param {TeacherCreateManyAndReturnArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teachers and only return the `id`
     * const teacherWithIdOnly = await prisma.teacher.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeacherCreateManyAndReturnArgs>(args?: SelectSubset<T, TeacherCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Teacher.
     * @param {TeacherDeleteArgs} args - Arguments to delete one Teacher.
     * @example
     * // Delete one Teacher
     * const Teacher = await prisma.teacher.delete({
     *   where: {
     *     // ... filter to delete one Teacher
     *   }
     * })
     * 
     */
    delete<T extends TeacherDeleteArgs>(args: SelectSubset<T, TeacherDeleteArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Teacher.
     * @param {TeacherUpdateArgs} args - Arguments to update one Teacher.
     * @example
     * // Update one Teacher
     * const teacher = await prisma.teacher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeacherUpdateArgs>(args: SelectSubset<T, TeacherUpdateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teachers.
     * @param {TeacherDeleteManyArgs} args - Arguments to filter Teachers to delete.
     * @example
     * // Delete a few Teachers
     * const { count } = await prisma.teacher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeacherDeleteManyArgs>(args?: SelectSubset<T, TeacherDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeacherUpdateManyArgs>(args: SelectSubset<T, TeacherUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers and returns the data updated in the database.
     * @param {TeacherUpdateManyAndReturnArgs} args - Arguments to update many Teachers.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teachers and only return the `id`
     * const teacherWithIdOnly = await prisma.teacher.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeacherUpdateManyAndReturnArgs>(args: SelectSubset<T, TeacherUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Teacher.
     * @param {TeacherUpsertArgs} args - Arguments to update or create a Teacher.
     * @example
     * // Update or create a Teacher
     * const teacher = await prisma.teacher.upsert({
     *   create: {
     *     // ... data to create a Teacher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teacher we want to update
     *   }
     * })
     */
    upsert<T extends TeacherUpsertArgs>(args: SelectSubset<T, TeacherUpsertArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCountArgs} args - Arguments to filter Teachers to count.
     * @example
     * // Count the number of Teachers
     * const count = await prisma.teacher.count({
     *   where: {
     *     // ... the filter for the Teachers we want to count
     *   }
     * })
    **/
    count<T extends TeacherCountArgs>(
      args?: Subset<T, TeacherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherAggregateArgs>(args: Subset<T, TeacherAggregateArgs>): Prisma.PrismaPromise<GetTeacherAggregateType<T>>

    /**
     * Group by Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherGroupByArgs['orderBy'] }
        : { orderBy?: TeacherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Teacher model
   */
  readonly fields: TeacherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Teacher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeacherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ClerkTeachers<T extends Teacher$ClerkTeachersArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$ClerkTeachersArgs<ExtArgs>>): Prisma__ClerkTeachersClient<$Result.GetResult<Prisma.$ClerkTeachersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    lessons<T extends Teacher$lessonsArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$lessonsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subjects<T extends Teacher$subjectsArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$subjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    class<T extends Teacher$classArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$classArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Teacher model
   */
  interface TeacherFieldRefs {
    readonly id: FieldRef<"Teacher", 'String'>
    readonly username: FieldRef<"Teacher", 'String'>
    readonly name: FieldRef<"Teacher", 'String'>
    readonly surname: FieldRef<"Teacher", 'String'>
    readonly email: FieldRef<"Teacher", 'String'>
    readonly phone: FieldRef<"Teacher", 'String'>
    readonly address: FieldRef<"Teacher", 'String'>
    readonly img: FieldRef<"Teacher", 'String'>
    readonly bloodType: FieldRef<"Teacher", 'String'>
    readonly gender: FieldRef<"Teacher", 'Gender'>
    readonly createdAt: FieldRef<"Teacher", 'DateTime'>
    readonly deletedAt: FieldRef<"Teacher", 'DateTime'>
    readonly supervisor: FieldRef<"Teacher", 'Boolean'>
    readonly dob: FieldRef<"Teacher", 'DateTime'>
    readonly classId: FieldRef<"Teacher", 'String'>
    readonly clerk_id: FieldRef<"Teacher", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Teacher findUnique
   */
  export type TeacherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findUniqueOrThrow
   */
  export type TeacherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findFirst
   */
  export type TeacherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findFirstOrThrow
   */
  export type TeacherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findMany
   */
  export type TeacherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teachers to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher create
   */
  export type TeacherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to create a Teacher.
     */
    data: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
  }

  /**
   * Teacher createMany
   */
  export type TeacherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Teacher createManyAndReturn
   */
  export type TeacherCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Teacher update
   */
  export type TeacherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to update a Teacher.
     */
    data: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
    /**
     * Choose, which Teacher to update.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher updateMany
   */
  export type TeacherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to update.
     */
    limit?: number
  }

  /**
   * Teacher updateManyAndReturn
   */
  export type TeacherUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to update.
     */
    limit?: number
  }

  /**
   * Teacher upsert
   */
  export type TeacherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The filter to search for the Teacher to update in case it exists.
     */
    where: TeacherWhereUniqueInput
    /**
     * In case the Teacher found by the `where` argument doesn't exist, create a new Teacher with this data.
     */
    create: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
    /**
     * In case the Teacher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
  }

  /**
   * Teacher delete
   */
  export type TeacherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter which Teacher to delete.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher deleteMany
   */
  export type TeacherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teachers to delete
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to delete.
     */
    limit?: number
  }

  /**
   * Teacher.ClerkTeachers
   */
  export type Teacher$ClerkTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkTeachers
     */
    select?: ClerkTeachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkTeachers
     */
    omit?: ClerkTeachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkTeachersInclude<ExtArgs> | null
    where?: ClerkTeachersWhereInput
  }

  /**
   * Teacher.lessons
   */
  export type Teacher$lessonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    where?: LessonWhereInput
    orderBy?: LessonOrderByWithRelationInput | LessonOrderByWithRelationInput[]
    cursor?: LessonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * Teacher.subjects
   */
  export type Teacher$subjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSubject
     */
    select?: TeacherSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSubject
     */
    omit?: TeacherSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherSubjectInclude<ExtArgs> | null
    where?: TeacherSubjectWhereInput
    orderBy?: TeacherSubjectOrderByWithRelationInput | TeacherSubjectOrderByWithRelationInput[]
    cursor?: TeacherSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherSubjectScalarFieldEnum | TeacherSubjectScalarFieldEnum[]
  }

  /**
   * Teacher.class
   */
  export type Teacher$classArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
  }

  /**
   * Teacher without action
   */
  export type TeacherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
  }


  /**
   * Model TeacherSubject
   */

  export type AggregateTeacherSubject = {
    _count: TeacherSubjectCountAggregateOutputType | null
    _avg: TeacherSubjectAvgAggregateOutputType | null
    _sum: TeacherSubjectSumAggregateOutputType | null
    _min: TeacherSubjectMinAggregateOutputType | null
    _max: TeacherSubjectMaxAggregateOutputType | null
  }

  export type TeacherSubjectAvgAggregateOutputType = {
    subjectId: number | null
  }

  export type TeacherSubjectSumAggregateOutputType = {
    subjectId: number | null
  }

  export type TeacherSubjectMinAggregateOutputType = {
    teacherId: string | null
    subjectId: number | null
  }

  export type TeacherSubjectMaxAggregateOutputType = {
    teacherId: string | null
    subjectId: number | null
  }

  export type TeacherSubjectCountAggregateOutputType = {
    teacherId: number
    subjectId: number
    _all: number
  }


  export type TeacherSubjectAvgAggregateInputType = {
    subjectId?: true
  }

  export type TeacherSubjectSumAggregateInputType = {
    subjectId?: true
  }

  export type TeacherSubjectMinAggregateInputType = {
    teacherId?: true
    subjectId?: true
  }

  export type TeacherSubjectMaxAggregateInputType = {
    teacherId?: true
    subjectId?: true
  }

  export type TeacherSubjectCountAggregateInputType = {
    teacherId?: true
    subjectId?: true
    _all?: true
  }

  export type TeacherSubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeacherSubject to aggregate.
     */
    where?: TeacherSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherSubjects to fetch.
     */
    orderBy?: TeacherSubjectOrderByWithRelationInput | TeacherSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeacherSubjects
    **/
    _count?: true | TeacherSubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeacherSubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeacherSubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherSubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherSubjectMaxAggregateInputType
  }

  export type GetTeacherSubjectAggregateType<T extends TeacherSubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacherSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacherSubject[P]>
      : GetScalarType<T[P], AggregateTeacherSubject[P]>
  }




  export type TeacherSubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherSubjectWhereInput
    orderBy?: TeacherSubjectOrderByWithAggregationInput | TeacherSubjectOrderByWithAggregationInput[]
    by: TeacherSubjectScalarFieldEnum[] | TeacherSubjectScalarFieldEnum
    having?: TeacherSubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherSubjectCountAggregateInputType | true
    _avg?: TeacherSubjectAvgAggregateInputType
    _sum?: TeacherSubjectSumAggregateInputType
    _min?: TeacherSubjectMinAggregateInputType
    _max?: TeacherSubjectMaxAggregateInputType
  }

  export type TeacherSubjectGroupByOutputType = {
    teacherId: string
    subjectId: number
    _count: TeacherSubjectCountAggregateOutputType | null
    _avg: TeacherSubjectAvgAggregateOutputType | null
    _sum: TeacherSubjectSumAggregateOutputType | null
    _min: TeacherSubjectMinAggregateOutputType | null
    _max: TeacherSubjectMaxAggregateOutputType | null
  }

  type GetTeacherSubjectGroupByPayload<T extends TeacherSubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeacherSubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherSubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherSubjectGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherSubjectGroupByOutputType[P]>
        }
      >
    >


  export type TeacherSubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teacherId?: boolean
    subjectId?: boolean
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
    Teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacherSubject"]>

  export type TeacherSubjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teacherId?: boolean
    subjectId?: boolean
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
    Teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacherSubject"]>

  export type TeacherSubjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teacherId?: boolean
    subjectId?: boolean
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
    Teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacherSubject"]>

  export type TeacherSubjectSelectScalar = {
    teacherId?: boolean
    subjectId?: boolean
  }

  export type TeacherSubjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"teacherId" | "subjectId", ExtArgs["result"]["teacherSubject"]>
  export type TeacherSubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
    Teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }
  export type TeacherSubjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
    Teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }
  export type TeacherSubjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
    Teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }

  export type $TeacherSubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeacherSubject"
    objects: {
      Subject: Prisma.$SubjectPayload<ExtArgs>
      Teacher: Prisma.$TeacherPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      teacherId: string
      subjectId: number
    }, ExtArgs["result"]["teacherSubject"]>
    composites: {}
  }

  type TeacherSubjectGetPayload<S extends boolean | null | undefined | TeacherSubjectDefaultArgs> = $Result.GetResult<Prisma.$TeacherSubjectPayload, S>

  type TeacherSubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeacherSubjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeacherSubjectCountAggregateInputType | true
    }

  export interface TeacherSubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeacherSubject'], meta: { name: 'TeacherSubject' } }
    /**
     * Find zero or one TeacherSubject that matches the filter.
     * @param {TeacherSubjectFindUniqueArgs} args - Arguments to find a TeacherSubject
     * @example
     * // Get one TeacherSubject
     * const teacherSubject = await prisma.teacherSubject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeacherSubjectFindUniqueArgs>(args: SelectSubset<T, TeacherSubjectFindUniqueArgs<ExtArgs>>): Prisma__TeacherSubjectClient<$Result.GetResult<Prisma.$TeacherSubjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeacherSubject that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeacherSubjectFindUniqueOrThrowArgs} args - Arguments to find a TeacherSubject
     * @example
     * // Get one TeacherSubject
     * const teacherSubject = await prisma.teacherSubject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeacherSubjectFindUniqueOrThrowArgs>(args: SelectSubset<T, TeacherSubjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeacherSubjectClient<$Result.GetResult<Prisma.$TeacherSubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeacherSubject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherSubjectFindFirstArgs} args - Arguments to find a TeacherSubject
     * @example
     * // Get one TeacherSubject
     * const teacherSubject = await prisma.teacherSubject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeacherSubjectFindFirstArgs>(args?: SelectSubset<T, TeacherSubjectFindFirstArgs<ExtArgs>>): Prisma__TeacherSubjectClient<$Result.GetResult<Prisma.$TeacherSubjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeacherSubject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherSubjectFindFirstOrThrowArgs} args - Arguments to find a TeacherSubject
     * @example
     * // Get one TeacherSubject
     * const teacherSubject = await prisma.teacherSubject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeacherSubjectFindFirstOrThrowArgs>(args?: SelectSubset<T, TeacherSubjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeacherSubjectClient<$Result.GetResult<Prisma.$TeacherSubjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeacherSubjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherSubjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeacherSubjects
     * const teacherSubjects = await prisma.teacherSubject.findMany()
     * 
     * // Get first 10 TeacherSubjects
     * const teacherSubjects = await prisma.teacherSubject.findMany({ take: 10 })
     * 
     * // Only select the `teacherId`
     * const teacherSubjectWithTeacherIdOnly = await prisma.teacherSubject.findMany({ select: { teacherId: true } })
     * 
     */
    findMany<T extends TeacherSubjectFindManyArgs>(args?: SelectSubset<T, TeacherSubjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeacherSubject.
     * @param {TeacherSubjectCreateArgs} args - Arguments to create a TeacherSubject.
     * @example
     * // Create one TeacherSubject
     * const TeacherSubject = await prisma.teacherSubject.create({
     *   data: {
     *     // ... data to create a TeacherSubject
     *   }
     * })
     * 
     */
    create<T extends TeacherSubjectCreateArgs>(args: SelectSubset<T, TeacherSubjectCreateArgs<ExtArgs>>): Prisma__TeacherSubjectClient<$Result.GetResult<Prisma.$TeacherSubjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeacherSubjects.
     * @param {TeacherSubjectCreateManyArgs} args - Arguments to create many TeacherSubjects.
     * @example
     * // Create many TeacherSubjects
     * const teacherSubject = await prisma.teacherSubject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeacherSubjectCreateManyArgs>(args?: SelectSubset<T, TeacherSubjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeacherSubjects and returns the data saved in the database.
     * @param {TeacherSubjectCreateManyAndReturnArgs} args - Arguments to create many TeacherSubjects.
     * @example
     * // Create many TeacherSubjects
     * const teacherSubject = await prisma.teacherSubject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeacherSubjects and only return the `teacherId`
     * const teacherSubjectWithTeacherIdOnly = await prisma.teacherSubject.createManyAndReturn({
     *   select: { teacherId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeacherSubjectCreateManyAndReturnArgs>(args?: SelectSubset<T, TeacherSubjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherSubjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeacherSubject.
     * @param {TeacherSubjectDeleteArgs} args - Arguments to delete one TeacherSubject.
     * @example
     * // Delete one TeacherSubject
     * const TeacherSubject = await prisma.teacherSubject.delete({
     *   where: {
     *     // ... filter to delete one TeacherSubject
     *   }
     * })
     * 
     */
    delete<T extends TeacherSubjectDeleteArgs>(args: SelectSubset<T, TeacherSubjectDeleteArgs<ExtArgs>>): Prisma__TeacherSubjectClient<$Result.GetResult<Prisma.$TeacherSubjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeacherSubject.
     * @param {TeacherSubjectUpdateArgs} args - Arguments to update one TeacherSubject.
     * @example
     * // Update one TeacherSubject
     * const teacherSubject = await prisma.teacherSubject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeacherSubjectUpdateArgs>(args: SelectSubset<T, TeacherSubjectUpdateArgs<ExtArgs>>): Prisma__TeacherSubjectClient<$Result.GetResult<Prisma.$TeacherSubjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeacherSubjects.
     * @param {TeacherSubjectDeleteManyArgs} args - Arguments to filter TeacherSubjects to delete.
     * @example
     * // Delete a few TeacherSubjects
     * const { count } = await prisma.teacherSubject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeacherSubjectDeleteManyArgs>(args?: SelectSubset<T, TeacherSubjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeacherSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherSubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeacherSubjects
     * const teacherSubject = await prisma.teacherSubject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeacherSubjectUpdateManyArgs>(args: SelectSubset<T, TeacherSubjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeacherSubjects and returns the data updated in the database.
     * @param {TeacherSubjectUpdateManyAndReturnArgs} args - Arguments to update many TeacherSubjects.
     * @example
     * // Update many TeacherSubjects
     * const teacherSubject = await prisma.teacherSubject.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeacherSubjects and only return the `teacherId`
     * const teacherSubjectWithTeacherIdOnly = await prisma.teacherSubject.updateManyAndReturn({
     *   select: { teacherId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeacherSubjectUpdateManyAndReturnArgs>(args: SelectSubset<T, TeacherSubjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherSubjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeacherSubject.
     * @param {TeacherSubjectUpsertArgs} args - Arguments to update or create a TeacherSubject.
     * @example
     * // Update or create a TeacherSubject
     * const teacherSubject = await prisma.teacherSubject.upsert({
     *   create: {
     *     // ... data to create a TeacherSubject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeacherSubject we want to update
     *   }
     * })
     */
    upsert<T extends TeacherSubjectUpsertArgs>(args: SelectSubset<T, TeacherSubjectUpsertArgs<ExtArgs>>): Prisma__TeacherSubjectClient<$Result.GetResult<Prisma.$TeacherSubjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeacherSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherSubjectCountArgs} args - Arguments to filter TeacherSubjects to count.
     * @example
     * // Count the number of TeacherSubjects
     * const count = await prisma.teacherSubject.count({
     *   where: {
     *     // ... the filter for the TeacherSubjects we want to count
     *   }
     * })
    **/
    count<T extends TeacherSubjectCountArgs>(
      args?: Subset<T, TeacherSubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherSubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeacherSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherSubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherSubjectAggregateArgs>(args: Subset<T, TeacherSubjectAggregateArgs>): Prisma.PrismaPromise<GetTeacherSubjectAggregateType<T>>

    /**
     * Group by TeacherSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherSubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherSubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherSubjectGroupByArgs['orderBy'] }
        : { orderBy?: TeacherSubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherSubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeacherSubject model
   */
  readonly fields: TeacherSubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeacherSubject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeacherSubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Teacher<T extends TeacherDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeacherDefaultArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeacherSubject model
   */
  interface TeacherSubjectFieldRefs {
    readonly teacherId: FieldRef<"TeacherSubject", 'String'>
    readonly subjectId: FieldRef<"TeacherSubject", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TeacherSubject findUnique
   */
  export type TeacherSubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSubject
     */
    select?: TeacherSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSubject
     */
    omit?: TeacherSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherSubjectInclude<ExtArgs> | null
    /**
     * Filter, which TeacherSubject to fetch.
     */
    where: TeacherSubjectWhereUniqueInput
  }

  /**
   * TeacherSubject findUniqueOrThrow
   */
  export type TeacherSubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSubject
     */
    select?: TeacherSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSubject
     */
    omit?: TeacherSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherSubjectInclude<ExtArgs> | null
    /**
     * Filter, which TeacherSubject to fetch.
     */
    where: TeacherSubjectWhereUniqueInput
  }

  /**
   * TeacherSubject findFirst
   */
  export type TeacherSubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSubject
     */
    select?: TeacherSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSubject
     */
    omit?: TeacherSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherSubjectInclude<ExtArgs> | null
    /**
     * Filter, which TeacherSubject to fetch.
     */
    where?: TeacherSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherSubjects to fetch.
     */
    orderBy?: TeacherSubjectOrderByWithRelationInput | TeacherSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeacherSubjects.
     */
    cursor?: TeacherSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeacherSubjects.
     */
    distinct?: TeacherSubjectScalarFieldEnum | TeacherSubjectScalarFieldEnum[]
  }

  /**
   * TeacherSubject findFirstOrThrow
   */
  export type TeacherSubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSubject
     */
    select?: TeacherSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSubject
     */
    omit?: TeacherSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherSubjectInclude<ExtArgs> | null
    /**
     * Filter, which TeacherSubject to fetch.
     */
    where?: TeacherSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherSubjects to fetch.
     */
    orderBy?: TeacherSubjectOrderByWithRelationInput | TeacherSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeacherSubjects.
     */
    cursor?: TeacherSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeacherSubjects.
     */
    distinct?: TeacherSubjectScalarFieldEnum | TeacherSubjectScalarFieldEnum[]
  }

  /**
   * TeacherSubject findMany
   */
  export type TeacherSubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSubject
     */
    select?: TeacherSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSubject
     */
    omit?: TeacherSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherSubjectInclude<ExtArgs> | null
    /**
     * Filter, which TeacherSubjects to fetch.
     */
    where?: TeacherSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherSubjects to fetch.
     */
    orderBy?: TeacherSubjectOrderByWithRelationInput | TeacherSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeacherSubjects.
     */
    cursor?: TeacherSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherSubjects.
     */
    skip?: number
    distinct?: TeacherSubjectScalarFieldEnum | TeacherSubjectScalarFieldEnum[]
  }

  /**
   * TeacherSubject create
   */
  export type TeacherSubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSubject
     */
    select?: TeacherSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSubject
     */
    omit?: TeacherSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherSubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a TeacherSubject.
     */
    data: XOR<TeacherSubjectCreateInput, TeacherSubjectUncheckedCreateInput>
  }

  /**
   * TeacherSubject createMany
   */
  export type TeacherSubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeacherSubjects.
     */
    data: TeacherSubjectCreateManyInput | TeacherSubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeacherSubject createManyAndReturn
   */
  export type TeacherSubjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSubject
     */
    select?: TeacherSubjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSubject
     */
    omit?: TeacherSubjectOmit<ExtArgs> | null
    /**
     * The data used to create many TeacherSubjects.
     */
    data: TeacherSubjectCreateManyInput | TeacherSubjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherSubjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeacherSubject update
   */
  export type TeacherSubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSubject
     */
    select?: TeacherSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSubject
     */
    omit?: TeacherSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherSubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a TeacherSubject.
     */
    data: XOR<TeacherSubjectUpdateInput, TeacherSubjectUncheckedUpdateInput>
    /**
     * Choose, which TeacherSubject to update.
     */
    where: TeacherSubjectWhereUniqueInput
  }

  /**
   * TeacherSubject updateMany
   */
  export type TeacherSubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeacherSubjects.
     */
    data: XOR<TeacherSubjectUpdateManyMutationInput, TeacherSubjectUncheckedUpdateManyInput>
    /**
     * Filter which TeacherSubjects to update
     */
    where?: TeacherSubjectWhereInput
    /**
     * Limit how many TeacherSubjects to update.
     */
    limit?: number
  }

  /**
   * TeacherSubject updateManyAndReturn
   */
  export type TeacherSubjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSubject
     */
    select?: TeacherSubjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSubject
     */
    omit?: TeacherSubjectOmit<ExtArgs> | null
    /**
     * The data used to update TeacherSubjects.
     */
    data: XOR<TeacherSubjectUpdateManyMutationInput, TeacherSubjectUncheckedUpdateManyInput>
    /**
     * Filter which TeacherSubjects to update
     */
    where?: TeacherSubjectWhereInput
    /**
     * Limit how many TeacherSubjects to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherSubjectIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeacherSubject upsert
   */
  export type TeacherSubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSubject
     */
    select?: TeacherSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSubject
     */
    omit?: TeacherSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherSubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the TeacherSubject to update in case it exists.
     */
    where: TeacherSubjectWhereUniqueInput
    /**
     * In case the TeacherSubject found by the `where` argument doesn't exist, create a new TeacherSubject with this data.
     */
    create: XOR<TeacherSubjectCreateInput, TeacherSubjectUncheckedCreateInput>
    /**
     * In case the TeacherSubject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherSubjectUpdateInput, TeacherSubjectUncheckedUpdateInput>
  }

  /**
   * TeacherSubject delete
   */
  export type TeacherSubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSubject
     */
    select?: TeacherSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSubject
     */
    omit?: TeacherSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherSubjectInclude<ExtArgs> | null
    /**
     * Filter which TeacherSubject to delete.
     */
    where: TeacherSubjectWhereUniqueInput
  }

  /**
   * TeacherSubject deleteMany
   */
  export type TeacherSubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeacherSubjects to delete
     */
    where?: TeacherSubjectWhereInput
    /**
     * Limit how many TeacherSubjects to delete.
     */
    limit?: number
  }

  /**
   * TeacherSubject without action
   */
  export type TeacherSubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherSubject
     */
    select?: TeacherSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherSubject
     */
    omit?: TeacherSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherSubjectInclude<ExtArgs> | null
  }


  /**
   * Model ClerkTeachers
   */

  export type AggregateClerkTeachers = {
    _count: ClerkTeachersCountAggregateOutputType | null
    _min: ClerkTeachersMinAggregateOutputType | null
    _max: ClerkTeachersMaxAggregateOutputType | null
  }

  export type ClerkTeachersMinAggregateOutputType = {
    clerk_id: string | null
    user_id: string | null
    username: string | null
    password: string | null
    full_name: string | null
    role: string | null
    teacherId: string | null
  }

  export type ClerkTeachersMaxAggregateOutputType = {
    clerk_id: string | null
    user_id: string | null
    username: string | null
    password: string | null
    full_name: string | null
    role: string | null
    teacherId: string | null
  }

  export type ClerkTeachersCountAggregateOutputType = {
    clerk_id: number
    user_id: number
    username: number
    password: number
    full_name: number
    role: number
    teacherId: number
    _all: number
  }


  export type ClerkTeachersMinAggregateInputType = {
    clerk_id?: true
    user_id?: true
    username?: true
    password?: true
    full_name?: true
    role?: true
    teacherId?: true
  }

  export type ClerkTeachersMaxAggregateInputType = {
    clerk_id?: true
    user_id?: true
    username?: true
    password?: true
    full_name?: true
    role?: true
    teacherId?: true
  }

  export type ClerkTeachersCountAggregateInputType = {
    clerk_id?: true
    user_id?: true
    username?: true
    password?: true
    full_name?: true
    role?: true
    teacherId?: true
    _all?: true
  }

  export type ClerkTeachersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClerkTeachers to aggregate.
     */
    where?: ClerkTeachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClerkTeachers to fetch.
     */
    orderBy?: ClerkTeachersOrderByWithRelationInput | ClerkTeachersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClerkTeachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClerkTeachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClerkTeachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClerkTeachers
    **/
    _count?: true | ClerkTeachersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClerkTeachersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClerkTeachersMaxAggregateInputType
  }

  export type GetClerkTeachersAggregateType<T extends ClerkTeachersAggregateArgs> = {
        [P in keyof T & keyof AggregateClerkTeachers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClerkTeachers[P]>
      : GetScalarType<T[P], AggregateClerkTeachers[P]>
  }




  export type ClerkTeachersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClerkTeachersWhereInput
    orderBy?: ClerkTeachersOrderByWithAggregationInput | ClerkTeachersOrderByWithAggregationInput[]
    by: ClerkTeachersScalarFieldEnum[] | ClerkTeachersScalarFieldEnum
    having?: ClerkTeachersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClerkTeachersCountAggregateInputType | true
    _min?: ClerkTeachersMinAggregateInputType
    _max?: ClerkTeachersMaxAggregateInputType
  }

  export type ClerkTeachersGroupByOutputType = {
    clerk_id: string
    user_id: string | null
    username: string
    password: string
    full_name: string
    role: string
    teacherId: string | null
    _count: ClerkTeachersCountAggregateOutputType | null
    _min: ClerkTeachersMinAggregateOutputType | null
    _max: ClerkTeachersMaxAggregateOutputType | null
  }

  type GetClerkTeachersGroupByPayload<T extends ClerkTeachersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClerkTeachersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClerkTeachersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClerkTeachersGroupByOutputType[P]>
            : GetScalarType<T[P], ClerkTeachersGroupByOutputType[P]>
        }
      >
    >


  export type ClerkTeachersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    clerk_id?: boolean
    user_id?: boolean
    username?: boolean
    password?: boolean
    full_name?: boolean
    role?: boolean
    teacherId?: boolean
    teacher?: boolean | ClerkTeachers$teacherArgs<ExtArgs>
  }, ExtArgs["result"]["clerkTeachers"]>

  export type ClerkTeachersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    clerk_id?: boolean
    user_id?: boolean
    username?: boolean
    password?: boolean
    full_name?: boolean
    role?: boolean
    teacherId?: boolean
    teacher?: boolean | ClerkTeachers$teacherArgs<ExtArgs>
  }, ExtArgs["result"]["clerkTeachers"]>

  export type ClerkTeachersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    clerk_id?: boolean
    user_id?: boolean
    username?: boolean
    password?: boolean
    full_name?: boolean
    role?: boolean
    teacherId?: boolean
    teacher?: boolean | ClerkTeachers$teacherArgs<ExtArgs>
  }, ExtArgs["result"]["clerkTeachers"]>

  export type ClerkTeachersSelectScalar = {
    clerk_id?: boolean
    user_id?: boolean
    username?: boolean
    password?: boolean
    full_name?: boolean
    role?: boolean
    teacherId?: boolean
  }

  export type ClerkTeachersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"clerk_id" | "user_id" | "username" | "password" | "full_name" | "role" | "teacherId", ExtArgs["result"]["clerkTeachers"]>
  export type ClerkTeachersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | ClerkTeachers$teacherArgs<ExtArgs>
  }
  export type ClerkTeachersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | ClerkTeachers$teacherArgs<ExtArgs>
  }
  export type ClerkTeachersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | ClerkTeachers$teacherArgs<ExtArgs>
  }

  export type $ClerkTeachersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClerkTeachers"
    objects: {
      teacher: Prisma.$TeacherPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      clerk_id: string
      user_id: string | null
      username: string
      password: string
      full_name: string
      role: string
      teacherId: string | null
    }, ExtArgs["result"]["clerkTeachers"]>
    composites: {}
  }

  type ClerkTeachersGetPayload<S extends boolean | null | undefined | ClerkTeachersDefaultArgs> = $Result.GetResult<Prisma.$ClerkTeachersPayload, S>

  type ClerkTeachersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClerkTeachersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClerkTeachersCountAggregateInputType | true
    }

  export interface ClerkTeachersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClerkTeachers'], meta: { name: 'ClerkTeachers' } }
    /**
     * Find zero or one ClerkTeachers that matches the filter.
     * @param {ClerkTeachersFindUniqueArgs} args - Arguments to find a ClerkTeachers
     * @example
     * // Get one ClerkTeachers
     * const clerkTeachers = await prisma.clerkTeachers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClerkTeachersFindUniqueArgs>(args: SelectSubset<T, ClerkTeachersFindUniqueArgs<ExtArgs>>): Prisma__ClerkTeachersClient<$Result.GetResult<Prisma.$ClerkTeachersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClerkTeachers that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClerkTeachersFindUniqueOrThrowArgs} args - Arguments to find a ClerkTeachers
     * @example
     * // Get one ClerkTeachers
     * const clerkTeachers = await prisma.clerkTeachers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClerkTeachersFindUniqueOrThrowArgs>(args: SelectSubset<T, ClerkTeachersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClerkTeachersClient<$Result.GetResult<Prisma.$ClerkTeachersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClerkTeachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClerkTeachersFindFirstArgs} args - Arguments to find a ClerkTeachers
     * @example
     * // Get one ClerkTeachers
     * const clerkTeachers = await prisma.clerkTeachers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClerkTeachersFindFirstArgs>(args?: SelectSubset<T, ClerkTeachersFindFirstArgs<ExtArgs>>): Prisma__ClerkTeachersClient<$Result.GetResult<Prisma.$ClerkTeachersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClerkTeachers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClerkTeachersFindFirstOrThrowArgs} args - Arguments to find a ClerkTeachers
     * @example
     * // Get one ClerkTeachers
     * const clerkTeachers = await prisma.clerkTeachers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClerkTeachersFindFirstOrThrowArgs>(args?: SelectSubset<T, ClerkTeachersFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClerkTeachersClient<$Result.GetResult<Prisma.$ClerkTeachersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClerkTeachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClerkTeachersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClerkTeachers
     * const clerkTeachers = await prisma.clerkTeachers.findMany()
     * 
     * // Get first 10 ClerkTeachers
     * const clerkTeachers = await prisma.clerkTeachers.findMany({ take: 10 })
     * 
     * // Only select the `clerk_id`
     * const clerkTeachersWithClerk_idOnly = await prisma.clerkTeachers.findMany({ select: { clerk_id: true } })
     * 
     */
    findMany<T extends ClerkTeachersFindManyArgs>(args?: SelectSubset<T, ClerkTeachersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClerkTeachersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClerkTeachers.
     * @param {ClerkTeachersCreateArgs} args - Arguments to create a ClerkTeachers.
     * @example
     * // Create one ClerkTeachers
     * const ClerkTeachers = await prisma.clerkTeachers.create({
     *   data: {
     *     // ... data to create a ClerkTeachers
     *   }
     * })
     * 
     */
    create<T extends ClerkTeachersCreateArgs>(args: SelectSubset<T, ClerkTeachersCreateArgs<ExtArgs>>): Prisma__ClerkTeachersClient<$Result.GetResult<Prisma.$ClerkTeachersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClerkTeachers.
     * @param {ClerkTeachersCreateManyArgs} args - Arguments to create many ClerkTeachers.
     * @example
     * // Create many ClerkTeachers
     * const clerkTeachers = await prisma.clerkTeachers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClerkTeachersCreateManyArgs>(args?: SelectSubset<T, ClerkTeachersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClerkTeachers and returns the data saved in the database.
     * @param {ClerkTeachersCreateManyAndReturnArgs} args - Arguments to create many ClerkTeachers.
     * @example
     * // Create many ClerkTeachers
     * const clerkTeachers = await prisma.clerkTeachers.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClerkTeachers and only return the `clerk_id`
     * const clerkTeachersWithClerk_idOnly = await prisma.clerkTeachers.createManyAndReturn({
     *   select: { clerk_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClerkTeachersCreateManyAndReturnArgs>(args?: SelectSubset<T, ClerkTeachersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClerkTeachersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ClerkTeachers.
     * @param {ClerkTeachersDeleteArgs} args - Arguments to delete one ClerkTeachers.
     * @example
     * // Delete one ClerkTeachers
     * const ClerkTeachers = await prisma.clerkTeachers.delete({
     *   where: {
     *     // ... filter to delete one ClerkTeachers
     *   }
     * })
     * 
     */
    delete<T extends ClerkTeachersDeleteArgs>(args: SelectSubset<T, ClerkTeachersDeleteArgs<ExtArgs>>): Prisma__ClerkTeachersClient<$Result.GetResult<Prisma.$ClerkTeachersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClerkTeachers.
     * @param {ClerkTeachersUpdateArgs} args - Arguments to update one ClerkTeachers.
     * @example
     * // Update one ClerkTeachers
     * const clerkTeachers = await prisma.clerkTeachers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClerkTeachersUpdateArgs>(args: SelectSubset<T, ClerkTeachersUpdateArgs<ExtArgs>>): Prisma__ClerkTeachersClient<$Result.GetResult<Prisma.$ClerkTeachersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClerkTeachers.
     * @param {ClerkTeachersDeleteManyArgs} args - Arguments to filter ClerkTeachers to delete.
     * @example
     * // Delete a few ClerkTeachers
     * const { count } = await prisma.clerkTeachers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClerkTeachersDeleteManyArgs>(args?: SelectSubset<T, ClerkTeachersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClerkTeachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClerkTeachersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClerkTeachers
     * const clerkTeachers = await prisma.clerkTeachers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClerkTeachersUpdateManyArgs>(args: SelectSubset<T, ClerkTeachersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClerkTeachers and returns the data updated in the database.
     * @param {ClerkTeachersUpdateManyAndReturnArgs} args - Arguments to update many ClerkTeachers.
     * @example
     * // Update many ClerkTeachers
     * const clerkTeachers = await prisma.clerkTeachers.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ClerkTeachers and only return the `clerk_id`
     * const clerkTeachersWithClerk_idOnly = await prisma.clerkTeachers.updateManyAndReturn({
     *   select: { clerk_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClerkTeachersUpdateManyAndReturnArgs>(args: SelectSubset<T, ClerkTeachersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClerkTeachersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ClerkTeachers.
     * @param {ClerkTeachersUpsertArgs} args - Arguments to update or create a ClerkTeachers.
     * @example
     * // Update or create a ClerkTeachers
     * const clerkTeachers = await prisma.clerkTeachers.upsert({
     *   create: {
     *     // ... data to create a ClerkTeachers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClerkTeachers we want to update
     *   }
     * })
     */
    upsert<T extends ClerkTeachersUpsertArgs>(args: SelectSubset<T, ClerkTeachersUpsertArgs<ExtArgs>>): Prisma__ClerkTeachersClient<$Result.GetResult<Prisma.$ClerkTeachersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClerkTeachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClerkTeachersCountArgs} args - Arguments to filter ClerkTeachers to count.
     * @example
     * // Count the number of ClerkTeachers
     * const count = await prisma.clerkTeachers.count({
     *   where: {
     *     // ... the filter for the ClerkTeachers we want to count
     *   }
     * })
    **/
    count<T extends ClerkTeachersCountArgs>(
      args?: Subset<T, ClerkTeachersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClerkTeachersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClerkTeachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClerkTeachersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClerkTeachersAggregateArgs>(args: Subset<T, ClerkTeachersAggregateArgs>): Prisma.PrismaPromise<GetClerkTeachersAggregateType<T>>

    /**
     * Group by ClerkTeachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClerkTeachersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClerkTeachersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClerkTeachersGroupByArgs['orderBy'] }
        : { orderBy?: ClerkTeachersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClerkTeachersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClerkTeachersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClerkTeachers model
   */
  readonly fields: ClerkTeachersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClerkTeachers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClerkTeachersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teacher<T extends ClerkTeachers$teacherArgs<ExtArgs> = {}>(args?: Subset<T, ClerkTeachers$teacherArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClerkTeachers model
   */
  interface ClerkTeachersFieldRefs {
    readonly clerk_id: FieldRef<"ClerkTeachers", 'String'>
    readonly user_id: FieldRef<"ClerkTeachers", 'String'>
    readonly username: FieldRef<"ClerkTeachers", 'String'>
    readonly password: FieldRef<"ClerkTeachers", 'String'>
    readonly full_name: FieldRef<"ClerkTeachers", 'String'>
    readonly role: FieldRef<"ClerkTeachers", 'String'>
    readonly teacherId: FieldRef<"ClerkTeachers", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ClerkTeachers findUnique
   */
  export type ClerkTeachersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkTeachers
     */
    select?: ClerkTeachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkTeachers
     */
    omit?: ClerkTeachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkTeachersInclude<ExtArgs> | null
    /**
     * Filter, which ClerkTeachers to fetch.
     */
    where: ClerkTeachersWhereUniqueInput
  }

  /**
   * ClerkTeachers findUniqueOrThrow
   */
  export type ClerkTeachersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkTeachers
     */
    select?: ClerkTeachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkTeachers
     */
    omit?: ClerkTeachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkTeachersInclude<ExtArgs> | null
    /**
     * Filter, which ClerkTeachers to fetch.
     */
    where: ClerkTeachersWhereUniqueInput
  }

  /**
   * ClerkTeachers findFirst
   */
  export type ClerkTeachersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkTeachers
     */
    select?: ClerkTeachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkTeachers
     */
    omit?: ClerkTeachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkTeachersInclude<ExtArgs> | null
    /**
     * Filter, which ClerkTeachers to fetch.
     */
    where?: ClerkTeachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClerkTeachers to fetch.
     */
    orderBy?: ClerkTeachersOrderByWithRelationInput | ClerkTeachersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClerkTeachers.
     */
    cursor?: ClerkTeachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClerkTeachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClerkTeachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClerkTeachers.
     */
    distinct?: ClerkTeachersScalarFieldEnum | ClerkTeachersScalarFieldEnum[]
  }

  /**
   * ClerkTeachers findFirstOrThrow
   */
  export type ClerkTeachersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkTeachers
     */
    select?: ClerkTeachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkTeachers
     */
    omit?: ClerkTeachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkTeachersInclude<ExtArgs> | null
    /**
     * Filter, which ClerkTeachers to fetch.
     */
    where?: ClerkTeachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClerkTeachers to fetch.
     */
    orderBy?: ClerkTeachersOrderByWithRelationInput | ClerkTeachersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClerkTeachers.
     */
    cursor?: ClerkTeachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClerkTeachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClerkTeachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClerkTeachers.
     */
    distinct?: ClerkTeachersScalarFieldEnum | ClerkTeachersScalarFieldEnum[]
  }

  /**
   * ClerkTeachers findMany
   */
  export type ClerkTeachersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkTeachers
     */
    select?: ClerkTeachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkTeachers
     */
    omit?: ClerkTeachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkTeachersInclude<ExtArgs> | null
    /**
     * Filter, which ClerkTeachers to fetch.
     */
    where?: ClerkTeachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClerkTeachers to fetch.
     */
    orderBy?: ClerkTeachersOrderByWithRelationInput | ClerkTeachersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClerkTeachers.
     */
    cursor?: ClerkTeachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClerkTeachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClerkTeachers.
     */
    skip?: number
    distinct?: ClerkTeachersScalarFieldEnum | ClerkTeachersScalarFieldEnum[]
  }

  /**
   * ClerkTeachers create
   */
  export type ClerkTeachersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkTeachers
     */
    select?: ClerkTeachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkTeachers
     */
    omit?: ClerkTeachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkTeachersInclude<ExtArgs> | null
    /**
     * The data needed to create a ClerkTeachers.
     */
    data: XOR<ClerkTeachersCreateInput, ClerkTeachersUncheckedCreateInput>
  }

  /**
   * ClerkTeachers createMany
   */
  export type ClerkTeachersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClerkTeachers.
     */
    data: ClerkTeachersCreateManyInput | ClerkTeachersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClerkTeachers createManyAndReturn
   */
  export type ClerkTeachersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkTeachers
     */
    select?: ClerkTeachersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkTeachers
     */
    omit?: ClerkTeachersOmit<ExtArgs> | null
    /**
     * The data used to create many ClerkTeachers.
     */
    data: ClerkTeachersCreateManyInput | ClerkTeachersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkTeachersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClerkTeachers update
   */
  export type ClerkTeachersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkTeachers
     */
    select?: ClerkTeachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkTeachers
     */
    omit?: ClerkTeachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkTeachersInclude<ExtArgs> | null
    /**
     * The data needed to update a ClerkTeachers.
     */
    data: XOR<ClerkTeachersUpdateInput, ClerkTeachersUncheckedUpdateInput>
    /**
     * Choose, which ClerkTeachers to update.
     */
    where: ClerkTeachersWhereUniqueInput
  }

  /**
   * ClerkTeachers updateMany
   */
  export type ClerkTeachersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClerkTeachers.
     */
    data: XOR<ClerkTeachersUpdateManyMutationInput, ClerkTeachersUncheckedUpdateManyInput>
    /**
     * Filter which ClerkTeachers to update
     */
    where?: ClerkTeachersWhereInput
    /**
     * Limit how many ClerkTeachers to update.
     */
    limit?: number
  }

  /**
   * ClerkTeachers updateManyAndReturn
   */
  export type ClerkTeachersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkTeachers
     */
    select?: ClerkTeachersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkTeachers
     */
    omit?: ClerkTeachersOmit<ExtArgs> | null
    /**
     * The data used to update ClerkTeachers.
     */
    data: XOR<ClerkTeachersUpdateManyMutationInput, ClerkTeachersUncheckedUpdateManyInput>
    /**
     * Filter which ClerkTeachers to update
     */
    where?: ClerkTeachersWhereInput
    /**
     * Limit how many ClerkTeachers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkTeachersIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClerkTeachers upsert
   */
  export type ClerkTeachersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkTeachers
     */
    select?: ClerkTeachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkTeachers
     */
    omit?: ClerkTeachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkTeachersInclude<ExtArgs> | null
    /**
     * The filter to search for the ClerkTeachers to update in case it exists.
     */
    where: ClerkTeachersWhereUniqueInput
    /**
     * In case the ClerkTeachers found by the `where` argument doesn't exist, create a new ClerkTeachers with this data.
     */
    create: XOR<ClerkTeachersCreateInput, ClerkTeachersUncheckedCreateInput>
    /**
     * In case the ClerkTeachers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClerkTeachersUpdateInput, ClerkTeachersUncheckedUpdateInput>
  }

  /**
   * ClerkTeachers delete
   */
  export type ClerkTeachersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkTeachers
     */
    select?: ClerkTeachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkTeachers
     */
    omit?: ClerkTeachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkTeachersInclude<ExtArgs> | null
    /**
     * Filter which ClerkTeachers to delete.
     */
    where: ClerkTeachersWhereUniqueInput
  }

  /**
   * ClerkTeachers deleteMany
   */
  export type ClerkTeachersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClerkTeachers to delete
     */
    where?: ClerkTeachersWhereInput
    /**
     * Limit how many ClerkTeachers to delete.
     */
    limit?: number
  }

  /**
   * ClerkTeachers.teacher
   */
  export type ClerkTeachers$teacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
  }

  /**
   * ClerkTeachers without action
   */
  export type ClerkTeachersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClerkTeachers
     */
    select?: ClerkTeachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClerkTeachers
     */
    omit?: ClerkTeachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClerkTeachersInclude<ExtArgs> | null
  }


  /**
   * Model FeeStructure
   */

  export type AggregateFeeStructure = {
    _count: FeeStructureCountAggregateOutputType | null
    _avg: FeeStructureAvgAggregateOutputType | null
    _sum: FeeStructureSumAggregateOutputType | null
    _min: FeeStructureMinAggregateOutputType | null
    _max: FeeStructureMaxAggregateOutputType | null
  }

  export type FeeStructureAvgAggregateOutputType = {
    id: number | null
    gradeId: number | null
    termFees: number | null
    abacusFees: number | null
  }

  export type FeeStructureSumAggregateOutputType = {
    id: number | null
    gradeId: number | null
    termFees: number | null
    abacusFees: number | null
  }

  export type FeeStructureMinAggregateOutputType = {
    id: number | null
    gradeId: number | null
    startDate: Date | null
    dueDate: Date | null
    termFees: number | null
    abacusFees: number | null
    term: $Enums.Term | null
    academicYear: $Enums.AcademicYear | null
  }

  export type FeeStructureMaxAggregateOutputType = {
    id: number | null
    gradeId: number | null
    startDate: Date | null
    dueDate: Date | null
    termFees: number | null
    abacusFees: number | null
    term: $Enums.Term | null
    academicYear: $Enums.AcademicYear | null
  }

  export type FeeStructureCountAggregateOutputType = {
    id: number
    gradeId: number
    startDate: number
    dueDate: number
    termFees: number
    abacusFees: number
    term: number
    academicYear: number
    _all: number
  }


  export type FeeStructureAvgAggregateInputType = {
    id?: true
    gradeId?: true
    termFees?: true
    abacusFees?: true
  }

  export type FeeStructureSumAggregateInputType = {
    id?: true
    gradeId?: true
    termFees?: true
    abacusFees?: true
  }

  export type FeeStructureMinAggregateInputType = {
    id?: true
    gradeId?: true
    startDate?: true
    dueDate?: true
    termFees?: true
    abacusFees?: true
    term?: true
    academicYear?: true
  }

  export type FeeStructureMaxAggregateInputType = {
    id?: true
    gradeId?: true
    startDate?: true
    dueDate?: true
    termFees?: true
    abacusFees?: true
    term?: true
    academicYear?: true
  }

  export type FeeStructureCountAggregateInputType = {
    id?: true
    gradeId?: true
    startDate?: true
    dueDate?: true
    termFees?: true
    abacusFees?: true
    term?: true
    academicYear?: true
    _all?: true
  }

  export type FeeStructureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeeStructure to aggregate.
     */
    where?: FeeStructureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeStructures to fetch.
     */
    orderBy?: FeeStructureOrderByWithRelationInput | FeeStructureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeeStructureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeStructures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeStructures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeeStructures
    **/
    _count?: true | FeeStructureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeeStructureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeeStructureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeeStructureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeeStructureMaxAggregateInputType
  }

  export type GetFeeStructureAggregateType<T extends FeeStructureAggregateArgs> = {
        [P in keyof T & keyof AggregateFeeStructure]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeeStructure[P]>
      : GetScalarType<T[P], AggregateFeeStructure[P]>
  }




  export type FeeStructureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeeStructureWhereInput
    orderBy?: FeeStructureOrderByWithAggregationInput | FeeStructureOrderByWithAggregationInput[]
    by: FeeStructureScalarFieldEnum[] | FeeStructureScalarFieldEnum
    having?: FeeStructureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeeStructureCountAggregateInputType | true
    _avg?: FeeStructureAvgAggregateInputType
    _sum?: FeeStructureSumAggregateInputType
    _min?: FeeStructureMinAggregateInputType
    _max?: FeeStructureMaxAggregateInputType
  }

  export type FeeStructureGroupByOutputType = {
    id: number
    gradeId: number
    startDate: Date
    dueDate: Date
    termFees: number
    abacusFees: number | null
    term: $Enums.Term
    academicYear: $Enums.AcademicYear
    _count: FeeStructureCountAggregateOutputType | null
    _avg: FeeStructureAvgAggregateOutputType | null
    _sum: FeeStructureSumAggregateOutputType | null
    _min: FeeStructureMinAggregateOutputType | null
    _max: FeeStructureMaxAggregateOutputType | null
  }

  type GetFeeStructureGroupByPayload<T extends FeeStructureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeeStructureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeeStructureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeeStructureGroupByOutputType[P]>
            : GetScalarType<T[P], FeeStructureGroupByOutputType[P]>
        }
      >
    >


  export type FeeStructureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gradeId?: boolean
    startDate?: boolean
    dueDate?: boolean
    termFees?: boolean
    abacusFees?: boolean
    term?: boolean
    academicYear?: boolean
    grade?: boolean | GradeDefaultArgs<ExtArgs>
    studentFees?: boolean | FeeStructure$studentFeesArgs<ExtArgs>
    _count?: boolean | FeeStructureCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feeStructure"]>

  export type FeeStructureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gradeId?: boolean
    startDate?: boolean
    dueDate?: boolean
    termFees?: boolean
    abacusFees?: boolean
    term?: boolean
    academicYear?: boolean
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feeStructure"]>

  export type FeeStructureSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gradeId?: boolean
    startDate?: boolean
    dueDate?: boolean
    termFees?: boolean
    abacusFees?: boolean
    term?: boolean
    academicYear?: boolean
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feeStructure"]>

  export type FeeStructureSelectScalar = {
    id?: boolean
    gradeId?: boolean
    startDate?: boolean
    dueDate?: boolean
    termFees?: boolean
    abacusFees?: boolean
    term?: boolean
    academicYear?: boolean
  }

  export type FeeStructureOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "gradeId" | "startDate" | "dueDate" | "termFees" | "abacusFees" | "term" | "academicYear", ExtArgs["result"]["feeStructure"]>
  export type FeeStructureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grade?: boolean | GradeDefaultArgs<ExtArgs>
    studentFees?: boolean | FeeStructure$studentFeesArgs<ExtArgs>
    _count?: boolean | FeeStructureCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FeeStructureIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }
  export type FeeStructureIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }

  export type $FeeStructurePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeeStructure"
    objects: {
      grade: Prisma.$GradePayload<ExtArgs>
      studentFees: Prisma.$StudentFeesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      gradeId: number
      startDate: Date
      dueDate: Date
      termFees: number
      abacusFees: number | null
      term: $Enums.Term
      academicYear: $Enums.AcademicYear
    }, ExtArgs["result"]["feeStructure"]>
    composites: {}
  }

  type FeeStructureGetPayload<S extends boolean | null | undefined | FeeStructureDefaultArgs> = $Result.GetResult<Prisma.$FeeStructurePayload, S>

  type FeeStructureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeeStructureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeeStructureCountAggregateInputType | true
    }

  export interface FeeStructureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeeStructure'], meta: { name: 'FeeStructure' } }
    /**
     * Find zero or one FeeStructure that matches the filter.
     * @param {FeeStructureFindUniqueArgs} args - Arguments to find a FeeStructure
     * @example
     * // Get one FeeStructure
     * const feeStructure = await prisma.feeStructure.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeeStructureFindUniqueArgs>(args: SelectSubset<T, FeeStructureFindUniqueArgs<ExtArgs>>): Prisma__FeeStructureClient<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FeeStructure that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeeStructureFindUniqueOrThrowArgs} args - Arguments to find a FeeStructure
     * @example
     * // Get one FeeStructure
     * const feeStructure = await prisma.feeStructure.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeeStructureFindUniqueOrThrowArgs>(args: SelectSubset<T, FeeStructureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeeStructureClient<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeeStructure that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeStructureFindFirstArgs} args - Arguments to find a FeeStructure
     * @example
     * // Get one FeeStructure
     * const feeStructure = await prisma.feeStructure.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeeStructureFindFirstArgs>(args?: SelectSubset<T, FeeStructureFindFirstArgs<ExtArgs>>): Prisma__FeeStructureClient<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeeStructure that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeStructureFindFirstOrThrowArgs} args - Arguments to find a FeeStructure
     * @example
     * // Get one FeeStructure
     * const feeStructure = await prisma.feeStructure.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeeStructureFindFirstOrThrowArgs>(args?: SelectSubset<T, FeeStructureFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeeStructureClient<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FeeStructures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeStructureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeeStructures
     * const feeStructures = await prisma.feeStructure.findMany()
     * 
     * // Get first 10 FeeStructures
     * const feeStructures = await prisma.feeStructure.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feeStructureWithIdOnly = await prisma.feeStructure.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeeStructureFindManyArgs>(args?: SelectSubset<T, FeeStructureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FeeStructure.
     * @param {FeeStructureCreateArgs} args - Arguments to create a FeeStructure.
     * @example
     * // Create one FeeStructure
     * const FeeStructure = await prisma.feeStructure.create({
     *   data: {
     *     // ... data to create a FeeStructure
     *   }
     * })
     * 
     */
    create<T extends FeeStructureCreateArgs>(args: SelectSubset<T, FeeStructureCreateArgs<ExtArgs>>): Prisma__FeeStructureClient<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FeeStructures.
     * @param {FeeStructureCreateManyArgs} args - Arguments to create many FeeStructures.
     * @example
     * // Create many FeeStructures
     * const feeStructure = await prisma.feeStructure.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeeStructureCreateManyArgs>(args?: SelectSubset<T, FeeStructureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FeeStructures and returns the data saved in the database.
     * @param {FeeStructureCreateManyAndReturnArgs} args - Arguments to create many FeeStructures.
     * @example
     * // Create many FeeStructures
     * const feeStructure = await prisma.feeStructure.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FeeStructures and only return the `id`
     * const feeStructureWithIdOnly = await prisma.feeStructure.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeeStructureCreateManyAndReturnArgs>(args?: SelectSubset<T, FeeStructureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FeeStructure.
     * @param {FeeStructureDeleteArgs} args - Arguments to delete one FeeStructure.
     * @example
     * // Delete one FeeStructure
     * const FeeStructure = await prisma.feeStructure.delete({
     *   where: {
     *     // ... filter to delete one FeeStructure
     *   }
     * })
     * 
     */
    delete<T extends FeeStructureDeleteArgs>(args: SelectSubset<T, FeeStructureDeleteArgs<ExtArgs>>): Prisma__FeeStructureClient<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FeeStructure.
     * @param {FeeStructureUpdateArgs} args - Arguments to update one FeeStructure.
     * @example
     * // Update one FeeStructure
     * const feeStructure = await prisma.feeStructure.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeeStructureUpdateArgs>(args: SelectSubset<T, FeeStructureUpdateArgs<ExtArgs>>): Prisma__FeeStructureClient<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FeeStructures.
     * @param {FeeStructureDeleteManyArgs} args - Arguments to filter FeeStructures to delete.
     * @example
     * // Delete a few FeeStructures
     * const { count } = await prisma.feeStructure.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeeStructureDeleteManyArgs>(args?: SelectSubset<T, FeeStructureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeeStructures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeStructureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeeStructures
     * const feeStructure = await prisma.feeStructure.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeeStructureUpdateManyArgs>(args: SelectSubset<T, FeeStructureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeeStructures and returns the data updated in the database.
     * @param {FeeStructureUpdateManyAndReturnArgs} args - Arguments to update many FeeStructures.
     * @example
     * // Update many FeeStructures
     * const feeStructure = await prisma.feeStructure.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FeeStructures and only return the `id`
     * const feeStructureWithIdOnly = await prisma.feeStructure.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeeStructureUpdateManyAndReturnArgs>(args: SelectSubset<T, FeeStructureUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FeeStructure.
     * @param {FeeStructureUpsertArgs} args - Arguments to update or create a FeeStructure.
     * @example
     * // Update or create a FeeStructure
     * const feeStructure = await prisma.feeStructure.upsert({
     *   create: {
     *     // ... data to create a FeeStructure
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeeStructure we want to update
     *   }
     * })
     */
    upsert<T extends FeeStructureUpsertArgs>(args: SelectSubset<T, FeeStructureUpsertArgs<ExtArgs>>): Prisma__FeeStructureClient<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FeeStructures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeStructureCountArgs} args - Arguments to filter FeeStructures to count.
     * @example
     * // Count the number of FeeStructures
     * const count = await prisma.feeStructure.count({
     *   where: {
     *     // ... the filter for the FeeStructures we want to count
     *   }
     * })
    **/
    count<T extends FeeStructureCountArgs>(
      args?: Subset<T, FeeStructureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeeStructureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeeStructure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeStructureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeeStructureAggregateArgs>(args: Subset<T, FeeStructureAggregateArgs>): Prisma.PrismaPromise<GetFeeStructureAggregateType<T>>

    /**
     * Group by FeeStructure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeStructureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeeStructureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeeStructureGroupByArgs['orderBy'] }
        : { orderBy?: FeeStructureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeeStructureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeeStructureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeeStructure model
   */
  readonly fields: FeeStructureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeeStructure.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeeStructureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grade<T extends GradeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GradeDefaultArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    studentFees<T extends FeeStructure$studentFeesArgs<ExtArgs> = {}>(args?: Subset<T, FeeStructure$studentFeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FeeStructure model
   */
  interface FeeStructureFieldRefs {
    readonly id: FieldRef<"FeeStructure", 'Int'>
    readonly gradeId: FieldRef<"FeeStructure", 'Int'>
    readonly startDate: FieldRef<"FeeStructure", 'DateTime'>
    readonly dueDate: FieldRef<"FeeStructure", 'DateTime'>
    readonly termFees: FieldRef<"FeeStructure", 'Int'>
    readonly abacusFees: FieldRef<"FeeStructure", 'Int'>
    readonly term: FieldRef<"FeeStructure", 'Term'>
    readonly academicYear: FieldRef<"FeeStructure", 'AcademicYear'>
  }
    

  // Custom InputTypes
  /**
   * FeeStructure findUnique
   */
  export type FeeStructureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    /**
     * Filter, which FeeStructure to fetch.
     */
    where: FeeStructureWhereUniqueInput
  }

  /**
   * FeeStructure findUniqueOrThrow
   */
  export type FeeStructureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    /**
     * Filter, which FeeStructure to fetch.
     */
    where: FeeStructureWhereUniqueInput
  }

  /**
   * FeeStructure findFirst
   */
  export type FeeStructureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    /**
     * Filter, which FeeStructure to fetch.
     */
    where?: FeeStructureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeStructures to fetch.
     */
    orderBy?: FeeStructureOrderByWithRelationInput | FeeStructureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeeStructures.
     */
    cursor?: FeeStructureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeStructures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeStructures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeeStructures.
     */
    distinct?: FeeStructureScalarFieldEnum | FeeStructureScalarFieldEnum[]
  }

  /**
   * FeeStructure findFirstOrThrow
   */
  export type FeeStructureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    /**
     * Filter, which FeeStructure to fetch.
     */
    where?: FeeStructureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeStructures to fetch.
     */
    orderBy?: FeeStructureOrderByWithRelationInput | FeeStructureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeeStructures.
     */
    cursor?: FeeStructureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeStructures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeStructures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeeStructures.
     */
    distinct?: FeeStructureScalarFieldEnum | FeeStructureScalarFieldEnum[]
  }

  /**
   * FeeStructure findMany
   */
  export type FeeStructureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    /**
     * Filter, which FeeStructures to fetch.
     */
    where?: FeeStructureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeStructures to fetch.
     */
    orderBy?: FeeStructureOrderByWithRelationInput | FeeStructureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeeStructures.
     */
    cursor?: FeeStructureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeStructures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeStructures.
     */
    skip?: number
    distinct?: FeeStructureScalarFieldEnum | FeeStructureScalarFieldEnum[]
  }

  /**
   * FeeStructure create
   */
  export type FeeStructureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    /**
     * The data needed to create a FeeStructure.
     */
    data: XOR<FeeStructureCreateInput, FeeStructureUncheckedCreateInput>
  }

  /**
   * FeeStructure createMany
   */
  export type FeeStructureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeeStructures.
     */
    data: FeeStructureCreateManyInput | FeeStructureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FeeStructure createManyAndReturn
   */
  export type FeeStructureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * The data used to create many FeeStructures.
     */
    data: FeeStructureCreateManyInput | FeeStructureCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeeStructure update
   */
  export type FeeStructureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    /**
     * The data needed to update a FeeStructure.
     */
    data: XOR<FeeStructureUpdateInput, FeeStructureUncheckedUpdateInput>
    /**
     * Choose, which FeeStructure to update.
     */
    where: FeeStructureWhereUniqueInput
  }

  /**
   * FeeStructure updateMany
   */
  export type FeeStructureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeeStructures.
     */
    data: XOR<FeeStructureUpdateManyMutationInput, FeeStructureUncheckedUpdateManyInput>
    /**
     * Filter which FeeStructures to update
     */
    where?: FeeStructureWhereInput
    /**
     * Limit how many FeeStructures to update.
     */
    limit?: number
  }

  /**
   * FeeStructure updateManyAndReturn
   */
  export type FeeStructureUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * The data used to update FeeStructures.
     */
    data: XOR<FeeStructureUpdateManyMutationInput, FeeStructureUncheckedUpdateManyInput>
    /**
     * Filter which FeeStructures to update
     */
    where?: FeeStructureWhereInput
    /**
     * Limit how many FeeStructures to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeeStructure upsert
   */
  export type FeeStructureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    /**
     * The filter to search for the FeeStructure to update in case it exists.
     */
    where: FeeStructureWhereUniqueInput
    /**
     * In case the FeeStructure found by the `where` argument doesn't exist, create a new FeeStructure with this data.
     */
    create: XOR<FeeStructureCreateInput, FeeStructureUncheckedCreateInput>
    /**
     * In case the FeeStructure was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeeStructureUpdateInput, FeeStructureUncheckedUpdateInput>
  }

  /**
   * FeeStructure delete
   */
  export type FeeStructureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
    /**
     * Filter which FeeStructure to delete.
     */
    where: FeeStructureWhereUniqueInput
  }

  /**
   * FeeStructure deleteMany
   */
  export type FeeStructureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeeStructures to delete
     */
    where?: FeeStructureWhereInput
    /**
     * Limit how many FeeStructures to delete.
     */
    limit?: number
  }

  /**
   * FeeStructure.studentFees
   */
  export type FeeStructure$studentFeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    where?: StudentFeesWhereInput
    orderBy?: StudentFeesOrderByWithRelationInput | StudentFeesOrderByWithRelationInput[]
    cursor?: StudentFeesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentFeesScalarFieldEnum | StudentFeesScalarFieldEnum[]
  }

  /**
   * FeeStructure without action
   */
  export type FeeStructureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeStructure
     */
    select?: FeeStructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeStructure
     */
    omit?: FeeStructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeStructureInclude<ExtArgs> | null
  }


  /**
   * Model FeeTransaction
   */

  export type AggregateFeeTransaction = {
    _count: FeeTransactionCountAggregateOutputType | null
    _avg: FeeTransactionAvgAggregateOutputType | null
    _sum: FeeTransactionSumAggregateOutputType | null
    _min: FeeTransactionMinAggregateOutputType | null
    _max: FeeTransactionMaxAggregateOutputType | null
  }

  export type FeeTransactionAvgAggregateOutputType = {
    id: number | null
    studentFeesId: number | null
    amount: number | null
    discountAmount: number | null
    fineAmount: number | null
  }

  export type FeeTransactionSumAggregateOutputType = {
    id: number | null
    studentFeesId: number | null
    amount: number | null
    discountAmount: number | null
    fineAmount: number | null
  }

  export type FeeTransactionMinAggregateOutputType = {
    id: number | null
    studentId: string | null
    term: string | null
    studentFeesId: number | null
    amount: number | null
    discountAmount: number | null
    fineAmount: number | null
    receiptDate: Date | null
    receiptNo: string | null
    paymentMode: $Enums.PaymentMode | null
    createdAt: Date | null
    updatedAt: Date | null
    remarks: string | null
  }

  export type FeeTransactionMaxAggregateOutputType = {
    id: number | null
    studentId: string | null
    term: string | null
    studentFeesId: number | null
    amount: number | null
    discountAmount: number | null
    fineAmount: number | null
    receiptDate: Date | null
    receiptNo: string | null
    paymentMode: $Enums.PaymentMode | null
    createdAt: Date | null
    updatedAt: Date | null
    remarks: string | null
  }

  export type FeeTransactionCountAggregateOutputType = {
    id: number
    studentId: number
    term: number
    studentFeesId: number
    amount: number
    discountAmount: number
    fineAmount: number
    receiptDate: number
    receiptNo: number
    paymentMode: number
    createdAt: number
    updatedAt: number
    remarks: number
    _all: number
  }


  export type FeeTransactionAvgAggregateInputType = {
    id?: true
    studentFeesId?: true
    amount?: true
    discountAmount?: true
    fineAmount?: true
  }

  export type FeeTransactionSumAggregateInputType = {
    id?: true
    studentFeesId?: true
    amount?: true
    discountAmount?: true
    fineAmount?: true
  }

  export type FeeTransactionMinAggregateInputType = {
    id?: true
    studentId?: true
    term?: true
    studentFeesId?: true
    amount?: true
    discountAmount?: true
    fineAmount?: true
    receiptDate?: true
    receiptNo?: true
    paymentMode?: true
    createdAt?: true
    updatedAt?: true
    remarks?: true
  }

  export type FeeTransactionMaxAggregateInputType = {
    id?: true
    studentId?: true
    term?: true
    studentFeesId?: true
    amount?: true
    discountAmount?: true
    fineAmount?: true
    receiptDate?: true
    receiptNo?: true
    paymentMode?: true
    createdAt?: true
    updatedAt?: true
    remarks?: true
  }

  export type FeeTransactionCountAggregateInputType = {
    id?: true
    studentId?: true
    term?: true
    studentFeesId?: true
    amount?: true
    discountAmount?: true
    fineAmount?: true
    receiptDate?: true
    receiptNo?: true
    paymentMode?: true
    createdAt?: true
    updatedAt?: true
    remarks?: true
    _all?: true
  }

  export type FeeTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeeTransaction to aggregate.
     */
    where?: FeeTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeTransactions to fetch.
     */
    orderBy?: FeeTransactionOrderByWithRelationInput | FeeTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeeTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeeTransactions
    **/
    _count?: true | FeeTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeeTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeeTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeeTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeeTransactionMaxAggregateInputType
  }

  export type GetFeeTransactionAggregateType<T extends FeeTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateFeeTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeeTransaction[P]>
      : GetScalarType<T[P], AggregateFeeTransaction[P]>
  }




  export type FeeTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeeTransactionWhereInput
    orderBy?: FeeTransactionOrderByWithAggregationInput | FeeTransactionOrderByWithAggregationInput[]
    by: FeeTransactionScalarFieldEnum[] | FeeTransactionScalarFieldEnum
    having?: FeeTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeeTransactionCountAggregateInputType | true
    _avg?: FeeTransactionAvgAggregateInputType
    _sum?: FeeTransactionSumAggregateInputType
    _min?: FeeTransactionMinAggregateInputType
    _max?: FeeTransactionMaxAggregateInputType
  }

  export type FeeTransactionGroupByOutputType = {
    id: number
    studentId: string
    term: string
    studentFeesId: number
    amount: number
    discountAmount: number
    fineAmount: number
    receiptDate: Date
    receiptNo: string
    paymentMode: $Enums.PaymentMode
    createdAt: Date
    updatedAt: Date
    remarks: string | null
    _count: FeeTransactionCountAggregateOutputType | null
    _avg: FeeTransactionAvgAggregateOutputType | null
    _sum: FeeTransactionSumAggregateOutputType | null
    _min: FeeTransactionMinAggregateOutputType | null
    _max: FeeTransactionMaxAggregateOutputType | null
  }

  type GetFeeTransactionGroupByPayload<T extends FeeTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeeTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeeTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeeTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], FeeTransactionGroupByOutputType[P]>
        }
      >
    >


  export type FeeTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    term?: boolean
    studentFeesId?: boolean
    amount?: boolean
    discountAmount?: boolean
    fineAmount?: boolean
    receiptDate?: boolean
    receiptNo?: boolean
    paymentMode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    remarks?: boolean
    studentFees?: boolean | StudentFeesDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feeTransaction"]>

  export type FeeTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    term?: boolean
    studentFeesId?: boolean
    amount?: boolean
    discountAmount?: boolean
    fineAmount?: boolean
    receiptDate?: boolean
    receiptNo?: boolean
    paymentMode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    remarks?: boolean
    studentFees?: boolean | StudentFeesDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feeTransaction"]>

  export type FeeTransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    term?: boolean
    studentFeesId?: boolean
    amount?: boolean
    discountAmount?: boolean
    fineAmount?: boolean
    receiptDate?: boolean
    receiptNo?: boolean
    paymentMode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    remarks?: boolean
    studentFees?: boolean | StudentFeesDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feeTransaction"]>

  export type FeeTransactionSelectScalar = {
    id?: boolean
    studentId?: boolean
    term?: boolean
    studentFeesId?: boolean
    amount?: boolean
    discountAmount?: boolean
    fineAmount?: boolean
    receiptDate?: boolean
    receiptNo?: boolean
    paymentMode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    remarks?: boolean
  }

  export type FeeTransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "term" | "studentFeesId" | "amount" | "discountAmount" | "fineAmount" | "receiptDate" | "receiptNo" | "paymentMode" | "createdAt" | "updatedAt" | "remarks", ExtArgs["result"]["feeTransaction"]>
  export type FeeTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentFees?: boolean | StudentFeesDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type FeeTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentFees?: boolean | StudentFeesDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type FeeTransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentFees?: boolean | StudentFeesDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $FeeTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeeTransaction"
    objects: {
      studentFees: Prisma.$StudentFeesPayload<ExtArgs>
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentId: string
      term: string
      studentFeesId: number
      amount: number
      discountAmount: number
      fineAmount: number
      receiptDate: Date
      receiptNo: string
      paymentMode: $Enums.PaymentMode
      createdAt: Date
      updatedAt: Date
      remarks: string | null
    }, ExtArgs["result"]["feeTransaction"]>
    composites: {}
  }

  type FeeTransactionGetPayload<S extends boolean | null | undefined | FeeTransactionDefaultArgs> = $Result.GetResult<Prisma.$FeeTransactionPayload, S>

  type FeeTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeeTransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeeTransactionCountAggregateInputType | true
    }

  export interface FeeTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeeTransaction'], meta: { name: 'FeeTransaction' } }
    /**
     * Find zero or one FeeTransaction that matches the filter.
     * @param {FeeTransactionFindUniqueArgs} args - Arguments to find a FeeTransaction
     * @example
     * // Get one FeeTransaction
     * const feeTransaction = await prisma.feeTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeeTransactionFindUniqueArgs>(args: SelectSubset<T, FeeTransactionFindUniqueArgs<ExtArgs>>): Prisma__FeeTransactionClient<$Result.GetResult<Prisma.$FeeTransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FeeTransaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeeTransactionFindUniqueOrThrowArgs} args - Arguments to find a FeeTransaction
     * @example
     * // Get one FeeTransaction
     * const feeTransaction = await prisma.feeTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeeTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, FeeTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeeTransactionClient<$Result.GetResult<Prisma.$FeeTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeeTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeTransactionFindFirstArgs} args - Arguments to find a FeeTransaction
     * @example
     * // Get one FeeTransaction
     * const feeTransaction = await prisma.feeTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeeTransactionFindFirstArgs>(args?: SelectSubset<T, FeeTransactionFindFirstArgs<ExtArgs>>): Prisma__FeeTransactionClient<$Result.GetResult<Prisma.$FeeTransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeeTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeTransactionFindFirstOrThrowArgs} args - Arguments to find a FeeTransaction
     * @example
     * // Get one FeeTransaction
     * const feeTransaction = await prisma.feeTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeeTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, FeeTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeeTransactionClient<$Result.GetResult<Prisma.$FeeTransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FeeTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeeTransactions
     * const feeTransactions = await prisma.feeTransaction.findMany()
     * 
     * // Get first 10 FeeTransactions
     * const feeTransactions = await prisma.feeTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feeTransactionWithIdOnly = await prisma.feeTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeeTransactionFindManyArgs>(args?: SelectSubset<T, FeeTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeeTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FeeTransaction.
     * @param {FeeTransactionCreateArgs} args - Arguments to create a FeeTransaction.
     * @example
     * // Create one FeeTransaction
     * const FeeTransaction = await prisma.feeTransaction.create({
     *   data: {
     *     // ... data to create a FeeTransaction
     *   }
     * })
     * 
     */
    create<T extends FeeTransactionCreateArgs>(args: SelectSubset<T, FeeTransactionCreateArgs<ExtArgs>>): Prisma__FeeTransactionClient<$Result.GetResult<Prisma.$FeeTransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FeeTransactions.
     * @param {FeeTransactionCreateManyArgs} args - Arguments to create many FeeTransactions.
     * @example
     * // Create many FeeTransactions
     * const feeTransaction = await prisma.feeTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeeTransactionCreateManyArgs>(args?: SelectSubset<T, FeeTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FeeTransactions and returns the data saved in the database.
     * @param {FeeTransactionCreateManyAndReturnArgs} args - Arguments to create many FeeTransactions.
     * @example
     * // Create many FeeTransactions
     * const feeTransaction = await prisma.feeTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FeeTransactions and only return the `id`
     * const feeTransactionWithIdOnly = await prisma.feeTransaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeeTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, FeeTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeeTransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FeeTransaction.
     * @param {FeeTransactionDeleteArgs} args - Arguments to delete one FeeTransaction.
     * @example
     * // Delete one FeeTransaction
     * const FeeTransaction = await prisma.feeTransaction.delete({
     *   where: {
     *     // ... filter to delete one FeeTransaction
     *   }
     * })
     * 
     */
    delete<T extends FeeTransactionDeleteArgs>(args: SelectSubset<T, FeeTransactionDeleteArgs<ExtArgs>>): Prisma__FeeTransactionClient<$Result.GetResult<Prisma.$FeeTransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FeeTransaction.
     * @param {FeeTransactionUpdateArgs} args - Arguments to update one FeeTransaction.
     * @example
     * // Update one FeeTransaction
     * const feeTransaction = await prisma.feeTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeeTransactionUpdateArgs>(args: SelectSubset<T, FeeTransactionUpdateArgs<ExtArgs>>): Prisma__FeeTransactionClient<$Result.GetResult<Prisma.$FeeTransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FeeTransactions.
     * @param {FeeTransactionDeleteManyArgs} args - Arguments to filter FeeTransactions to delete.
     * @example
     * // Delete a few FeeTransactions
     * const { count } = await prisma.feeTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeeTransactionDeleteManyArgs>(args?: SelectSubset<T, FeeTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeeTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeeTransactions
     * const feeTransaction = await prisma.feeTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeeTransactionUpdateManyArgs>(args: SelectSubset<T, FeeTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeeTransactions and returns the data updated in the database.
     * @param {FeeTransactionUpdateManyAndReturnArgs} args - Arguments to update many FeeTransactions.
     * @example
     * // Update many FeeTransactions
     * const feeTransaction = await prisma.feeTransaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FeeTransactions and only return the `id`
     * const feeTransactionWithIdOnly = await prisma.feeTransaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeeTransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, FeeTransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeeTransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FeeTransaction.
     * @param {FeeTransactionUpsertArgs} args - Arguments to update or create a FeeTransaction.
     * @example
     * // Update or create a FeeTransaction
     * const feeTransaction = await prisma.feeTransaction.upsert({
     *   create: {
     *     // ... data to create a FeeTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeeTransaction we want to update
     *   }
     * })
     */
    upsert<T extends FeeTransactionUpsertArgs>(args: SelectSubset<T, FeeTransactionUpsertArgs<ExtArgs>>): Prisma__FeeTransactionClient<$Result.GetResult<Prisma.$FeeTransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FeeTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeTransactionCountArgs} args - Arguments to filter FeeTransactions to count.
     * @example
     * // Count the number of FeeTransactions
     * const count = await prisma.feeTransaction.count({
     *   where: {
     *     // ... the filter for the FeeTransactions we want to count
     *   }
     * })
    **/
    count<T extends FeeTransactionCountArgs>(
      args?: Subset<T, FeeTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeeTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeeTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeeTransactionAggregateArgs>(args: Subset<T, FeeTransactionAggregateArgs>): Prisma.PrismaPromise<GetFeeTransactionAggregateType<T>>

    /**
     * Group by FeeTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeeTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeeTransactionGroupByArgs['orderBy'] }
        : { orderBy?: FeeTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeeTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeeTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeeTransaction model
   */
  readonly fields: FeeTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeeTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeeTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    studentFees<T extends StudentFeesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentFeesDefaultArgs<ExtArgs>>): Prisma__StudentFeesClient<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FeeTransaction model
   */
  interface FeeTransactionFieldRefs {
    readonly id: FieldRef<"FeeTransaction", 'Int'>
    readonly studentId: FieldRef<"FeeTransaction", 'String'>
    readonly term: FieldRef<"FeeTransaction", 'String'>
    readonly studentFeesId: FieldRef<"FeeTransaction", 'Int'>
    readonly amount: FieldRef<"FeeTransaction", 'Float'>
    readonly discountAmount: FieldRef<"FeeTransaction", 'Float'>
    readonly fineAmount: FieldRef<"FeeTransaction", 'Float'>
    readonly receiptDate: FieldRef<"FeeTransaction", 'DateTime'>
    readonly receiptNo: FieldRef<"FeeTransaction", 'String'>
    readonly paymentMode: FieldRef<"FeeTransaction", 'PaymentMode'>
    readonly createdAt: FieldRef<"FeeTransaction", 'DateTime'>
    readonly updatedAt: FieldRef<"FeeTransaction", 'DateTime'>
    readonly remarks: FieldRef<"FeeTransaction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FeeTransaction findUnique
   */
  export type FeeTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeTransaction
     */
    select?: FeeTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeTransaction
     */
    omit?: FeeTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FeeTransaction to fetch.
     */
    where: FeeTransactionWhereUniqueInput
  }

  /**
   * FeeTransaction findUniqueOrThrow
   */
  export type FeeTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeTransaction
     */
    select?: FeeTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeTransaction
     */
    omit?: FeeTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FeeTransaction to fetch.
     */
    where: FeeTransactionWhereUniqueInput
  }

  /**
   * FeeTransaction findFirst
   */
  export type FeeTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeTransaction
     */
    select?: FeeTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeTransaction
     */
    omit?: FeeTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FeeTransaction to fetch.
     */
    where?: FeeTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeTransactions to fetch.
     */
    orderBy?: FeeTransactionOrderByWithRelationInput | FeeTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeeTransactions.
     */
    cursor?: FeeTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeeTransactions.
     */
    distinct?: FeeTransactionScalarFieldEnum | FeeTransactionScalarFieldEnum[]
  }

  /**
   * FeeTransaction findFirstOrThrow
   */
  export type FeeTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeTransaction
     */
    select?: FeeTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeTransaction
     */
    omit?: FeeTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FeeTransaction to fetch.
     */
    where?: FeeTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeTransactions to fetch.
     */
    orderBy?: FeeTransactionOrderByWithRelationInput | FeeTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeeTransactions.
     */
    cursor?: FeeTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeeTransactions.
     */
    distinct?: FeeTransactionScalarFieldEnum | FeeTransactionScalarFieldEnum[]
  }

  /**
   * FeeTransaction findMany
   */
  export type FeeTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeTransaction
     */
    select?: FeeTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeTransaction
     */
    omit?: FeeTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FeeTransactions to fetch.
     */
    where?: FeeTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeTransactions to fetch.
     */
    orderBy?: FeeTransactionOrderByWithRelationInput | FeeTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeeTransactions.
     */
    cursor?: FeeTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeTransactions.
     */
    skip?: number
    distinct?: FeeTransactionScalarFieldEnum | FeeTransactionScalarFieldEnum[]
  }

  /**
   * FeeTransaction create
   */
  export type FeeTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeTransaction
     */
    select?: FeeTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeTransaction
     */
    omit?: FeeTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a FeeTransaction.
     */
    data: XOR<FeeTransactionCreateInput, FeeTransactionUncheckedCreateInput>
  }

  /**
   * FeeTransaction createMany
   */
  export type FeeTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeeTransactions.
     */
    data: FeeTransactionCreateManyInput | FeeTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FeeTransaction createManyAndReturn
   */
  export type FeeTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeTransaction
     */
    select?: FeeTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeeTransaction
     */
    omit?: FeeTransactionOmit<ExtArgs> | null
    /**
     * The data used to create many FeeTransactions.
     */
    data: FeeTransactionCreateManyInput | FeeTransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeeTransaction update
   */
  export type FeeTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeTransaction
     */
    select?: FeeTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeTransaction
     */
    omit?: FeeTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a FeeTransaction.
     */
    data: XOR<FeeTransactionUpdateInput, FeeTransactionUncheckedUpdateInput>
    /**
     * Choose, which FeeTransaction to update.
     */
    where: FeeTransactionWhereUniqueInput
  }

  /**
   * FeeTransaction updateMany
   */
  export type FeeTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeeTransactions.
     */
    data: XOR<FeeTransactionUpdateManyMutationInput, FeeTransactionUncheckedUpdateManyInput>
    /**
     * Filter which FeeTransactions to update
     */
    where?: FeeTransactionWhereInput
    /**
     * Limit how many FeeTransactions to update.
     */
    limit?: number
  }

  /**
   * FeeTransaction updateManyAndReturn
   */
  export type FeeTransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeTransaction
     */
    select?: FeeTransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeeTransaction
     */
    omit?: FeeTransactionOmit<ExtArgs> | null
    /**
     * The data used to update FeeTransactions.
     */
    data: XOR<FeeTransactionUpdateManyMutationInput, FeeTransactionUncheckedUpdateManyInput>
    /**
     * Filter which FeeTransactions to update
     */
    where?: FeeTransactionWhereInput
    /**
     * Limit how many FeeTransactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeTransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeeTransaction upsert
   */
  export type FeeTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeTransaction
     */
    select?: FeeTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeTransaction
     */
    omit?: FeeTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the FeeTransaction to update in case it exists.
     */
    where: FeeTransactionWhereUniqueInput
    /**
     * In case the FeeTransaction found by the `where` argument doesn't exist, create a new FeeTransaction with this data.
     */
    create: XOR<FeeTransactionCreateInput, FeeTransactionUncheckedCreateInput>
    /**
     * In case the FeeTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeeTransactionUpdateInput, FeeTransactionUncheckedUpdateInput>
  }

  /**
   * FeeTransaction delete
   */
  export type FeeTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeTransaction
     */
    select?: FeeTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeTransaction
     */
    omit?: FeeTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeTransactionInclude<ExtArgs> | null
    /**
     * Filter which FeeTransaction to delete.
     */
    where: FeeTransactionWhereUniqueInput
  }

  /**
   * FeeTransaction deleteMany
   */
  export type FeeTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeeTransactions to delete
     */
    where?: FeeTransactionWhereInput
    /**
     * Limit how many FeeTransactions to delete.
     */
    limit?: number
  }

  /**
   * FeeTransaction without action
   */
  export type FeeTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeTransaction
     */
    select?: FeeTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeTransaction
     */
    omit?: FeeTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeTransactionInclude<ExtArgs> | null
  }


  /**
   * Model StudentFees
   */

  export type AggregateStudentFees = {
    _count: StudentFeesCountAggregateOutputType | null
    _avg: StudentFeesAvgAggregateOutputType | null
    _sum: StudentFeesSumAggregateOutputType | null
    _min: StudentFeesMinAggregateOutputType | null
    _max: StudentFeesMaxAggregateOutputType | null
  }

  export type StudentFeesAvgAggregateOutputType = {
    id: number | null
    paidAmount: number | null
    abacusPaidAmount: number | null
    feeStructureId: number | null
    discountAmount: number | null
    fineAmount: number | null
  }

  export type StudentFeesSumAggregateOutputType = {
    id: number | null
    paidAmount: number | null
    abacusPaidAmount: number | null
    feeStructureId: number | null
    discountAmount: number | null
    fineAmount: number | null
  }

  export type StudentFeesMinAggregateOutputType = {
    id: number | null
    studentId: string | null
    paidAmount: number | null
    abacusPaidAmount: number | null
    feeStructureId: number | null
    discountAmount: number | null
    fineAmount: number | null
    receiptDate: Date | null
    receivedDate: Date | null
    paymentMode: $Enums.PaymentMode | null
    academicYear: $Enums.AcademicYear | null
    receiptNo: string | null
    term: string | null
    remarks: string | null
  }

  export type StudentFeesMaxAggregateOutputType = {
    id: number | null
    studentId: string | null
    paidAmount: number | null
    abacusPaidAmount: number | null
    feeStructureId: number | null
    discountAmount: number | null
    fineAmount: number | null
    receiptDate: Date | null
    receivedDate: Date | null
    paymentMode: $Enums.PaymentMode | null
    academicYear: $Enums.AcademicYear | null
    receiptNo: string | null
    term: string | null
    remarks: string | null
  }

  export type StudentFeesCountAggregateOutputType = {
    id: number
    studentId: number
    paidAmount: number
    abacusPaidAmount: number
    feeStructureId: number
    discountAmount: number
    fineAmount: number
    receiptDate: number
    receivedDate: number
    paymentMode: number
    academicYear: number
    receiptNo: number
    term: number
    remarks: number
    _all: number
  }


  export type StudentFeesAvgAggregateInputType = {
    id?: true
    paidAmount?: true
    abacusPaidAmount?: true
    feeStructureId?: true
    discountAmount?: true
    fineAmount?: true
  }

  export type StudentFeesSumAggregateInputType = {
    id?: true
    paidAmount?: true
    abacusPaidAmount?: true
    feeStructureId?: true
    discountAmount?: true
    fineAmount?: true
  }

  export type StudentFeesMinAggregateInputType = {
    id?: true
    studentId?: true
    paidAmount?: true
    abacusPaidAmount?: true
    feeStructureId?: true
    discountAmount?: true
    fineAmount?: true
    receiptDate?: true
    receivedDate?: true
    paymentMode?: true
    academicYear?: true
    receiptNo?: true
    term?: true
    remarks?: true
  }

  export type StudentFeesMaxAggregateInputType = {
    id?: true
    studentId?: true
    paidAmount?: true
    abacusPaidAmount?: true
    feeStructureId?: true
    discountAmount?: true
    fineAmount?: true
    receiptDate?: true
    receivedDate?: true
    paymentMode?: true
    academicYear?: true
    receiptNo?: true
    term?: true
    remarks?: true
  }

  export type StudentFeesCountAggregateInputType = {
    id?: true
    studentId?: true
    paidAmount?: true
    abacusPaidAmount?: true
    feeStructureId?: true
    discountAmount?: true
    fineAmount?: true
    receiptDate?: true
    receivedDate?: true
    paymentMode?: true
    academicYear?: true
    receiptNo?: true
    term?: true
    remarks?: true
    _all?: true
  }

  export type StudentFeesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentFees to aggregate.
     */
    where?: StudentFeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentFees to fetch.
     */
    orderBy?: StudentFeesOrderByWithRelationInput | StudentFeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentFeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentFees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentFees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentFees
    **/
    _count?: true | StudentFeesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentFeesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentFeesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentFeesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentFeesMaxAggregateInputType
  }

  export type GetStudentFeesAggregateType<T extends StudentFeesAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentFees]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentFees[P]>
      : GetScalarType<T[P], AggregateStudentFees[P]>
  }




  export type StudentFeesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentFeesWhereInput
    orderBy?: StudentFeesOrderByWithAggregationInput | StudentFeesOrderByWithAggregationInput[]
    by: StudentFeesScalarFieldEnum[] | StudentFeesScalarFieldEnum
    having?: StudentFeesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentFeesCountAggregateInputType | true
    _avg?: StudentFeesAvgAggregateInputType
    _sum?: StudentFeesSumAggregateInputType
    _min?: StudentFeesMinAggregateInputType
    _max?: StudentFeesMaxAggregateInputType
  }

  export type StudentFeesGroupByOutputType = {
    id: number
    studentId: string
    paidAmount: number
    abacusPaidAmount: number | null
    feeStructureId: number
    discountAmount: number
    fineAmount: number
    receiptDate: Date | null
    receivedDate: Date | null
    paymentMode: $Enums.PaymentMode
    academicYear: $Enums.AcademicYear
    receiptNo: string | null
    term: string
    remarks: string | null
    _count: StudentFeesCountAggregateOutputType | null
    _avg: StudentFeesAvgAggregateOutputType | null
    _sum: StudentFeesSumAggregateOutputType | null
    _min: StudentFeesMinAggregateOutputType | null
    _max: StudentFeesMaxAggregateOutputType | null
  }

  type GetStudentFeesGroupByPayload<T extends StudentFeesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentFeesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentFeesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentFeesGroupByOutputType[P]>
            : GetScalarType<T[P], StudentFeesGroupByOutputType[P]>
        }
      >
    >


  export type StudentFeesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    paidAmount?: boolean
    abacusPaidAmount?: boolean
    feeStructureId?: boolean
    discountAmount?: boolean
    fineAmount?: boolean
    receiptDate?: boolean
    receivedDate?: boolean
    paymentMode?: boolean
    academicYear?: boolean
    receiptNo?: boolean
    term?: boolean
    remarks?: boolean
    feeTransactions?: boolean | StudentFees$feeTransactionsArgs<ExtArgs>
    feeStructure?: boolean | FeeStructureDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    _count?: boolean | StudentFeesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentFees"]>

  export type StudentFeesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    paidAmount?: boolean
    abacusPaidAmount?: boolean
    feeStructureId?: boolean
    discountAmount?: boolean
    fineAmount?: boolean
    receiptDate?: boolean
    receivedDate?: boolean
    paymentMode?: boolean
    academicYear?: boolean
    receiptNo?: boolean
    term?: boolean
    remarks?: boolean
    feeStructure?: boolean | FeeStructureDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentFees"]>

  export type StudentFeesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    paidAmount?: boolean
    abacusPaidAmount?: boolean
    feeStructureId?: boolean
    discountAmount?: boolean
    fineAmount?: boolean
    receiptDate?: boolean
    receivedDate?: boolean
    paymentMode?: boolean
    academicYear?: boolean
    receiptNo?: boolean
    term?: boolean
    remarks?: boolean
    feeStructure?: boolean | FeeStructureDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentFees"]>

  export type StudentFeesSelectScalar = {
    id?: boolean
    studentId?: boolean
    paidAmount?: boolean
    abacusPaidAmount?: boolean
    feeStructureId?: boolean
    discountAmount?: boolean
    fineAmount?: boolean
    receiptDate?: boolean
    receivedDate?: boolean
    paymentMode?: boolean
    academicYear?: boolean
    receiptNo?: boolean
    term?: boolean
    remarks?: boolean
  }

  export type StudentFeesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "paidAmount" | "abacusPaidAmount" | "feeStructureId" | "discountAmount" | "fineAmount" | "receiptDate" | "receivedDate" | "paymentMode" | "academicYear" | "receiptNo" | "term" | "remarks", ExtArgs["result"]["studentFees"]>
  export type StudentFeesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feeTransactions?: boolean | StudentFees$feeTransactionsArgs<ExtArgs>
    feeStructure?: boolean | FeeStructureDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    _count?: boolean | StudentFeesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudentFeesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feeStructure?: boolean | FeeStructureDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type StudentFeesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feeStructure?: boolean | FeeStructureDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $StudentFeesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentFees"
    objects: {
      feeTransactions: Prisma.$FeeTransactionPayload<ExtArgs>[]
      feeStructure: Prisma.$FeeStructurePayload<ExtArgs>
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentId: string
      paidAmount: number
      abacusPaidAmount: number | null
      feeStructureId: number
      discountAmount: number
      fineAmount: number
      receiptDate: Date | null
      receivedDate: Date | null
      paymentMode: $Enums.PaymentMode
      academicYear: $Enums.AcademicYear
      receiptNo: string | null
      term: string
      remarks: string | null
    }, ExtArgs["result"]["studentFees"]>
    composites: {}
  }

  type StudentFeesGetPayload<S extends boolean | null | undefined | StudentFeesDefaultArgs> = $Result.GetResult<Prisma.$StudentFeesPayload, S>

  type StudentFeesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentFeesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentFeesCountAggregateInputType | true
    }

  export interface StudentFeesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentFees'], meta: { name: 'StudentFees' } }
    /**
     * Find zero or one StudentFees that matches the filter.
     * @param {StudentFeesFindUniqueArgs} args - Arguments to find a StudentFees
     * @example
     * // Get one StudentFees
     * const studentFees = await prisma.studentFees.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFeesFindUniqueArgs>(args: SelectSubset<T, StudentFeesFindUniqueArgs<ExtArgs>>): Prisma__StudentFeesClient<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentFees that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentFeesFindUniqueOrThrowArgs} args - Arguments to find a StudentFees
     * @example
     * // Get one StudentFees
     * const studentFees = await prisma.studentFees.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFeesFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFeesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentFeesClient<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentFees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFeesFindFirstArgs} args - Arguments to find a StudentFees
     * @example
     * // Get one StudentFees
     * const studentFees = await prisma.studentFees.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFeesFindFirstArgs>(args?: SelectSubset<T, StudentFeesFindFirstArgs<ExtArgs>>): Prisma__StudentFeesClient<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentFees that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFeesFindFirstOrThrowArgs} args - Arguments to find a StudentFees
     * @example
     * // Get one StudentFees
     * const studentFees = await prisma.studentFees.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFeesFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFeesFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentFeesClient<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentFees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFeesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentFees
     * const studentFees = await prisma.studentFees.findMany()
     * 
     * // Get first 10 StudentFees
     * const studentFees = await prisma.studentFees.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentFeesWithIdOnly = await prisma.studentFees.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentFeesFindManyArgs>(args?: SelectSubset<T, StudentFeesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentFees.
     * @param {StudentFeesCreateArgs} args - Arguments to create a StudentFees.
     * @example
     * // Create one StudentFees
     * const StudentFees = await prisma.studentFees.create({
     *   data: {
     *     // ... data to create a StudentFees
     *   }
     * })
     * 
     */
    create<T extends StudentFeesCreateArgs>(args: SelectSubset<T, StudentFeesCreateArgs<ExtArgs>>): Prisma__StudentFeesClient<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentFees.
     * @param {StudentFeesCreateManyArgs} args - Arguments to create many StudentFees.
     * @example
     * // Create many StudentFees
     * const studentFees = await prisma.studentFees.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentFeesCreateManyArgs>(args?: SelectSubset<T, StudentFeesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentFees and returns the data saved in the database.
     * @param {StudentFeesCreateManyAndReturnArgs} args - Arguments to create many StudentFees.
     * @example
     * // Create many StudentFees
     * const studentFees = await prisma.studentFees.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentFees and only return the `id`
     * const studentFeesWithIdOnly = await prisma.studentFees.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentFeesCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentFeesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudentFees.
     * @param {StudentFeesDeleteArgs} args - Arguments to delete one StudentFees.
     * @example
     * // Delete one StudentFees
     * const StudentFees = await prisma.studentFees.delete({
     *   where: {
     *     // ... filter to delete one StudentFees
     *   }
     * })
     * 
     */
    delete<T extends StudentFeesDeleteArgs>(args: SelectSubset<T, StudentFeesDeleteArgs<ExtArgs>>): Prisma__StudentFeesClient<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentFees.
     * @param {StudentFeesUpdateArgs} args - Arguments to update one StudentFees.
     * @example
     * // Update one StudentFees
     * const studentFees = await prisma.studentFees.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentFeesUpdateArgs>(args: SelectSubset<T, StudentFeesUpdateArgs<ExtArgs>>): Prisma__StudentFeesClient<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentFees.
     * @param {StudentFeesDeleteManyArgs} args - Arguments to filter StudentFees to delete.
     * @example
     * // Delete a few StudentFees
     * const { count } = await prisma.studentFees.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentFeesDeleteManyArgs>(args?: SelectSubset<T, StudentFeesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentFees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFeesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentFees
     * const studentFees = await prisma.studentFees.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentFeesUpdateManyArgs>(args: SelectSubset<T, StudentFeesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentFees and returns the data updated in the database.
     * @param {StudentFeesUpdateManyAndReturnArgs} args - Arguments to update many StudentFees.
     * @example
     * // Update many StudentFees
     * const studentFees = await prisma.studentFees.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudentFees and only return the `id`
     * const studentFeesWithIdOnly = await prisma.studentFees.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentFeesUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentFeesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudentFees.
     * @param {StudentFeesUpsertArgs} args - Arguments to update or create a StudentFees.
     * @example
     * // Update or create a StudentFees
     * const studentFees = await prisma.studentFees.upsert({
     *   create: {
     *     // ... data to create a StudentFees
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentFees we want to update
     *   }
     * })
     */
    upsert<T extends StudentFeesUpsertArgs>(args: SelectSubset<T, StudentFeesUpsertArgs<ExtArgs>>): Prisma__StudentFeesClient<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentFees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFeesCountArgs} args - Arguments to filter StudentFees to count.
     * @example
     * // Count the number of StudentFees
     * const count = await prisma.studentFees.count({
     *   where: {
     *     // ... the filter for the StudentFees we want to count
     *   }
     * })
    **/
    count<T extends StudentFeesCountArgs>(
      args?: Subset<T, StudentFeesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentFeesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentFees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFeesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentFeesAggregateArgs>(args: Subset<T, StudentFeesAggregateArgs>): Prisma.PrismaPromise<GetStudentFeesAggregateType<T>>

    /**
     * Group by StudentFees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFeesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentFeesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentFeesGroupByArgs['orderBy'] }
        : { orderBy?: StudentFeesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentFeesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentFeesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentFees model
   */
  readonly fields: StudentFeesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentFees.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentFeesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    feeTransactions<T extends StudentFees$feeTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, StudentFees$feeTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeeTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    feeStructure<T extends FeeStructureDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FeeStructureDefaultArgs<ExtArgs>>): Prisma__FeeStructureClient<$Result.GetResult<Prisma.$FeeStructurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentFees model
   */
  interface StudentFeesFieldRefs {
    readonly id: FieldRef<"StudentFees", 'Int'>
    readonly studentId: FieldRef<"StudentFees", 'String'>
    readonly paidAmount: FieldRef<"StudentFees", 'Int'>
    readonly abacusPaidAmount: FieldRef<"StudentFees", 'Int'>
    readonly feeStructureId: FieldRef<"StudentFees", 'Int'>
    readonly discountAmount: FieldRef<"StudentFees", 'Int'>
    readonly fineAmount: FieldRef<"StudentFees", 'Int'>
    readonly receiptDate: FieldRef<"StudentFees", 'DateTime'>
    readonly receivedDate: FieldRef<"StudentFees", 'DateTime'>
    readonly paymentMode: FieldRef<"StudentFees", 'PaymentMode'>
    readonly academicYear: FieldRef<"StudentFees", 'AcademicYear'>
    readonly receiptNo: FieldRef<"StudentFees", 'String'>
    readonly term: FieldRef<"StudentFees", 'String'>
    readonly remarks: FieldRef<"StudentFees", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StudentFees findUnique
   */
  export type StudentFeesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentFees to fetch.
     */
    where: StudentFeesWhereUniqueInput
  }

  /**
   * StudentFees findUniqueOrThrow
   */
  export type StudentFeesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentFees to fetch.
     */
    where: StudentFeesWhereUniqueInput
  }

  /**
   * StudentFees findFirst
   */
  export type StudentFeesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentFees to fetch.
     */
    where?: StudentFeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentFees to fetch.
     */
    orderBy?: StudentFeesOrderByWithRelationInput | StudentFeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentFees.
     */
    cursor?: StudentFeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentFees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentFees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentFees.
     */
    distinct?: StudentFeesScalarFieldEnum | StudentFeesScalarFieldEnum[]
  }

  /**
   * StudentFees findFirstOrThrow
   */
  export type StudentFeesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentFees to fetch.
     */
    where?: StudentFeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentFees to fetch.
     */
    orderBy?: StudentFeesOrderByWithRelationInput | StudentFeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentFees.
     */
    cursor?: StudentFeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentFees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentFees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentFees.
     */
    distinct?: StudentFeesScalarFieldEnum | StudentFeesScalarFieldEnum[]
  }

  /**
   * StudentFees findMany
   */
  export type StudentFeesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentFees to fetch.
     */
    where?: StudentFeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentFees to fetch.
     */
    orderBy?: StudentFeesOrderByWithRelationInput | StudentFeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentFees.
     */
    cursor?: StudentFeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentFees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentFees.
     */
    skip?: number
    distinct?: StudentFeesScalarFieldEnum | StudentFeesScalarFieldEnum[]
  }

  /**
   * StudentFees create
   */
  export type StudentFeesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentFees.
     */
    data: XOR<StudentFeesCreateInput, StudentFeesUncheckedCreateInput>
  }

  /**
   * StudentFees createMany
   */
  export type StudentFeesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentFees.
     */
    data: StudentFeesCreateManyInput | StudentFeesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentFees createManyAndReturn
   */
  export type StudentFeesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * The data used to create many StudentFees.
     */
    data: StudentFeesCreateManyInput | StudentFeesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentFees update
   */
  export type StudentFeesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentFees.
     */
    data: XOR<StudentFeesUpdateInput, StudentFeesUncheckedUpdateInput>
    /**
     * Choose, which StudentFees to update.
     */
    where: StudentFeesWhereUniqueInput
  }

  /**
   * StudentFees updateMany
   */
  export type StudentFeesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentFees.
     */
    data: XOR<StudentFeesUpdateManyMutationInput, StudentFeesUncheckedUpdateManyInput>
    /**
     * Filter which StudentFees to update
     */
    where?: StudentFeesWhereInput
    /**
     * Limit how many StudentFees to update.
     */
    limit?: number
  }

  /**
   * StudentFees updateManyAndReturn
   */
  export type StudentFeesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * The data used to update StudentFees.
     */
    data: XOR<StudentFeesUpdateManyMutationInput, StudentFeesUncheckedUpdateManyInput>
    /**
     * Filter which StudentFees to update
     */
    where?: StudentFeesWhereInput
    /**
     * Limit how many StudentFees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentFees upsert
   */
  export type StudentFeesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentFees to update in case it exists.
     */
    where: StudentFeesWhereUniqueInput
    /**
     * In case the StudentFees found by the `where` argument doesn't exist, create a new StudentFees with this data.
     */
    create: XOR<StudentFeesCreateInput, StudentFeesUncheckedCreateInput>
    /**
     * In case the StudentFees was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentFeesUpdateInput, StudentFeesUncheckedUpdateInput>
  }

  /**
   * StudentFees delete
   */
  export type StudentFeesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    /**
     * Filter which StudentFees to delete.
     */
    where: StudentFeesWhereUniqueInput
  }

  /**
   * StudentFees deleteMany
   */
  export type StudentFeesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentFees to delete
     */
    where?: StudentFeesWhereInput
    /**
     * Limit how many StudentFees to delete.
     */
    limit?: number
  }

  /**
   * StudentFees.feeTransactions
   */
  export type StudentFees$feeTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeTransaction
     */
    select?: FeeTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeeTransaction
     */
    omit?: FeeTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeeTransactionInclude<ExtArgs> | null
    where?: FeeTransactionWhereInput
    orderBy?: FeeTransactionOrderByWithRelationInput | FeeTransactionOrderByWithRelationInput[]
    cursor?: FeeTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeeTransactionScalarFieldEnum | FeeTransactionScalarFieldEnum[]
  }

  /**
   * StudentFees without action
   */
  export type StudentFeesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
  }


  /**
   * Model StudentTotalFees
   */

  export type AggregateStudentTotalFees = {
    _count: StudentTotalFeesCountAggregateOutputType | null
    _avg: StudentTotalFeesAvgAggregateOutputType | null
    _sum: StudentTotalFeesSumAggregateOutputType | null
    _min: StudentTotalFeesMinAggregateOutputType | null
    _max: StudentTotalFeesMaxAggregateOutputType | null
  }

  export type StudentTotalFeesAvgAggregateOutputType = {
    id: number | null
    totalPaidAmount: number | null
    totalDiscountAmount: number | null
    totalFineAmount: number | null
    totalAbacusAmount: number | null
    totalFeeAmount: number | null
    dueAmount: number | null
  }

  export type StudentTotalFeesSumAggregateOutputType = {
    id: number | null
    totalPaidAmount: number | null
    totalDiscountAmount: number | null
    totalFineAmount: number | null
    totalAbacusAmount: number | null
    totalFeeAmount: number | null
    dueAmount: number | null
  }

  export type StudentTotalFeesMinAggregateOutputType = {
    id: number | null
    studentId: string | null
    totalPaidAmount: number | null
    totalDiscountAmount: number | null
    totalFineAmount: number | null
    totalAbacusAmount: number | null
    totalFeeAmount: number | null
    dueAmount: number | null
    status: string | null
  }

  export type StudentTotalFeesMaxAggregateOutputType = {
    id: number | null
    studentId: string | null
    totalPaidAmount: number | null
    totalDiscountAmount: number | null
    totalFineAmount: number | null
    totalAbacusAmount: number | null
    totalFeeAmount: number | null
    dueAmount: number | null
    status: string | null
  }

  export type StudentTotalFeesCountAggregateOutputType = {
    id: number
    studentId: number
    totalPaidAmount: number
    totalDiscountAmount: number
    totalFineAmount: number
    totalAbacusAmount: number
    totalFeeAmount: number
    dueAmount: number
    status: number
    _all: number
  }


  export type StudentTotalFeesAvgAggregateInputType = {
    id?: true
    totalPaidAmount?: true
    totalDiscountAmount?: true
    totalFineAmount?: true
    totalAbacusAmount?: true
    totalFeeAmount?: true
    dueAmount?: true
  }

  export type StudentTotalFeesSumAggregateInputType = {
    id?: true
    totalPaidAmount?: true
    totalDiscountAmount?: true
    totalFineAmount?: true
    totalAbacusAmount?: true
    totalFeeAmount?: true
    dueAmount?: true
  }

  export type StudentTotalFeesMinAggregateInputType = {
    id?: true
    studentId?: true
    totalPaidAmount?: true
    totalDiscountAmount?: true
    totalFineAmount?: true
    totalAbacusAmount?: true
    totalFeeAmount?: true
    dueAmount?: true
    status?: true
  }

  export type StudentTotalFeesMaxAggregateInputType = {
    id?: true
    studentId?: true
    totalPaidAmount?: true
    totalDiscountAmount?: true
    totalFineAmount?: true
    totalAbacusAmount?: true
    totalFeeAmount?: true
    dueAmount?: true
    status?: true
  }

  export type StudentTotalFeesCountAggregateInputType = {
    id?: true
    studentId?: true
    totalPaidAmount?: true
    totalDiscountAmount?: true
    totalFineAmount?: true
    totalAbacusAmount?: true
    totalFeeAmount?: true
    dueAmount?: true
    status?: true
    _all?: true
  }

  export type StudentTotalFeesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentTotalFees to aggregate.
     */
    where?: StudentTotalFeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentTotalFees to fetch.
     */
    orderBy?: StudentTotalFeesOrderByWithRelationInput | StudentTotalFeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentTotalFeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentTotalFees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentTotalFees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentTotalFees
    **/
    _count?: true | StudentTotalFeesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentTotalFeesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentTotalFeesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentTotalFeesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentTotalFeesMaxAggregateInputType
  }

  export type GetStudentTotalFeesAggregateType<T extends StudentTotalFeesAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentTotalFees]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentTotalFees[P]>
      : GetScalarType<T[P], AggregateStudentTotalFees[P]>
  }




  export type StudentTotalFeesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentTotalFeesWhereInput
    orderBy?: StudentTotalFeesOrderByWithAggregationInput | StudentTotalFeesOrderByWithAggregationInput[]
    by: StudentTotalFeesScalarFieldEnum[] | StudentTotalFeesScalarFieldEnum
    having?: StudentTotalFeesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentTotalFeesCountAggregateInputType | true
    _avg?: StudentTotalFeesAvgAggregateInputType
    _sum?: StudentTotalFeesSumAggregateInputType
    _min?: StudentTotalFeesMinAggregateInputType
    _max?: StudentTotalFeesMaxAggregateInputType
  }

  export type StudentTotalFeesGroupByOutputType = {
    id: number
    studentId: string
    totalPaidAmount: number
    totalDiscountAmount: number
    totalFineAmount: number
    totalAbacusAmount: number
    totalFeeAmount: number
    dueAmount: number
    status: string
    _count: StudentTotalFeesCountAggregateOutputType | null
    _avg: StudentTotalFeesAvgAggregateOutputType | null
    _sum: StudentTotalFeesSumAggregateOutputType | null
    _min: StudentTotalFeesMinAggregateOutputType | null
    _max: StudentTotalFeesMaxAggregateOutputType | null
  }

  type GetStudentTotalFeesGroupByPayload<T extends StudentTotalFeesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentTotalFeesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentTotalFeesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentTotalFeesGroupByOutputType[P]>
            : GetScalarType<T[P], StudentTotalFeesGroupByOutputType[P]>
        }
      >
    >


  export type StudentTotalFeesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    totalPaidAmount?: boolean
    totalDiscountAmount?: boolean
    totalFineAmount?: boolean
    totalAbacusAmount?: boolean
    totalFeeAmount?: boolean
    dueAmount?: boolean
    status?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentTotalFees"]>

  export type StudentTotalFeesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    totalPaidAmount?: boolean
    totalDiscountAmount?: boolean
    totalFineAmount?: boolean
    totalAbacusAmount?: boolean
    totalFeeAmount?: boolean
    dueAmount?: boolean
    status?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentTotalFees"]>

  export type StudentTotalFeesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    totalPaidAmount?: boolean
    totalDiscountAmount?: boolean
    totalFineAmount?: boolean
    totalAbacusAmount?: boolean
    totalFeeAmount?: boolean
    dueAmount?: boolean
    status?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentTotalFees"]>

  export type StudentTotalFeesSelectScalar = {
    id?: boolean
    studentId?: boolean
    totalPaidAmount?: boolean
    totalDiscountAmount?: boolean
    totalFineAmount?: boolean
    totalAbacusAmount?: boolean
    totalFeeAmount?: boolean
    dueAmount?: boolean
    status?: boolean
  }

  export type StudentTotalFeesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "totalPaidAmount" | "totalDiscountAmount" | "totalFineAmount" | "totalAbacusAmount" | "totalFeeAmount" | "dueAmount" | "status", ExtArgs["result"]["studentTotalFees"]>
  export type StudentTotalFeesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type StudentTotalFeesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type StudentTotalFeesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $StudentTotalFeesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentTotalFees"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentId: string
      totalPaidAmount: number
      totalDiscountAmount: number
      totalFineAmount: number
      totalAbacusAmount: number
      totalFeeAmount: number
      dueAmount: number
      status: string
    }, ExtArgs["result"]["studentTotalFees"]>
    composites: {}
  }

  type StudentTotalFeesGetPayload<S extends boolean | null | undefined | StudentTotalFeesDefaultArgs> = $Result.GetResult<Prisma.$StudentTotalFeesPayload, S>

  type StudentTotalFeesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentTotalFeesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentTotalFeesCountAggregateInputType | true
    }

  export interface StudentTotalFeesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentTotalFees'], meta: { name: 'StudentTotalFees' } }
    /**
     * Find zero or one StudentTotalFees that matches the filter.
     * @param {StudentTotalFeesFindUniqueArgs} args - Arguments to find a StudentTotalFees
     * @example
     * // Get one StudentTotalFees
     * const studentTotalFees = await prisma.studentTotalFees.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentTotalFeesFindUniqueArgs>(args: SelectSubset<T, StudentTotalFeesFindUniqueArgs<ExtArgs>>): Prisma__StudentTotalFeesClient<$Result.GetResult<Prisma.$StudentTotalFeesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentTotalFees that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentTotalFeesFindUniqueOrThrowArgs} args - Arguments to find a StudentTotalFees
     * @example
     * // Get one StudentTotalFees
     * const studentTotalFees = await prisma.studentTotalFees.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentTotalFeesFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentTotalFeesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentTotalFeesClient<$Result.GetResult<Prisma.$StudentTotalFeesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentTotalFees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentTotalFeesFindFirstArgs} args - Arguments to find a StudentTotalFees
     * @example
     * // Get one StudentTotalFees
     * const studentTotalFees = await prisma.studentTotalFees.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentTotalFeesFindFirstArgs>(args?: SelectSubset<T, StudentTotalFeesFindFirstArgs<ExtArgs>>): Prisma__StudentTotalFeesClient<$Result.GetResult<Prisma.$StudentTotalFeesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentTotalFees that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentTotalFeesFindFirstOrThrowArgs} args - Arguments to find a StudentTotalFees
     * @example
     * // Get one StudentTotalFees
     * const studentTotalFees = await prisma.studentTotalFees.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentTotalFeesFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentTotalFeesFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentTotalFeesClient<$Result.GetResult<Prisma.$StudentTotalFeesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentTotalFees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentTotalFeesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentTotalFees
     * const studentTotalFees = await prisma.studentTotalFees.findMany()
     * 
     * // Get first 10 StudentTotalFees
     * const studentTotalFees = await prisma.studentTotalFees.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentTotalFeesWithIdOnly = await prisma.studentTotalFees.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentTotalFeesFindManyArgs>(args?: SelectSubset<T, StudentTotalFeesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentTotalFeesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentTotalFees.
     * @param {StudentTotalFeesCreateArgs} args - Arguments to create a StudentTotalFees.
     * @example
     * // Create one StudentTotalFees
     * const StudentTotalFees = await prisma.studentTotalFees.create({
     *   data: {
     *     // ... data to create a StudentTotalFees
     *   }
     * })
     * 
     */
    create<T extends StudentTotalFeesCreateArgs>(args: SelectSubset<T, StudentTotalFeesCreateArgs<ExtArgs>>): Prisma__StudentTotalFeesClient<$Result.GetResult<Prisma.$StudentTotalFeesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentTotalFees.
     * @param {StudentTotalFeesCreateManyArgs} args - Arguments to create many StudentTotalFees.
     * @example
     * // Create many StudentTotalFees
     * const studentTotalFees = await prisma.studentTotalFees.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentTotalFeesCreateManyArgs>(args?: SelectSubset<T, StudentTotalFeesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentTotalFees and returns the data saved in the database.
     * @param {StudentTotalFeesCreateManyAndReturnArgs} args - Arguments to create many StudentTotalFees.
     * @example
     * // Create many StudentTotalFees
     * const studentTotalFees = await prisma.studentTotalFees.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentTotalFees and only return the `id`
     * const studentTotalFeesWithIdOnly = await prisma.studentTotalFees.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentTotalFeesCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentTotalFeesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentTotalFeesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudentTotalFees.
     * @param {StudentTotalFeesDeleteArgs} args - Arguments to delete one StudentTotalFees.
     * @example
     * // Delete one StudentTotalFees
     * const StudentTotalFees = await prisma.studentTotalFees.delete({
     *   where: {
     *     // ... filter to delete one StudentTotalFees
     *   }
     * })
     * 
     */
    delete<T extends StudentTotalFeesDeleteArgs>(args: SelectSubset<T, StudentTotalFeesDeleteArgs<ExtArgs>>): Prisma__StudentTotalFeesClient<$Result.GetResult<Prisma.$StudentTotalFeesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentTotalFees.
     * @param {StudentTotalFeesUpdateArgs} args - Arguments to update one StudentTotalFees.
     * @example
     * // Update one StudentTotalFees
     * const studentTotalFees = await prisma.studentTotalFees.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentTotalFeesUpdateArgs>(args: SelectSubset<T, StudentTotalFeesUpdateArgs<ExtArgs>>): Prisma__StudentTotalFeesClient<$Result.GetResult<Prisma.$StudentTotalFeesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentTotalFees.
     * @param {StudentTotalFeesDeleteManyArgs} args - Arguments to filter StudentTotalFees to delete.
     * @example
     * // Delete a few StudentTotalFees
     * const { count } = await prisma.studentTotalFees.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentTotalFeesDeleteManyArgs>(args?: SelectSubset<T, StudentTotalFeesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentTotalFees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentTotalFeesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentTotalFees
     * const studentTotalFees = await prisma.studentTotalFees.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentTotalFeesUpdateManyArgs>(args: SelectSubset<T, StudentTotalFeesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentTotalFees and returns the data updated in the database.
     * @param {StudentTotalFeesUpdateManyAndReturnArgs} args - Arguments to update many StudentTotalFees.
     * @example
     * // Update many StudentTotalFees
     * const studentTotalFees = await prisma.studentTotalFees.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudentTotalFees and only return the `id`
     * const studentTotalFeesWithIdOnly = await prisma.studentTotalFees.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentTotalFeesUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentTotalFeesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentTotalFeesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudentTotalFees.
     * @param {StudentTotalFeesUpsertArgs} args - Arguments to update or create a StudentTotalFees.
     * @example
     * // Update or create a StudentTotalFees
     * const studentTotalFees = await prisma.studentTotalFees.upsert({
     *   create: {
     *     // ... data to create a StudentTotalFees
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentTotalFees we want to update
     *   }
     * })
     */
    upsert<T extends StudentTotalFeesUpsertArgs>(args: SelectSubset<T, StudentTotalFeesUpsertArgs<ExtArgs>>): Prisma__StudentTotalFeesClient<$Result.GetResult<Prisma.$StudentTotalFeesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentTotalFees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentTotalFeesCountArgs} args - Arguments to filter StudentTotalFees to count.
     * @example
     * // Count the number of StudentTotalFees
     * const count = await prisma.studentTotalFees.count({
     *   where: {
     *     // ... the filter for the StudentTotalFees we want to count
     *   }
     * })
    **/
    count<T extends StudentTotalFeesCountArgs>(
      args?: Subset<T, StudentTotalFeesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentTotalFeesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentTotalFees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentTotalFeesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentTotalFeesAggregateArgs>(args: Subset<T, StudentTotalFeesAggregateArgs>): Prisma.PrismaPromise<GetStudentTotalFeesAggregateType<T>>

    /**
     * Group by StudentTotalFees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentTotalFeesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentTotalFeesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentTotalFeesGroupByArgs['orderBy'] }
        : { orderBy?: StudentTotalFeesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentTotalFeesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentTotalFeesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentTotalFees model
   */
  readonly fields: StudentTotalFeesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentTotalFees.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentTotalFeesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentTotalFees model
   */
  interface StudentTotalFeesFieldRefs {
    readonly id: FieldRef<"StudentTotalFees", 'Int'>
    readonly studentId: FieldRef<"StudentTotalFees", 'String'>
    readonly totalPaidAmount: FieldRef<"StudentTotalFees", 'Float'>
    readonly totalDiscountAmount: FieldRef<"StudentTotalFees", 'Float'>
    readonly totalFineAmount: FieldRef<"StudentTotalFees", 'Float'>
    readonly totalAbacusAmount: FieldRef<"StudentTotalFees", 'Float'>
    readonly totalFeeAmount: FieldRef<"StudentTotalFees", 'Float'>
    readonly dueAmount: FieldRef<"StudentTotalFees", 'Float'>
    readonly status: FieldRef<"StudentTotalFees", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StudentTotalFees findUnique
   */
  export type StudentTotalFeesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentTotalFees
     */
    select?: StudentTotalFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentTotalFees
     */
    omit?: StudentTotalFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentTotalFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentTotalFees to fetch.
     */
    where: StudentTotalFeesWhereUniqueInput
  }

  /**
   * StudentTotalFees findUniqueOrThrow
   */
  export type StudentTotalFeesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentTotalFees
     */
    select?: StudentTotalFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentTotalFees
     */
    omit?: StudentTotalFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentTotalFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentTotalFees to fetch.
     */
    where: StudentTotalFeesWhereUniqueInput
  }

  /**
   * StudentTotalFees findFirst
   */
  export type StudentTotalFeesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentTotalFees
     */
    select?: StudentTotalFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentTotalFees
     */
    omit?: StudentTotalFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentTotalFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentTotalFees to fetch.
     */
    where?: StudentTotalFeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentTotalFees to fetch.
     */
    orderBy?: StudentTotalFeesOrderByWithRelationInput | StudentTotalFeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentTotalFees.
     */
    cursor?: StudentTotalFeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentTotalFees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentTotalFees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentTotalFees.
     */
    distinct?: StudentTotalFeesScalarFieldEnum | StudentTotalFeesScalarFieldEnum[]
  }

  /**
   * StudentTotalFees findFirstOrThrow
   */
  export type StudentTotalFeesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentTotalFees
     */
    select?: StudentTotalFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentTotalFees
     */
    omit?: StudentTotalFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentTotalFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentTotalFees to fetch.
     */
    where?: StudentTotalFeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentTotalFees to fetch.
     */
    orderBy?: StudentTotalFeesOrderByWithRelationInput | StudentTotalFeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentTotalFees.
     */
    cursor?: StudentTotalFeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentTotalFees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentTotalFees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentTotalFees.
     */
    distinct?: StudentTotalFeesScalarFieldEnum | StudentTotalFeesScalarFieldEnum[]
  }

  /**
   * StudentTotalFees findMany
   */
  export type StudentTotalFeesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentTotalFees
     */
    select?: StudentTotalFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentTotalFees
     */
    omit?: StudentTotalFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentTotalFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentTotalFees to fetch.
     */
    where?: StudentTotalFeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentTotalFees to fetch.
     */
    orderBy?: StudentTotalFeesOrderByWithRelationInput | StudentTotalFeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentTotalFees.
     */
    cursor?: StudentTotalFeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentTotalFees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentTotalFees.
     */
    skip?: number
    distinct?: StudentTotalFeesScalarFieldEnum | StudentTotalFeesScalarFieldEnum[]
  }

  /**
   * StudentTotalFees create
   */
  export type StudentTotalFeesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentTotalFees
     */
    select?: StudentTotalFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentTotalFees
     */
    omit?: StudentTotalFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentTotalFeesInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentTotalFees.
     */
    data: XOR<StudentTotalFeesCreateInput, StudentTotalFeesUncheckedCreateInput>
  }

  /**
   * StudentTotalFees createMany
   */
  export type StudentTotalFeesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentTotalFees.
     */
    data: StudentTotalFeesCreateManyInput | StudentTotalFeesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentTotalFees createManyAndReturn
   */
  export type StudentTotalFeesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentTotalFees
     */
    select?: StudentTotalFeesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentTotalFees
     */
    omit?: StudentTotalFeesOmit<ExtArgs> | null
    /**
     * The data used to create many StudentTotalFees.
     */
    data: StudentTotalFeesCreateManyInput | StudentTotalFeesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentTotalFeesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentTotalFees update
   */
  export type StudentTotalFeesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentTotalFees
     */
    select?: StudentTotalFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentTotalFees
     */
    omit?: StudentTotalFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentTotalFeesInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentTotalFees.
     */
    data: XOR<StudentTotalFeesUpdateInput, StudentTotalFeesUncheckedUpdateInput>
    /**
     * Choose, which StudentTotalFees to update.
     */
    where: StudentTotalFeesWhereUniqueInput
  }

  /**
   * StudentTotalFees updateMany
   */
  export type StudentTotalFeesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentTotalFees.
     */
    data: XOR<StudentTotalFeesUpdateManyMutationInput, StudentTotalFeesUncheckedUpdateManyInput>
    /**
     * Filter which StudentTotalFees to update
     */
    where?: StudentTotalFeesWhereInput
    /**
     * Limit how many StudentTotalFees to update.
     */
    limit?: number
  }

  /**
   * StudentTotalFees updateManyAndReturn
   */
  export type StudentTotalFeesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentTotalFees
     */
    select?: StudentTotalFeesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentTotalFees
     */
    omit?: StudentTotalFeesOmit<ExtArgs> | null
    /**
     * The data used to update StudentTotalFees.
     */
    data: XOR<StudentTotalFeesUpdateManyMutationInput, StudentTotalFeesUncheckedUpdateManyInput>
    /**
     * Filter which StudentTotalFees to update
     */
    where?: StudentTotalFeesWhereInput
    /**
     * Limit how many StudentTotalFees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentTotalFeesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentTotalFees upsert
   */
  export type StudentTotalFeesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentTotalFees
     */
    select?: StudentTotalFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentTotalFees
     */
    omit?: StudentTotalFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentTotalFeesInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentTotalFees to update in case it exists.
     */
    where: StudentTotalFeesWhereUniqueInput
    /**
     * In case the StudentTotalFees found by the `where` argument doesn't exist, create a new StudentTotalFees with this data.
     */
    create: XOR<StudentTotalFeesCreateInput, StudentTotalFeesUncheckedCreateInput>
    /**
     * In case the StudentTotalFees was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentTotalFeesUpdateInput, StudentTotalFeesUncheckedUpdateInput>
  }

  /**
   * StudentTotalFees delete
   */
  export type StudentTotalFeesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentTotalFees
     */
    select?: StudentTotalFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentTotalFees
     */
    omit?: StudentTotalFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentTotalFeesInclude<ExtArgs> | null
    /**
     * Filter which StudentTotalFees to delete.
     */
    where: StudentTotalFeesWhereUniqueInput
  }

  /**
   * StudentTotalFees deleteMany
   */
  export type StudentTotalFeesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentTotalFees to delete
     */
    where?: StudentTotalFeesWhereInput
    /**
     * Limit how many StudentTotalFees to delete.
     */
    limit?: number
  }

  /**
   * StudentTotalFees without action
   */
  export type StudentTotalFeesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentTotalFees
     */
    select?: StudentTotalFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentTotalFees
     */
    omit?: StudentTotalFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentTotalFeesInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdminScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    full_name: 'full_name',
    parentName: 'parentName',
    gender: 'gender',
    email: 'email',
    phone: 'phone',
    address: 'address',
    dob: 'dob',
    img: 'img',
    bloodType: 'bloodType',
    role: 'role',
    createdAt: 'createdAt'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const GradeScalarFieldEnum: {
    id: 'id',
    level: 'level'
  };

  export type GradeScalarFieldEnum = (typeof GradeScalarFieldEnum)[keyof typeof GradeScalarFieldEnum]


  export const ClassScalarFieldEnum: {
    id: 'id',
    name: 'name',
    supervisorId: 'supervisorId',
    gradeId: 'gradeId'
  };

  export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


  export const LessonScalarFieldEnum: {
    id: 'id',
    name: 'name',
    day: 'day',
    startTime: 'startTime',
    endTime: 'endTime',
    subjectId: 'subjectId',
    classId: 'classId',
    teacherId: 'teacherId'
  };

  export type LessonScalarFieldEnum = (typeof LessonScalarFieldEnum)[keyof typeof LessonScalarFieldEnum]


  export const AnnouncementScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    date: 'date',
    classId: 'classId'
  };

  export type AnnouncementScalarFieldEnum = (typeof AnnouncementScalarFieldEnum)[keyof typeof AnnouncementScalarFieldEnum]


  export const AttendanceScalarFieldEnum: {
    id: 'id',
    date: 'date',
    present: 'present',
    studentId: 'studentId',
    classId: 'classId'
  };

  export type AttendanceScalarFieldEnum = (typeof AttendanceScalarFieldEnum)[keyof typeof AttendanceScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    startTime: 'startTime',
    endTime: 'endTime',
    classId: 'classId'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const ExamScalarFieldEnum: {
    id: 'id',
    title: 'title',
    date: 'date',
    classId: 'classId'
  };

  export type ExamScalarFieldEnum = (typeof ExamScalarFieldEnum)[keyof typeof ExamScalarFieldEnum]


  export const ExamSubjectScalarFieldEnum: {
    id: 'id',
    examId: 'examId',
    subjectId: 'subjectId',
    maxMarks: 'maxMarks'
  };

  export type ExamSubjectScalarFieldEnum = (typeof ExamSubjectScalarFieldEnum)[keyof typeof ExamSubjectScalarFieldEnum]


  export const HomeworkScalarFieldEnum: {
    id: 'id',
    description: 'description',
    date: 'date',
    classId: 'classId',
    gradeId: 'gradeId'
  };

  export type HomeworkScalarFieldEnum = (typeof HomeworkScalarFieldEnum)[keyof typeof HomeworkScalarFieldEnum]


  export const ResultScalarFieldEnum: {
    id: 'id',
    score: 'score',
    studentId: 'studentId',
    examId: 'examId',
    subjectId: 'subjectId'
  };

  export type ResultScalarFieldEnum = (typeof ResultScalarFieldEnum)[keyof typeof ResultScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    id: 'id',
    username: 'username',
    name: 'name',
    surname: 'surname',
    parentName: 'parentName',
    email: 'email',
    phone: 'phone',
    address: 'address',
    img: 'img',
    bloodType: 'bloodType',
    gender: 'gender',
    dob: 'dob',
    createdAt: 'createdAt',
    deletedAt: 'deletedAt',
    classId: 'classId',
    clerk_id: 'clerk_id',
    academicYear: 'academicYear'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const ClerkStudentsScalarFieldEnum: {
    clerk_id: 'clerk_id',
    user_id: 'user_id',
    username: 'username',
    password: 'password',
    full_name: 'full_name',
    role: 'role',
    studentId: 'studentId'
  };

  export type ClerkStudentsScalarFieldEnum = (typeof ClerkStudentsScalarFieldEnum)[keyof typeof ClerkStudentsScalarFieldEnum]


  export const SubjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type SubjectScalarFieldEnum = (typeof SubjectScalarFieldEnum)[keyof typeof SubjectScalarFieldEnum]


  export const TeacherScalarFieldEnum: {
    id: 'id',
    username: 'username',
    name: 'name',
    surname: 'surname',
    email: 'email',
    phone: 'phone',
    address: 'address',
    img: 'img',
    bloodType: 'bloodType',
    gender: 'gender',
    createdAt: 'createdAt',
    deletedAt: 'deletedAt',
    supervisor: 'supervisor',
    dob: 'dob',
    classId: 'classId',
    clerk_id: 'clerk_id'
  };

  export type TeacherScalarFieldEnum = (typeof TeacherScalarFieldEnum)[keyof typeof TeacherScalarFieldEnum]


  export const TeacherSubjectScalarFieldEnum: {
    teacherId: 'teacherId',
    subjectId: 'subjectId'
  };

  export type TeacherSubjectScalarFieldEnum = (typeof TeacherSubjectScalarFieldEnum)[keyof typeof TeacherSubjectScalarFieldEnum]


  export const ClerkTeachersScalarFieldEnum: {
    clerk_id: 'clerk_id',
    user_id: 'user_id',
    username: 'username',
    password: 'password',
    full_name: 'full_name',
    role: 'role',
    teacherId: 'teacherId'
  };

  export type ClerkTeachersScalarFieldEnum = (typeof ClerkTeachersScalarFieldEnum)[keyof typeof ClerkTeachersScalarFieldEnum]


  export const FeeStructureScalarFieldEnum: {
    id: 'id',
    gradeId: 'gradeId',
    startDate: 'startDate',
    dueDate: 'dueDate',
    termFees: 'termFees',
    abacusFees: 'abacusFees',
    term: 'term',
    academicYear: 'academicYear'
  };

  export type FeeStructureScalarFieldEnum = (typeof FeeStructureScalarFieldEnum)[keyof typeof FeeStructureScalarFieldEnum]


  export const FeeTransactionScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    term: 'term',
    studentFeesId: 'studentFeesId',
    amount: 'amount',
    discountAmount: 'discountAmount',
    fineAmount: 'fineAmount',
    receiptDate: 'receiptDate',
    receiptNo: 'receiptNo',
    paymentMode: 'paymentMode',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    remarks: 'remarks'
  };

  export type FeeTransactionScalarFieldEnum = (typeof FeeTransactionScalarFieldEnum)[keyof typeof FeeTransactionScalarFieldEnum]


  export const StudentFeesScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    paidAmount: 'paidAmount',
    abacusPaidAmount: 'abacusPaidAmount',
    feeStructureId: 'feeStructureId',
    discountAmount: 'discountAmount',
    fineAmount: 'fineAmount',
    receiptDate: 'receiptDate',
    receivedDate: 'receivedDate',
    paymentMode: 'paymentMode',
    academicYear: 'academicYear',
    receiptNo: 'receiptNo',
    term: 'term',
    remarks: 'remarks'
  };

  export type StudentFeesScalarFieldEnum = (typeof StudentFeesScalarFieldEnum)[keyof typeof StudentFeesScalarFieldEnum]


  export const StudentTotalFeesScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    totalPaidAmount: 'totalPaidAmount',
    totalDiscountAmount: 'totalDiscountAmount',
    totalFineAmount: 'totalFineAmount',
    totalAbacusAmount: 'totalAbacusAmount',
    totalFeeAmount: 'totalFeeAmount',
    dueAmount: 'dueAmount',
    status: 'status'
  };

  export type StudentTotalFeesScalarFieldEnum = (typeof StudentTotalFeesScalarFieldEnum)[keyof typeof StudentTotalFeesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'LessonDay'
   */
  export type EnumLessonDayFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LessonDay'>
    


  /**
   * Reference to a field of type 'LessonDay[]'
   */
  export type ListEnumLessonDayFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LessonDay[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'AcademicYear'
   */
  export type EnumAcademicYearFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AcademicYear'>
    


  /**
   * Reference to a field of type 'AcademicYear[]'
   */
  export type ListEnumAcademicYearFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AcademicYear[]'>
    


  /**
   * Reference to a field of type 'Term'
   */
  export type EnumTermFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Term'>
    


  /**
   * Reference to a field of type 'Term[]'
   */
  export type ListEnumTermFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Term[]'>
    


  /**
   * Reference to a field of type 'PaymentMode'
   */
  export type EnumPaymentModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMode'>
    


  /**
   * Reference to a field of type 'PaymentMode[]'
   */
  export type ListEnumPaymentModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMode[]'>
    
  /**
   * Deep Input Types
   */


  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: IntFilter<"Admin"> | number
    username?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    full_name?: StringFilter<"Admin"> | string
    parentName?: StringNullableFilter<"Admin"> | string | null
    gender?: StringNullableFilter<"Admin"> | string | null
    email?: StringNullableFilter<"Admin"> | string | null
    phone?: StringNullableFilter<"Admin"> | string | null
    address?: StringNullableFilter<"Admin"> | string | null
    dob?: DateTimeNullableFilter<"Admin"> | Date | string | null
    img?: StringNullableFilter<"Admin"> | string | null
    bloodType?: StringNullableFilter<"Admin"> | string | null
    role?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    full_name?: SortOrder
    parentName?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    img?: SortOrderInput | SortOrder
    bloodType?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    password?: StringFilter<"Admin"> | string
    full_name?: StringFilter<"Admin"> | string
    parentName?: StringNullableFilter<"Admin"> | string | null
    gender?: StringNullableFilter<"Admin"> | string | null
    email?: StringNullableFilter<"Admin"> | string | null
    phone?: StringNullableFilter<"Admin"> | string | null
    address?: StringNullableFilter<"Admin"> | string | null
    dob?: DateTimeNullableFilter<"Admin"> | Date | string | null
    img?: StringNullableFilter<"Admin"> | string | null
    bloodType?: StringNullableFilter<"Admin"> | string | null
    role?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
  }, "id" | "username">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    full_name?: SortOrder
    parentName?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    img?: SortOrderInput | SortOrder
    bloodType?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Admin"> | number
    username?: StringWithAggregatesFilter<"Admin"> | string
    password?: StringWithAggregatesFilter<"Admin"> | string
    full_name?: StringWithAggregatesFilter<"Admin"> | string
    parentName?: StringNullableWithAggregatesFilter<"Admin"> | string | null
    gender?: StringNullableWithAggregatesFilter<"Admin"> | string | null
    email?: StringNullableWithAggregatesFilter<"Admin"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Admin"> | string | null
    address?: StringNullableWithAggregatesFilter<"Admin"> | string | null
    dob?: DateTimeNullableWithAggregatesFilter<"Admin"> | Date | string | null
    img?: StringNullableWithAggregatesFilter<"Admin"> | string | null
    bloodType?: StringNullableWithAggregatesFilter<"Admin"> | string | null
    role?: StringWithAggregatesFilter<"Admin"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
  }

  export type GradeWhereInput = {
    AND?: GradeWhereInput | GradeWhereInput[]
    OR?: GradeWhereInput[]
    NOT?: GradeWhereInput | GradeWhereInput[]
    id?: IntFilter<"Grade"> | number
    level?: StringFilter<"Grade"> | string
    feestructure?: FeeStructureListRelationFilter
    Homework?: HomeworkListRelationFilter
    classes?: ClassListRelationFilter
  }

  export type GradeOrderByWithRelationInput = {
    id?: SortOrder
    level?: SortOrder
    feestructure?: FeeStructureOrderByRelationAggregateInput
    Homework?: HomeworkOrderByRelationAggregateInput
    classes?: ClassOrderByRelationAggregateInput
  }

  export type GradeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    level?: string
    AND?: GradeWhereInput | GradeWhereInput[]
    OR?: GradeWhereInput[]
    NOT?: GradeWhereInput | GradeWhereInput[]
    feestructure?: FeeStructureListRelationFilter
    Homework?: HomeworkListRelationFilter
    classes?: ClassListRelationFilter
  }, "id" | "level">

  export type GradeOrderByWithAggregationInput = {
    id?: SortOrder
    level?: SortOrder
    _count?: GradeCountOrderByAggregateInput
    _avg?: GradeAvgOrderByAggregateInput
    _max?: GradeMaxOrderByAggregateInput
    _min?: GradeMinOrderByAggregateInput
    _sum?: GradeSumOrderByAggregateInput
  }

  export type GradeScalarWhereWithAggregatesInput = {
    AND?: GradeScalarWhereWithAggregatesInput | GradeScalarWhereWithAggregatesInput[]
    OR?: GradeScalarWhereWithAggregatesInput[]
    NOT?: GradeScalarWhereWithAggregatesInput | GradeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Grade"> | number
    level?: StringWithAggregatesFilter<"Grade"> | string
  }

  export type ClassWhereInput = {
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    id?: IntFilter<"Class"> | number
    name?: StringFilter<"Class"> | string
    supervisorId?: StringNullableFilter<"Class"> | string | null
    gradeId?: IntFilter<"Class"> | number
    Announcement?: AnnouncementListRelationFilter
    attendance?: AttendanceListRelationFilter
    events?: EventListRelationFilter
    exams?: ExamListRelationFilter
    homeworks?: HomeworkListRelationFilter
    lessons?: LessonListRelationFilter
    students?: StudentListRelationFilter
    Grade?: XOR<GradeScalarRelationFilter, GradeWhereInput>
    Teacher?: XOR<TeacherNullableScalarRelationFilter, TeacherWhereInput> | null
  }

  export type ClassOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    supervisorId?: SortOrderInput | SortOrder
    gradeId?: SortOrder
    Announcement?: AnnouncementOrderByRelationAggregateInput
    attendance?: AttendanceOrderByRelationAggregateInput
    events?: EventOrderByRelationAggregateInput
    exams?: ExamOrderByRelationAggregateInput
    homeworks?: HomeworkOrderByRelationAggregateInput
    lessons?: LessonOrderByRelationAggregateInput
    students?: StudentOrderByRelationAggregateInput
    Grade?: GradeOrderByWithRelationInput
    Teacher?: TeacherOrderByWithRelationInput
  }

  export type ClassWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    supervisorId?: string
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    gradeId?: IntFilter<"Class"> | number
    Announcement?: AnnouncementListRelationFilter
    attendance?: AttendanceListRelationFilter
    events?: EventListRelationFilter
    exams?: ExamListRelationFilter
    homeworks?: HomeworkListRelationFilter
    lessons?: LessonListRelationFilter
    students?: StudentListRelationFilter
    Grade?: XOR<GradeScalarRelationFilter, GradeWhereInput>
    Teacher?: XOR<TeacherNullableScalarRelationFilter, TeacherWhereInput> | null
  }, "id" | "name" | "supervisorId">

  export type ClassOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    supervisorId?: SortOrderInput | SortOrder
    gradeId?: SortOrder
    _count?: ClassCountOrderByAggregateInput
    _avg?: ClassAvgOrderByAggregateInput
    _max?: ClassMaxOrderByAggregateInput
    _min?: ClassMinOrderByAggregateInput
    _sum?: ClassSumOrderByAggregateInput
  }

  export type ClassScalarWhereWithAggregatesInput = {
    AND?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    OR?: ClassScalarWhereWithAggregatesInput[]
    NOT?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Class"> | number
    name?: StringWithAggregatesFilter<"Class"> | string
    supervisorId?: StringNullableWithAggregatesFilter<"Class"> | string | null
    gradeId?: IntWithAggregatesFilter<"Class"> | number
  }

  export type LessonWhereInput = {
    AND?: LessonWhereInput | LessonWhereInput[]
    OR?: LessonWhereInput[]
    NOT?: LessonWhereInput | LessonWhereInput[]
    id?: IntFilter<"Lesson"> | number
    name?: StringFilter<"Lesson"> | string
    day?: EnumLessonDayFilter<"Lesson"> | $Enums.LessonDay
    startTime?: DateTimeFilter<"Lesson"> | Date | string
    endTime?: DateTimeFilter<"Lesson"> | Date | string
    subjectId?: IntFilter<"Lesson"> | number
    classId?: IntFilter<"Lesson"> | number
    teacherId?: StringFilter<"Lesson"> | string
    Class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    Subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    Teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
  }

  export type LessonOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    day?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    subjectId?: SortOrder
    classId?: SortOrder
    teacherId?: SortOrder
    Class?: ClassOrderByWithRelationInput
    Subject?: SubjectOrderByWithRelationInput
    Teacher?: TeacherOrderByWithRelationInput
  }

  export type LessonWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: LessonWhereInput | LessonWhereInput[]
    OR?: LessonWhereInput[]
    NOT?: LessonWhereInput | LessonWhereInput[]
    day?: EnumLessonDayFilter<"Lesson"> | $Enums.LessonDay
    startTime?: DateTimeFilter<"Lesson"> | Date | string
    endTime?: DateTimeFilter<"Lesson"> | Date | string
    subjectId?: IntFilter<"Lesson"> | number
    classId?: IntFilter<"Lesson"> | number
    teacherId?: StringFilter<"Lesson"> | string
    Class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    Subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    Teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
  }, "id" | "name">

  export type LessonOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    day?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    subjectId?: SortOrder
    classId?: SortOrder
    teacherId?: SortOrder
    _count?: LessonCountOrderByAggregateInput
    _avg?: LessonAvgOrderByAggregateInput
    _max?: LessonMaxOrderByAggregateInput
    _min?: LessonMinOrderByAggregateInput
    _sum?: LessonSumOrderByAggregateInput
  }

  export type LessonScalarWhereWithAggregatesInput = {
    AND?: LessonScalarWhereWithAggregatesInput | LessonScalarWhereWithAggregatesInput[]
    OR?: LessonScalarWhereWithAggregatesInput[]
    NOT?: LessonScalarWhereWithAggregatesInput | LessonScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Lesson"> | number
    name?: StringWithAggregatesFilter<"Lesson"> | string
    day?: EnumLessonDayWithAggregatesFilter<"Lesson"> | $Enums.LessonDay
    startTime?: DateTimeWithAggregatesFilter<"Lesson"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"Lesson"> | Date | string
    subjectId?: IntWithAggregatesFilter<"Lesson"> | number
    classId?: IntWithAggregatesFilter<"Lesson"> | number
    teacherId?: StringWithAggregatesFilter<"Lesson"> | string
  }

  export type AnnouncementWhereInput = {
    AND?: AnnouncementWhereInput | AnnouncementWhereInput[]
    OR?: AnnouncementWhereInput[]
    NOT?: AnnouncementWhereInput | AnnouncementWhereInput[]
    id?: IntFilter<"Announcement"> | number
    title?: StringFilter<"Announcement"> | string
    description?: StringFilter<"Announcement"> | string
    date?: DateTimeFilter<"Announcement"> | Date | string
    classId?: IntNullableFilter<"Announcement"> | number | null
    Class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
  }

  export type AnnouncementOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    classId?: SortOrderInput | SortOrder
    Class?: ClassOrderByWithRelationInput
  }

  export type AnnouncementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AnnouncementWhereInput | AnnouncementWhereInput[]
    OR?: AnnouncementWhereInput[]
    NOT?: AnnouncementWhereInput | AnnouncementWhereInput[]
    title?: StringFilter<"Announcement"> | string
    description?: StringFilter<"Announcement"> | string
    date?: DateTimeFilter<"Announcement"> | Date | string
    classId?: IntNullableFilter<"Announcement"> | number | null
    Class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
  }, "id">

  export type AnnouncementOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    classId?: SortOrderInput | SortOrder
    _count?: AnnouncementCountOrderByAggregateInput
    _avg?: AnnouncementAvgOrderByAggregateInput
    _max?: AnnouncementMaxOrderByAggregateInput
    _min?: AnnouncementMinOrderByAggregateInput
    _sum?: AnnouncementSumOrderByAggregateInput
  }

  export type AnnouncementScalarWhereWithAggregatesInput = {
    AND?: AnnouncementScalarWhereWithAggregatesInput | AnnouncementScalarWhereWithAggregatesInput[]
    OR?: AnnouncementScalarWhereWithAggregatesInput[]
    NOT?: AnnouncementScalarWhereWithAggregatesInput | AnnouncementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Announcement"> | number
    title?: StringWithAggregatesFilter<"Announcement"> | string
    description?: StringWithAggregatesFilter<"Announcement"> | string
    date?: DateTimeWithAggregatesFilter<"Announcement"> | Date | string
    classId?: IntNullableWithAggregatesFilter<"Announcement"> | number | null
  }

  export type AttendanceWhereInput = {
    AND?: AttendanceWhereInput | AttendanceWhereInput[]
    OR?: AttendanceWhereInput[]
    NOT?: AttendanceWhereInput | AttendanceWhereInput[]
    id?: IntFilter<"Attendance"> | number
    date?: DateTimeFilter<"Attendance"> | Date | string
    present?: BoolFilter<"Attendance"> | boolean
    studentId?: StringFilter<"Attendance"> | string
    classId?: IntFilter<"Attendance"> | number
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    Student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }

  export type AttendanceOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    present?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    class?: ClassOrderByWithRelationInput
    Student?: StudentOrderByWithRelationInput
  }

  export type AttendanceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AttendanceWhereInput | AttendanceWhereInput[]
    OR?: AttendanceWhereInput[]
    NOT?: AttendanceWhereInput | AttendanceWhereInput[]
    date?: DateTimeFilter<"Attendance"> | Date | string
    present?: BoolFilter<"Attendance"> | boolean
    studentId?: StringFilter<"Attendance"> | string
    classId?: IntFilter<"Attendance"> | number
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    Student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }, "id">

  export type AttendanceOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    present?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    _count?: AttendanceCountOrderByAggregateInput
    _avg?: AttendanceAvgOrderByAggregateInput
    _max?: AttendanceMaxOrderByAggregateInput
    _min?: AttendanceMinOrderByAggregateInput
    _sum?: AttendanceSumOrderByAggregateInput
  }

  export type AttendanceScalarWhereWithAggregatesInput = {
    AND?: AttendanceScalarWhereWithAggregatesInput | AttendanceScalarWhereWithAggregatesInput[]
    OR?: AttendanceScalarWhereWithAggregatesInput[]
    NOT?: AttendanceScalarWhereWithAggregatesInput | AttendanceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Attendance"> | number
    date?: DateTimeWithAggregatesFilter<"Attendance"> | Date | string
    present?: BoolWithAggregatesFilter<"Attendance"> | boolean
    studentId?: StringWithAggregatesFilter<"Attendance"> | string
    classId?: IntWithAggregatesFilter<"Attendance"> | number
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: IntFilter<"Event"> | number
    title?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    startTime?: DateTimeFilter<"Event"> | Date | string
    endTime?: DateTimeFilter<"Event"> | Date | string
    classId?: IntNullableFilter<"Event"> | number | null
    Class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    classId?: SortOrderInput | SortOrder
    Class?: ClassOrderByWithRelationInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    title?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    startTime?: DateTimeFilter<"Event"> | Date | string
    endTime?: DateTimeFilter<"Event"> | Date | string
    classId?: IntNullableFilter<"Event"> | number | null
    Class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    classId?: SortOrderInput | SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Event"> | number
    title?: StringWithAggregatesFilter<"Event"> | string
    description?: StringWithAggregatesFilter<"Event"> | string
    startTime?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    classId?: IntNullableWithAggregatesFilter<"Event"> | number | null
  }

  export type ExamWhereInput = {
    AND?: ExamWhereInput | ExamWhereInput[]
    OR?: ExamWhereInput[]
    NOT?: ExamWhereInput | ExamWhereInput[]
    id?: IntFilter<"Exam"> | number
    title?: StringFilter<"Exam"> | string
    date?: DateTimeFilter<"Exam"> | Date | string
    classId?: IntFilter<"Exam"> | number
    Class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    subjects?: ExamSubjectListRelationFilter
    results?: ResultListRelationFilter
  }

  export type ExamOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    classId?: SortOrder
    Class?: ClassOrderByWithRelationInput
    subjects?: ExamSubjectOrderByRelationAggregateInput
    results?: ResultOrderByRelationAggregateInput
  }

  export type ExamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ExamWhereInput | ExamWhereInput[]
    OR?: ExamWhereInput[]
    NOT?: ExamWhereInput | ExamWhereInput[]
    title?: StringFilter<"Exam"> | string
    date?: DateTimeFilter<"Exam"> | Date | string
    classId?: IntFilter<"Exam"> | number
    Class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    subjects?: ExamSubjectListRelationFilter
    results?: ResultListRelationFilter
  }, "id">

  export type ExamOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    classId?: SortOrder
    _count?: ExamCountOrderByAggregateInput
    _avg?: ExamAvgOrderByAggregateInput
    _max?: ExamMaxOrderByAggregateInput
    _min?: ExamMinOrderByAggregateInput
    _sum?: ExamSumOrderByAggregateInput
  }

  export type ExamScalarWhereWithAggregatesInput = {
    AND?: ExamScalarWhereWithAggregatesInput | ExamScalarWhereWithAggregatesInput[]
    OR?: ExamScalarWhereWithAggregatesInput[]
    NOT?: ExamScalarWhereWithAggregatesInput | ExamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Exam"> | number
    title?: StringWithAggregatesFilter<"Exam"> | string
    date?: DateTimeWithAggregatesFilter<"Exam"> | Date | string
    classId?: IntWithAggregatesFilter<"Exam"> | number
  }

  export type ExamSubjectWhereInput = {
    AND?: ExamSubjectWhereInput | ExamSubjectWhereInput[]
    OR?: ExamSubjectWhereInput[]
    NOT?: ExamSubjectWhereInput | ExamSubjectWhereInput[]
    id?: IntFilter<"ExamSubject"> | number
    examId?: IntFilter<"ExamSubject"> | number
    subjectId?: IntFilter<"ExamSubject"> | number
    maxMarks?: IntFilter<"ExamSubject"> | number
    Exam?: XOR<ExamScalarRelationFilter, ExamWhereInput>
    Subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
  }

  export type ExamSubjectOrderByWithRelationInput = {
    id?: SortOrder
    examId?: SortOrder
    subjectId?: SortOrder
    maxMarks?: SortOrder
    Exam?: ExamOrderByWithRelationInput
    Subject?: SubjectOrderByWithRelationInput
  }

  export type ExamSubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    examId_subjectId?: ExamSubjectExamIdSubjectIdCompoundUniqueInput
    AND?: ExamSubjectWhereInput | ExamSubjectWhereInput[]
    OR?: ExamSubjectWhereInput[]
    NOT?: ExamSubjectWhereInput | ExamSubjectWhereInput[]
    examId?: IntFilter<"ExamSubject"> | number
    subjectId?: IntFilter<"ExamSubject"> | number
    maxMarks?: IntFilter<"ExamSubject"> | number
    Exam?: XOR<ExamScalarRelationFilter, ExamWhereInput>
    Subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
  }, "id" | "examId_subjectId">

  export type ExamSubjectOrderByWithAggregationInput = {
    id?: SortOrder
    examId?: SortOrder
    subjectId?: SortOrder
    maxMarks?: SortOrder
    _count?: ExamSubjectCountOrderByAggregateInput
    _avg?: ExamSubjectAvgOrderByAggregateInput
    _max?: ExamSubjectMaxOrderByAggregateInput
    _min?: ExamSubjectMinOrderByAggregateInput
    _sum?: ExamSubjectSumOrderByAggregateInput
  }

  export type ExamSubjectScalarWhereWithAggregatesInput = {
    AND?: ExamSubjectScalarWhereWithAggregatesInput | ExamSubjectScalarWhereWithAggregatesInput[]
    OR?: ExamSubjectScalarWhereWithAggregatesInput[]
    NOT?: ExamSubjectScalarWhereWithAggregatesInput | ExamSubjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ExamSubject"> | number
    examId?: IntWithAggregatesFilter<"ExamSubject"> | number
    subjectId?: IntWithAggregatesFilter<"ExamSubject"> | number
    maxMarks?: IntWithAggregatesFilter<"ExamSubject"> | number
  }

  export type HomeworkWhereInput = {
    AND?: HomeworkWhereInput | HomeworkWhereInput[]
    OR?: HomeworkWhereInput[]
    NOT?: HomeworkWhereInput | HomeworkWhereInput[]
    id?: IntFilter<"Homework"> | number
    description?: StringFilter<"Homework"> | string
    date?: DateTimeFilter<"Homework"> | Date | string
    classId?: IntFilter<"Homework"> | number
    gradeId?: IntFilter<"Homework"> | number
    Class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    Grade?: XOR<GradeScalarRelationFilter, GradeWhereInput>
  }

  export type HomeworkOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    date?: SortOrder
    classId?: SortOrder
    gradeId?: SortOrder
    Class?: ClassOrderByWithRelationInput
    Grade?: GradeOrderByWithRelationInput
  }

  export type HomeworkWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HomeworkWhereInput | HomeworkWhereInput[]
    OR?: HomeworkWhereInput[]
    NOT?: HomeworkWhereInput | HomeworkWhereInput[]
    description?: StringFilter<"Homework"> | string
    date?: DateTimeFilter<"Homework"> | Date | string
    classId?: IntFilter<"Homework"> | number
    gradeId?: IntFilter<"Homework"> | number
    Class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    Grade?: XOR<GradeScalarRelationFilter, GradeWhereInput>
  }, "id">

  export type HomeworkOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    date?: SortOrder
    classId?: SortOrder
    gradeId?: SortOrder
    _count?: HomeworkCountOrderByAggregateInput
    _avg?: HomeworkAvgOrderByAggregateInput
    _max?: HomeworkMaxOrderByAggregateInput
    _min?: HomeworkMinOrderByAggregateInput
    _sum?: HomeworkSumOrderByAggregateInput
  }

  export type HomeworkScalarWhereWithAggregatesInput = {
    AND?: HomeworkScalarWhereWithAggregatesInput | HomeworkScalarWhereWithAggregatesInput[]
    OR?: HomeworkScalarWhereWithAggregatesInput[]
    NOT?: HomeworkScalarWhereWithAggregatesInput | HomeworkScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Homework"> | number
    description?: StringWithAggregatesFilter<"Homework"> | string
    date?: DateTimeWithAggregatesFilter<"Homework"> | Date | string
    classId?: IntWithAggregatesFilter<"Homework"> | number
    gradeId?: IntWithAggregatesFilter<"Homework"> | number
  }

  export type ResultWhereInput = {
    AND?: ResultWhereInput | ResultWhereInput[]
    OR?: ResultWhereInput[]
    NOT?: ResultWhereInput | ResultWhereInput[]
    id?: IntFilter<"Result"> | number
    score?: FloatFilter<"Result"> | number
    studentId?: StringFilter<"Result"> | string
    examId?: IntFilter<"Result"> | number
    subjectId?: IntFilter<"Result"> | number
    Exam?: XOR<ExamScalarRelationFilter, ExamWhereInput>
    Student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    Subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
  }

  export type ResultOrderByWithRelationInput = {
    id?: SortOrder
    score?: SortOrder
    studentId?: SortOrder
    examId?: SortOrder
    subjectId?: SortOrder
    Exam?: ExamOrderByWithRelationInput
    Student?: StudentOrderByWithRelationInput
    Subject?: SubjectOrderByWithRelationInput
  }

  export type ResultWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ResultWhereInput | ResultWhereInput[]
    OR?: ResultWhereInput[]
    NOT?: ResultWhereInput | ResultWhereInput[]
    score?: FloatFilter<"Result"> | number
    studentId?: StringFilter<"Result"> | string
    examId?: IntFilter<"Result"> | number
    subjectId?: IntFilter<"Result"> | number
    Exam?: XOR<ExamScalarRelationFilter, ExamWhereInput>
    Student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    Subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
  }, "id">

  export type ResultOrderByWithAggregationInput = {
    id?: SortOrder
    score?: SortOrder
    studentId?: SortOrder
    examId?: SortOrder
    subjectId?: SortOrder
    _count?: ResultCountOrderByAggregateInput
    _avg?: ResultAvgOrderByAggregateInput
    _max?: ResultMaxOrderByAggregateInput
    _min?: ResultMinOrderByAggregateInput
    _sum?: ResultSumOrderByAggregateInput
  }

  export type ResultScalarWhereWithAggregatesInput = {
    AND?: ResultScalarWhereWithAggregatesInput | ResultScalarWhereWithAggregatesInput[]
    OR?: ResultScalarWhereWithAggregatesInput[]
    NOT?: ResultScalarWhereWithAggregatesInput | ResultScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Result"> | number
    score?: FloatWithAggregatesFilter<"Result"> | number
    studentId?: StringWithAggregatesFilter<"Result"> | string
    examId?: IntWithAggregatesFilter<"Result"> | number
    subjectId?: IntWithAggregatesFilter<"Result"> | number
  }

  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    id?: StringFilter<"Student"> | string
    username?: StringFilter<"Student"> | string
    name?: StringFilter<"Student"> | string
    surname?: StringNullableFilter<"Student"> | string | null
    parentName?: StringFilter<"Student"> | string
    email?: StringNullableFilter<"Student"> | string | null
    phone?: StringFilter<"Student"> | string
    address?: StringFilter<"Student"> | string
    img?: StringNullableFilter<"Student"> | string | null
    bloodType?: StringNullableFilter<"Student"> | string | null
    gender?: EnumGenderFilter<"Student"> | $Enums.Gender
    dob?: DateTimeFilter<"Student"> | Date | string
    createdAt?: DateTimeFilter<"Student"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Student"> | Date | string | null
    classId?: IntFilter<"Student"> | number
    clerk_id?: StringNullableFilter<"Student"> | string | null
    academicYear?: EnumAcademicYearFilter<"Student"> | $Enums.AcademicYear
    Attendance?: AttendanceListRelationFilter
    clerkStudent?: XOR<ClerkStudentsNullableScalarRelationFilter, ClerkStudentsWhereInput> | null
    feeTransactions?: FeeTransactionListRelationFilter
    results?: ResultListRelationFilter
    Class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    studentFees?: StudentFeesListRelationFilter
    totalFees?: StudentTotalFeesListRelationFilter
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    surname?: SortOrderInput | SortOrder
    parentName?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrder
    address?: SortOrder
    img?: SortOrderInput | SortOrder
    bloodType?: SortOrderInput | SortOrder
    gender?: SortOrder
    dob?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    classId?: SortOrder
    clerk_id?: SortOrderInput | SortOrder
    academicYear?: SortOrder
    Attendance?: AttendanceOrderByRelationAggregateInput
    clerkStudent?: ClerkStudentsOrderByWithRelationInput
    feeTransactions?: FeeTransactionOrderByRelationAggregateInput
    results?: ResultOrderByRelationAggregateInput
    Class?: ClassOrderByWithRelationInput
    studentFees?: StudentFeesOrderByRelationAggregateInput
    totalFees?: StudentTotalFeesOrderByRelationAggregateInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    clerk_id?: string
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    name?: StringFilter<"Student"> | string
    surname?: StringNullableFilter<"Student"> | string | null
    parentName?: StringFilter<"Student"> | string
    phone?: StringFilter<"Student"> | string
    address?: StringFilter<"Student"> | string
    img?: StringNullableFilter<"Student"> | string | null
    bloodType?: StringNullableFilter<"Student"> | string | null
    gender?: EnumGenderFilter<"Student"> | $Enums.Gender
    dob?: DateTimeFilter<"Student"> | Date | string
    createdAt?: DateTimeFilter<"Student"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Student"> | Date | string | null
    classId?: IntFilter<"Student"> | number
    academicYear?: EnumAcademicYearFilter<"Student"> | $Enums.AcademicYear
    Attendance?: AttendanceListRelationFilter
    clerkStudent?: XOR<ClerkStudentsNullableScalarRelationFilter, ClerkStudentsWhereInput> | null
    feeTransactions?: FeeTransactionListRelationFilter
    results?: ResultListRelationFilter
    Class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    studentFees?: StudentFeesListRelationFilter
    totalFees?: StudentTotalFeesListRelationFilter
  }, "id" | "username" | "email" | "clerk_id">

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    surname?: SortOrderInput | SortOrder
    parentName?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrder
    address?: SortOrder
    img?: SortOrderInput | SortOrder
    bloodType?: SortOrderInput | SortOrder
    gender?: SortOrder
    dob?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    classId?: SortOrder
    clerk_id?: SortOrderInput | SortOrder
    academicYear?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Student"> | string
    username?: StringWithAggregatesFilter<"Student"> | string
    name?: StringWithAggregatesFilter<"Student"> | string
    surname?: StringNullableWithAggregatesFilter<"Student"> | string | null
    parentName?: StringWithAggregatesFilter<"Student"> | string
    email?: StringNullableWithAggregatesFilter<"Student"> | string | null
    phone?: StringWithAggregatesFilter<"Student"> | string
    address?: StringWithAggregatesFilter<"Student"> | string
    img?: StringNullableWithAggregatesFilter<"Student"> | string | null
    bloodType?: StringNullableWithAggregatesFilter<"Student"> | string | null
    gender?: EnumGenderWithAggregatesFilter<"Student"> | $Enums.Gender
    dob?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Student"> | Date | string | null
    classId?: IntWithAggregatesFilter<"Student"> | number
    clerk_id?: StringNullableWithAggregatesFilter<"Student"> | string | null
    academicYear?: EnumAcademicYearWithAggregatesFilter<"Student"> | $Enums.AcademicYear
  }

  export type ClerkStudentsWhereInput = {
    AND?: ClerkStudentsWhereInput | ClerkStudentsWhereInput[]
    OR?: ClerkStudentsWhereInput[]
    NOT?: ClerkStudentsWhereInput | ClerkStudentsWhereInput[]
    clerk_id?: StringFilter<"ClerkStudents"> | string
    user_id?: StringNullableFilter<"ClerkStudents"> | string | null
    username?: StringFilter<"ClerkStudents"> | string
    password?: StringFilter<"ClerkStudents"> | string
    full_name?: StringFilter<"ClerkStudents"> | string
    role?: StringFilter<"ClerkStudents"> | string
    studentId?: StringNullableFilter<"ClerkStudents"> | string | null
    student?: XOR<StudentNullableScalarRelationFilter, StudentWhereInput> | null
  }

  export type ClerkStudentsOrderByWithRelationInput = {
    clerk_id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    username?: SortOrder
    password?: SortOrder
    full_name?: SortOrder
    role?: SortOrder
    studentId?: SortOrderInput | SortOrder
    student?: StudentOrderByWithRelationInput
  }

  export type ClerkStudentsWhereUniqueInput = Prisma.AtLeast<{
    clerk_id?: string
    user_id?: string
    username?: string
    studentId?: string
    AND?: ClerkStudentsWhereInput | ClerkStudentsWhereInput[]
    OR?: ClerkStudentsWhereInput[]
    NOT?: ClerkStudentsWhereInput | ClerkStudentsWhereInput[]
    password?: StringFilter<"ClerkStudents"> | string
    full_name?: StringFilter<"ClerkStudents"> | string
    role?: StringFilter<"ClerkStudents"> | string
    student?: XOR<StudentNullableScalarRelationFilter, StudentWhereInput> | null
  }, "clerk_id" | "user_id" | "username" | "studentId">

  export type ClerkStudentsOrderByWithAggregationInput = {
    clerk_id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    username?: SortOrder
    password?: SortOrder
    full_name?: SortOrder
    role?: SortOrder
    studentId?: SortOrderInput | SortOrder
    _count?: ClerkStudentsCountOrderByAggregateInput
    _max?: ClerkStudentsMaxOrderByAggregateInput
    _min?: ClerkStudentsMinOrderByAggregateInput
  }

  export type ClerkStudentsScalarWhereWithAggregatesInput = {
    AND?: ClerkStudentsScalarWhereWithAggregatesInput | ClerkStudentsScalarWhereWithAggregatesInput[]
    OR?: ClerkStudentsScalarWhereWithAggregatesInput[]
    NOT?: ClerkStudentsScalarWhereWithAggregatesInput | ClerkStudentsScalarWhereWithAggregatesInput[]
    clerk_id?: StringWithAggregatesFilter<"ClerkStudents"> | string
    user_id?: StringNullableWithAggregatesFilter<"ClerkStudents"> | string | null
    username?: StringWithAggregatesFilter<"ClerkStudents"> | string
    password?: StringWithAggregatesFilter<"ClerkStudents"> | string
    full_name?: StringWithAggregatesFilter<"ClerkStudents"> | string
    role?: StringWithAggregatesFilter<"ClerkStudents"> | string
    studentId?: StringNullableWithAggregatesFilter<"ClerkStudents"> | string | null
  }

  export type SubjectWhereInput = {
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    id?: IntFilter<"Subject"> | number
    name?: StringFilter<"Subject"> | string
    createdAt?: DateTimeFilter<"Subject"> | Date | string
    exams?: ExamSubjectListRelationFilter
    lessons?: LessonListRelationFilter
    results?: ResultListRelationFilter
    teachers?: TeacherSubjectListRelationFilter
  }

  export type SubjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    exams?: ExamSubjectOrderByRelationAggregateInput
    lessons?: LessonOrderByRelationAggregateInput
    results?: ResultOrderByRelationAggregateInput
    teachers?: TeacherSubjectOrderByRelationAggregateInput
  }

  export type SubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    createdAt?: DateTimeFilter<"Subject"> | Date | string
    exams?: ExamSubjectListRelationFilter
    lessons?: LessonListRelationFilter
    results?: ResultListRelationFilter
    teachers?: TeacherSubjectListRelationFilter
  }, "id" | "name">

  export type SubjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    _count?: SubjectCountOrderByAggregateInput
    _avg?: SubjectAvgOrderByAggregateInput
    _max?: SubjectMaxOrderByAggregateInput
    _min?: SubjectMinOrderByAggregateInput
    _sum?: SubjectSumOrderByAggregateInput
  }

  export type SubjectScalarWhereWithAggregatesInput = {
    AND?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    OR?: SubjectScalarWhereWithAggregatesInput[]
    NOT?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Subject"> | number
    name?: StringWithAggregatesFilter<"Subject"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Subject"> | Date | string
  }

  export type TeacherWhereInput = {
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    id?: StringFilter<"Teacher"> | string
    username?: StringFilter<"Teacher"> | string
    name?: StringFilter<"Teacher"> | string
    surname?: StringNullableFilter<"Teacher"> | string | null
    email?: StringNullableFilter<"Teacher"> | string | null
    phone?: StringFilter<"Teacher"> | string
    address?: StringFilter<"Teacher"> | string
    img?: StringNullableFilter<"Teacher"> | string | null
    bloodType?: StringNullableFilter<"Teacher"> | string | null
    gender?: EnumGenderFilter<"Teacher"> | $Enums.Gender
    createdAt?: DateTimeFilter<"Teacher"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Teacher"> | Date | string | null
    supervisor?: BoolFilter<"Teacher"> | boolean
    dob?: DateTimeNullableFilter<"Teacher"> | Date | string | null
    classId?: StringNullableFilter<"Teacher"> | string | null
    clerk_id?: StringNullableFilter<"Teacher"> | string | null
    ClerkTeachers?: XOR<ClerkTeachersNullableScalarRelationFilter, ClerkTeachersWhereInput> | null
    lessons?: LessonListRelationFilter
    subjects?: TeacherSubjectListRelationFilter
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
  }

  export type TeacherOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    surname?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrder
    address?: SortOrder
    img?: SortOrderInput | SortOrder
    bloodType?: SortOrderInput | SortOrder
    gender?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    supervisor?: SortOrder
    dob?: SortOrderInput | SortOrder
    classId?: SortOrderInput | SortOrder
    clerk_id?: SortOrderInput | SortOrder
    ClerkTeachers?: ClerkTeachersOrderByWithRelationInput
    lessons?: LessonOrderByRelationAggregateInput
    subjects?: TeacherSubjectOrderByRelationAggregateInput
    class?: ClassOrderByWithRelationInput
  }

  export type TeacherWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    classId?: string
    clerk_id?: string
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    name?: StringFilter<"Teacher"> | string
    surname?: StringNullableFilter<"Teacher"> | string | null
    phone?: StringFilter<"Teacher"> | string
    address?: StringFilter<"Teacher"> | string
    img?: StringNullableFilter<"Teacher"> | string | null
    bloodType?: StringNullableFilter<"Teacher"> | string | null
    gender?: EnumGenderFilter<"Teacher"> | $Enums.Gender
    createdAt?: DateTimeFilter<"Teacher"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Teacher"> | Date | string | null
    supervisor?: BoolFilter<"Teacher"> | boolean
    dob?: DateTimeNullableFilter<"Teacher"> | Date | string | null
    ClerkTeachers?: XOR<ClerkTeachersNullableScalarRelationFilter, ClerkTeachersWhereInput> | null
    lessons?: LessonListRelationFilter
    subjects?: TeacherSubjectListRelationFilter
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
  }, "id" | "username" | "email" | "classId" | "clerk_id">

  export type TeacherOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    surname?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrder
    address?: SortOrder
    img?: SortOrderInput | SortOrder
    bloodType?: SortOrderInput | SortOrder
    gender?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    supervisor?: SortOrder
    dob?: SortOrderInput | SortOrder
    classId?: SortOrderInput | SortOrder
    clerk_id?: SortOrderInput | SortOrder
    _count?: TeacherCountOrderByAggregateInput
    _max?: TeacherMaxOrderByAggregateInput
    _min?: TeacherMinOrderByAggregateInput
  }

  export type TeacherScalarWhereWithAggregatesInput = {
    AND?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    OR?: TeacherScalarWhereWithAggregatesInput[]
    NOT?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Teacher"> | string
    username?: StringWithAggregatesFilter<"Teacher"> | string
    name?: StringWithAggregatesFilter<"Teacher"> | string
    surname?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    email?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    phone?: StringWithAggregatesFilter<"Teacher"> | string
    address?: StringWithAggregatesFilter<"Teacher"> | string
    img?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    bloodType?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    gender?: EnumGenderWithAggregatesFilter<"Teacher"> | $Enums.Gender
    createdAt?: DateTimeWithAggregatesFilter<"Teacher"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Teacher"> | Date | string | null
    supervisor?: BoolWithAggregatesFilter<"Teacher"> | boolean
    dob?: DateTimeNullableWithAggregatesFilter<"Teacher"> | Date | string | null
    classId?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    clerk_id?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
  }

  export type TeacherSubjectWhereInput = {
    AND?: TeacherSubjectWhereInput | TeacherSubjectWhereInput[]
    OR?: TeacherSubjectWhereInput[]
    NOT?: TeacherSubjectWhereInput | TeacherSubjectWhereInput[]
    teacherId?: StringFilter<"TeacherSubject"> | string
    subjectId?: IntFilter<"TeacherSubject"> | number
    Subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    Teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
  }

  export type TeacherSubjectOrderByWithRelationInput = {
    teacherId?: SortOrder
    subjectId?: SortOrder
    Subject?: SubjectOrderByWithRelationInput
    Teacher?: TeacherOrderByWithRelationInput
  }

  export type TeacherSubjectWhereUniqueInput = Prisma.AtLeast<{
    teacherId_subjectId?: TeacherSubjectTeacherIdSubjectIdCompoundUniqueInput
    AND?: TeacherSubjectWhereInput | TeacherSubjectWhereInput[]
    OR?: TeacherSubjectWhereInput[]
    NOT?: TeacherSubjectWhereInput | TeacherSubjectWhereInput[]
    teacherId?: StringFilter<"TeacherSubject"> | string
    subjectId?: IntFilter<"TeacherSubject"> | number
    Subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    Teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
  }, "teacherId_subjectId">

  export type TeacherSubjectOrderByWithAggregationInput = {
    teacherId?: SortOrder
    subjectId?: SortOrder
    _count?: TeacherSubjectCountOrderByAggregateInput
    _avg?: TeacherSubjectAvgOrderByAggregateInput
    _max?: TeacherSubjectMaxOrderByAggregateInput
    _min?: TeacherSubjectMinOrderByAggregateInput
    _sum?: TeacherSubjectSumOrderByAggregateInput
  }

  export type TeacherSubjectScalarWhereWithAggregatesInput = {
    AND?: TeacherSubjectScalarWhereWithAggregatesInput | TeacherSubjectScalarWhereWithAggregatesInput[]
    OR?: TeacherSubjectScalarWhereWithAggregatesInput[]
    NOT?: TeacherSubjectScalarWhereWithAggregatesInput | TeacherSubjectScalarWhereWithAggregatesInput[]
    teacherId?: StringWithAggregatesFilter<"TeacherSubject"> | string
    subjectId?: IntWithAggregatesFilter<"TeacherSubject"> | number
  }

  export type ClerkTeachersWhereInput = {
    AND?: ClerkTeachersWhereInput | ClerkTeachersWhereInput[]
    OR?: ClerkTeachersWhereInput[]
    NOT?: ClerkTeachersWhereInput | ClerkTeachersWhereInput[]
    clerk_id?: StringFilter<"ClerkTeachers"> | string
    user_id?: StringNullableFilter<"ClerkTeachers"> | string | null
    username?: StringFilter<"ClerkTeachers"> | string
    password?: StringFilter<"ClerkTeachers"> | string
    full_name?: StringFilter<"ClerkTeachers"> | string
    role?: StringFilter<"ClerkTeachers"> | string
    teacherId?: StringNullableFilter<"ClerkTeachers"> | string | null
    teacher?: XOR<TeacherNullableScalarRelationFilter, TeacherWhereInput> | null
  }

  export type ClerkTeachersOrderByWithRelationInput = {
    clerk_id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    username?: SortOrder
    password?: SortOrder
    full_name?: SortOrder
    role?: SortOrder
    teacherId?: SortOrderInput | SortOrder
    teacher?: TeacherOrderByWithRelationInput
  }

  export type ClerkTeachersWhereUniqueInput = Prisma.AtLeast<{
    clerk_id?: string
    user_id?: string
    username?: string
    teacherId?: string
    AND?: ClerkTeachersWhereInput | ClerkTeachersWhereInput[]
    OR?: ClerkTeachersWhereInput[]
    NOT?: ClerkTeachersWhereInput | ClerkTeachersWhereInput[]
    password?: StringFilter<"ClerkTeachers"> | string
    full_name?: StringFilter<"ClerkTeachers"> | string
    role?: StringFilter<"ClerkTeachers"> | string
    teacher?: XOR<TeacherNullableScalarRelationFilter, TeacherWhereInput> | null
  }, "clerk_id" | "user_id" | "username" | "teacherId">

  export type ClerkTeachersOrderByWithAggregationInput = {
    clerk_id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    username?: SortOrder
    password?: SortOrder
    full_name?: SortOrder
    role?: SortOrder
    teacherId?: SortOrderInput | SortOrder
    _count?: ClerkTeachersCountOrderByAggregateInput
    _max?: ClerkTeachersMaxOrderByAggregateInput
    _min?: ClerkTeachersMinOrderByAggregateInput
  }

  export type ClerkTeachersScalarWhereWithAggregatesInput = {
    AND?: ClerkTeachersScalarWhereWithAggregatesInput | ClerkTeachersScalarWhereWithAggregatesInput[]
    OR?: ClerkTeachersScalarWhereWithAggregatesInput[]
    NOT?: ClerkTeachersScalarWhereWithAggregatesInput | ClerkTeachersScalarWhereWithAggregatesInput[]
    clerk_id?: StringWithAggregatesFilter<"ClerkTeachers"> | string
    user_id?: StringNullableWithAggregatesFilter<"ClerkTeachers"> | string | null
    username?: StringWithAggregatesFilter<"ClerkTeachers"> | string
    password?: StringWithAggregatesFilter<"ClerkTeachers"> | string
    full_name?: StringWithAggregatesFilter<"ClerkTeachers"> | string
    role?: StringWithAggregatesFilter<"ClerkTeachers"> | string
    teacherId?: StringNullableWithAggregatesFilter<"ClerkTeachers"> | string | null
  }

  export type FeeStructureWhereInput = {
    AND?: FeeStructureWhereInput | FeeStructureWhereInput[]
    OR?: FeeStructureWhereInput[]
    NOT?: FeeStructureWhereInput | FeeStructureWhereInput[]
    id?: IntFilter<"FeeStructure"> | number
    gradeId?: IntFilter<"FeeStructure"> | number
    startDate?: DateTimeFilter<"FeeStructure"> | Date | string
    dueDate?: DateTimeFilter<"FeeStructure"> | Date | string
    termFees?: IntFilter<"FeeStructure"> | number
    abacusFees?: IntNullableFilter<"FeeStructure"> | number | null
    term?: EnumTermFilter<"FeeStructure"> | $Enums.Term
    academicYear?: EnumAcademicYearFilter<"FeeStructure"> | $Enums.AcademicYear
    grade?: XOR<GradeScalarRelationFilter, GradeWhereInput>
    studentFees?: StudentFeesListRelationFilter
  }

  export type FeeStructureOrderByWithRelationInput = {
    id?: SortOrder
    gradeId?: SortOrder
    startDate?: SortOrder
    dueDate?: SortOrder
    termFees?: SortOrder
    abacusFees?: SortOrderInput | SortOrder
    term?: SortOrder
    academicYear?: SortOrder
    grade?: GradeOrderByWithRelationInput
    studentFees?: StudentFeesOrderByRelationAggregateInput
  }

  export type FeeStructureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    gradeId_term_academicYear?: FeeStructureGradeIdTermAcademicYearCompoundUniqueInput
    AND?: FeeStructureWhereInput | FeeStructureWhereInput[]
    OR?: FeeStructureWhereInput[]
    NOT?: FeeStructureWhereInput | FeeStructureWhereInput[]
    gradeId?: IntFilter<"FeeStructure"> | number
    startDate?: DateTimeFilter<"FeeStructure"> | Date | string
    dueDate?: DateTimeFilter<"FeeStructure"> | Date | string
    termFees?: IntFilter<"FeeStructure"> | number
    abacusFees?: IntNullableFilter<"FeeStructure"> | number | null
    term?: EnumTermFilter<"FeeStructure"> | $Enums.Term
    academicYear?: EnumAcademicYearFilter<"FeeStructure"> | $Enums.AcademicYear
    grade?: XOR<GradeScalarRelationFilter, GradeWhereInput>
    studentFees?: StudentFeesListRelationFilter
  }, "id" | "gradeId_term_academicYear">

  export type FeeStructureOrderByWithAggregationInput = {
    id?: SortOrder
    gradeId?: SortOrder
    startDate?: SortOrder
    dueDate?: SortOrder
    termFees?: SortOrder
    abacusFees?: SortOrderInput | SortOrder
    term?: SortOrder
    academicYear?: SortOrder
    _count?: FeeStructureCountOrderByAggregateInput
    _avg?: FeeStructureAvgOrderByAggregateInput
    _max?: FeeStructureMaxOrderByAggregateInput
    _min?: FeeStructureMinOrderByAggregateInput
    _sum?: FeeStructureSumOrderByAggregateInput
  }

  export type FeeStructureScalarWhereWithAggregatesInput = {
    AND?: FeeStructureScalarWhereWithAggregatesInput | FeeStructureScalarWhereWithAggregatesInput[]
    OR?: FeeStructureScalarWhereWithAggregatesInput[]
    NOT?: FeeStructureScalarWhereWithAggregatesInput | FeeStructureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FeeStructure"> | number
    gradeId?: IntWithAggregatesFilter<"FeeStructure"> | number
    startDate?: DateTimeWithAggregatesFilter<"FeeStructure"> | Date | string
    dueDate?: DateTimeWithAggregatesFilter<"FeeStructure"> | Date | string
    termFees?: IntWithAggregatesFilter<"FeeStructure"> | number
    abacusFees?: IntNullableWithAggregatesFilter<"FeeStructure"> | number | null
    term?: EnumTermWithAggregatesFilter<"FeeStructure"> | $Enums.Term
    academicYear?: EnumAcademicYearWithAggregatesFilter<"FeeStructure"> | $Enums.AcademicYear
  }

  export type FeeTransactionWhereInput = {
    AND?: FeeTransactionWhereInput | FeeTransactionWhereInput[]
    OR?: FeeTransactionWhereInput[]
    NOT?: FeeTransactionWhereInput | FeeTransactionWhereInput[]
    id?: IntFilter<"FeeTransaction"> | number
    studentId?: StringFilter<"FeeTransaction"> | string
    term?: StringFilter<"FeeTransaction"> | string
    studentFeesId?: IntFilter<"FeeTransaction"> | number
    amount?: FloatFilter<"FeeTransaction"> | number
    discountAmount?: FloatFilter<"FeeTransaction"> | number
    fineAmount?: FloatFilter<"FeeTransaction"> | number
    receiptDate?: DateTimeFilter<"FeeTransaction"> | Date | string
    receiptNo?: StringFilter<"FeeTransaction"> | string
    paymentMode?: EnumPaymentModeFilter<"FeeTransaction"> | $Enums.PaymentMode
    createdAt?: DateTimeFilter<"FeeTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"FeeTransaction"> | Date | string
    remarks?: StringNullableFilter<"FeeTransaction"> | string | null
    studentFees?: XOR<StudentFeesScalarRelationFilter, StudentFeesWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }

  export type FeeTransactionOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    term?: SortOrder
    studentFeesId?: SortOrder
    amount?: SortOrder
    discountAmount?: SortOrder
    fineAmount?: SortOrder
    receiptDate?: SortOrder
    receiptNo?: SortOrder
    paymentMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    remarks?: SortOrderInput | SortOrder
    studentFees?: StudentFeesOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
  }

  export type FeeTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeeTransactionWhereInput | FeeTransactionWhereInput[]
    OR?: FeeTransactionWhereInput[]
    NOT?: FeeTransactionWhereInput | FeeTransactionWhereInput[]
    studentId?: StringFilter<"FeeTransaction"> | string
    term?: StringFilter<"FeeTransaction"> | string
    studentFeesId?: IntFilter<"FeeTransaction"> | number
    amount?: FloatFilter<"FeeTransaction"> | number
    discountAmount?: FloatFilter<"FeeTransaction"> | number
    fineAmount?: FloatFilter<"FeeTransaction"> | number
    receiptDate?: DateTimeFilter<"FeeTransaction"> | Date | string
    receiptNo?: StringFilter<"FeeTransaction"> | string
    paymentMode?: EnumPaymentModeFilter<"FeeTransaction"> | $Enums.PaymentMode
    createdAt?: DateTimeFilter<"FeeTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"FeeTransaction"> | Date | string
    remarks?: StringNullableFilter<"FeeTransaction"> | string | null
    studentFees?: XOR<StudentFeesScalarRelationFilter, StudentFeesWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }, "id">

  export type FeeTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    term?: SortOrder
    studentFeesId?: SortOrder
    amount?: SortOrder
    discountAmount?: SortOrder
    fineAmount?: SortOrder
    receiptDate?: SortOrder
    receiptNo?: SortOrder
    paymentMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    remarks?: SortOrderInput | SortOrder
    _count?: FeeTransactionCountOrderByAggregateInput
    _avg?: FeeTransactionAvgOrderByAggregateInput
    _max?: FeeTransactionMaxOrderByAggregateInput
    _min?: FeeTransactionMinOrderByAggregateInput
    _sum?: FeeTransactionSumOrderByAggregateInput
  }

  export type FeeTransactionScalarWhereWithAggregatesInput = {
    AND?: FeeTransactionScalarWhereWithAggregatesInput | FeeTransactionScalarWhereWithAggregatesInput[]
    OR?: FeeTransactionScalarWhereWithAggregatesInput[]
    NOT?: FeeTransactionScalarWhereWithAggregatesInput | FeeTransactionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FeeTransaction"> | number
    studentId?: StringWithAggregatesFilter<"FeeTransaction"> | string
    term?: StringWithAggregatesFilter<"FeeTransaction"> | string
    studentFeesId?: IntWithAggregatesFilter<"FeeTransaction"> | number
    amount?: FloatWithAggregatesFilter<"FeeTransaction"> | number
    discountAmount?: FloatWithAggregatesFilter<"FeeTransaction"> | number
    fineAmount?: FloatWithAggregatesFilter<"FeeTransaction"> | number
    receiptDate?: DateTimeWithAggregatesFilter<"FeeTransaction"> | Date | string
    receiptNo?: StringWithAggregatesFilter<"FeeTransaction"> | string
    paymentMode?: EnumPaymentModeWithAggregatesFilter<"FeeTransaction"> | $Enums.PaymentMode
    createdAt?: DateTimeWithAggregatesFilter<"FeeTransaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FeeTransaction"> | Date | string
    remarks?: StringNullableWithAggregatesFilter<"FeeTransaction"> | string | null
  }

  export type StudentFeesWhereInput = {
    AND?: StudentFeesWhereInput | StudentFeesWhereInput[]
    OR?: StudentFeesWhereInput[]
    NOT?: StudentFeesWhereInput | StudentFeesWhereInput[]
    id?: IntFilter<"StudentFees"> | number
    studentId?: StringFilter<"StudentFees"> | string
    paidAmount?: IntFilter<"StudentFees"> | number
    abacusPaidAmount?: IntNullableFilter<"StudentFees"> | number | null
    feeStructureId?: IntFilter<"StudentFees"> | number
    discountAmount?: IntFilter<"StudentFees"> | number
    fineAmount?: IntFilter<"StudentFees"> | number
    receiptDate?: DateTimeNullableFilter<"StudentFees"> | Date | string | null
    receivedDate?: DateTimeNullableFilter<"StudentFees"> | Date | string | null
    paymentMode?: EnumPaymentModeFilter<"StudentFees"> | $Enums.PaymentMode
    academicYear?: EnumAcademicYearFilter<"StudentFees"> | $Enums.AcademicYear
    receiptNo?: StringNullableFilter<"StudentFees"> | string | null
    term?: StringFilter<"StudentFees"> | string
    remarks?: StringNullableFilter<"StudentFees"> | string | null
    feeTransactions?: FeeTransactionListRelationFilter
    feeStructure?: XOR<FeeStructureScalarRelationFilter, FeeStructureWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }

  export type StudentFeesOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    paidAmount?: SortOrder
    abacusPaidAmount?: SortOrderInput | SortOrder
    feeStructureId?: SortOrder
    discountAmount?: SortOrder
    fineAmount?: SortOrder
    receiptDate?: SortOrderInput | SortOrder
    receivedDate?: SortOrderInput | SortOrder
    paymentMode?: SortOrder
    academicYear?: SortOrder
    receiptNo?: SortOrderInput | SortOrder
    term?: SortOrder
    remarks?: SortOrderInput | SortOrder
    feeTransactions?: FeeTransactionOrderByRelationAggregateInput
    feeStructure?: FeeStructureOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
  }

  export type StudentFeesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    studentId_academicYear_term?: StudentFeesStudentIdAcademicYearTermCompoundUniqueInput
    AND?: StudentFeesWhereInput | StudentFeesWhereInput[]
    OR?: StudentFeesWhereInput[]
    NOT?: StudentFeesWhereInput | StudentFeesWhereInput[]
    studentId?: StringFilter<"StudentFees"> | string
    paidAmount?: IntFilter<"StudentFees"> | number
    abacusPaidAmount?: IntNullableFilter<"StudentFees"> | number | null
    feeStructureId?: IntFilter<"StudentFees"> | number
    discountAmount?: IntFilter<"StudentFees"> | number
    fineAmount?: IntFilter<"StudentFees"> | number
    receiptDate?: DateTimeNullableFilter<"StudentFees"> | Date | string | null
    receivedDate?: DateTimeNullableFilter<"StudentFees"> | Date | string | null
    paymentMode?: EnumPaymentModeFilter<"StudentFees"> | $Enums.PaymentMode
    academicYear?: EnumAcademicYearFilter<"StudentFees"> | $Enums.AcademicYear
    receiptNo?: StringNullableFilter<"StudentFees"> | string | null
    term?: StringFilter<"StudentFees"> | string
    remarks?: StringNullableFilter<"StudentFees"> | string | null
    feeTransactions?: FeeTransactionListRelationFilter
    feeStructure?: XOR<FeeStructureScalarRelationFilter, FeeStructureWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }, "id" | "studentId_academicYear_term">

  export type StudentFeesOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    paidAmount?: SortOrder
    abacusPaidAmount?: SortOrderInput | SortOrder
    feeStructureId?: SortOrder
    discountAmount?: SortOrder
    fineAmount?: SortOrder
    receiptDate?: SortOrderInput | SortOrder
    receivedDate?: SortOrderInput | SortOrder
    paymentMode?: SortOrder
    academicYear?: SortOrder
    receiptNo?: SortOrderInput | SortOrder
    term?: SortOrder
    remarks?: SortOrderInput | SortOrder
    _count?: StudentFeesCountOrderByAggregateInput
    _avg?: StudentFeesAvgOrderByAggregateInput
    _max?: StudentFeesMaxOrderByAggregateInput
    _min?: StudentFeesMinOrderByAggregateInput
    _sum?: StudentFeesSumOrderByAggregateInput
  }

  export type StudentFeesScalarWhereWithAggregatesInput = {
    AND?: StudentFeesScalarWhereWithAggregatesInput | StudentFeesScalarWhereWithAggregatesInput[]
    OR?: StudentFeesScalarWhereWithAggregatesInput[]
    NOT?: StudentFeesScalarWhereWithAggregatesInput | StudentFeesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StudentFees"> | number
    studentId?: StringWithAggregatesFilter<"StudentFees"> | string
    paidAmount?: IntWithAggregatesFilter<"StudentFees"> | number
    abacusPaidAmount?: IntNullableWithAggregatesFilter<"StudentFees"> | number | null
    feeStructureId?: IntWithAggregatesFilter<"StudentFees"> | number
    discountAmount?: IntWithAggregatesFilter<"StudentFees"> | number
    fineAmount?: IntWithAggregatesFilter<"StudentFees"> | number
    receiptDate?: DateTimeNullableWithAggregatesFilter<"StudentFees"> | Date | string | null
    receivedDate?: DateTimeNullableWithAggregatesFilter<"StudentFees"> | Date | string | null
    paymentMode?: EnumPaymentModeWithAggregatesFilter<"StudentFees"> | $Enums.PaymentMode
    academicYear?: EnumAcademicYearWithAggregatesFilter<"StudentFees"> | $Enums.AcademicYear
    receiptNo?: StringNullableWithAggregatesFilter<"StudentFees"> | string | null
    term?: StringWithAggregatesFilter<"StudentFees"> | string
    remarks?: StringNullableWithAggregatesFilter<"StudentFees"> | string | null
  }

  export type StudentTotalFeesWhereInput = {
    AND?: StudentTotalFeesWhereInput | StudentTotalFeesWhereInput[]
    OR?: StudentTotalFeesWhereInput[]
    NOT?: StudentTotalFeesWhereInput | StudentTotalFeesWhereInput[]
    id?: IntFilter<"StudentTotalFees"> | number
    studentId?: StringFilter<"StudentTotalFees"> | string
    totalPaidAmount?: FloatFilter<"StudentTotalFees"> | number
    totalDiscountAmount?: FloatFilter<"StudentTotalFees"> | number
    totalFineAmount?: FloatFilter<"StudentTotalFees"> | number
    totalAbacusAmount?: FloatFilter<"StudentTotalFees"> | number
    totalFeeAmount?: FloatFilter<"StudentTotalFees"> | number
    dueAmount?: FloatFilter<"StudentTotalFees"> | number
    status?: StringFilter<"StudentTotalFees"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }

  export type StudentTotalFeesOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    totalPaidAmount?: SortOrder
    totalDiscountAmount?: SortOrder
    totalFineAmount?: SortOrder
    totalAbacusAmount?: SortOrder
    totalFeeAmount?: SortOrder
    dueAmount?: SortOrder
    status?: SortOrder
    student?: StudentOrderByWithRelationInput
  }

  export type StudentTotalFeesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    studentId?: string
    AND?: StudentTotalFeesWhereInput | StudentTotalFeesWhereInput[]
    OR?: StudentTotalFeesWhereInput[]
    NOT?: StudentTotalFeesWhereInput | StudentTotalFeesWhereInput[]
    totalPaidAmount?: FloatFilter<"StudentTotalFees"> | number
    totalDiscountAmount?: FloatFilter<"StudentTotalFees"> | number
    totalFineAmount?: FloatFilter<"StudentTotalFees"> | number
    totalAbacusAmount?: FloatFilter<"StudentTotalFees"> | number
    totalFeeAmount?: FloatFilter<"StudentTotalFees"> | number
    dueAmount?: FloatFilter<"StudentTotalFees"> | number
    status?: StringFilter<"StudentTotalFees"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }, "id" | "studentId">

  export type StudentTotalFeesOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    totalPaidAmount?: SortOrder
    totalDiscountAmount?: SortOrder
    totalFineAmount?: SortOrder
    totalAbacusAmount?: SortOrder
    totalFeeAmount?: SortOrder
    dueAmount?: SortOrder
    status?: SortOrder
    _count?: StudentTotalFeesCountOrderByAggregateInput
    _avg?: StudentTotalFeesAvgOrderByAggregateInput
    _max?: StudentTotalFeesMaxOrderByAggregateInput
    _min?: StudentTotalFeesMinOrderByAggregateInput
    _sum?: StudentTotalFeesSumOrderByAggregateInput
  }

  export type StudentTotalFeesScalarWhereWithAggregatesInput = {
    AND?: StudentTotalFeesScalarWhereWithAggregatesInput | StudentTotalFeesScalarWhereWithAggregatesInput[]
    OR?: StudentTotalFeesScalarWhereWithAggregatesInput[]
    NOT?: StudentTotalFeesScalarWhereWithAggregatesInput | StudentTotalFeesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StudentTotalFees"> | number
    studentId?: StringWithAggregatesFilter<"StudentTotalFees"> | string
    totalPaidAmount?: FloatWithAggregatesFilter<"StudentTotalFees"> | number
    totalDiscountAmount?: FloatWithAggregatesFilter<"StudentTotalFees"> | number
    totalFineAmount?: FloatWithAggregatesFilter<"StudentTotalFees"> | number
    totalAbacusAmount?: FloatWithAggregatesFilter<"StudentTotalFees"> | number
    totalFeeAmount?: FloatWithAggregatesFilter<"StudentTotalFees"> | number
    dueAmount?: FloatWithAggregatesFilter<"StudentTotalFees"> | number
    status?: StringWithAggregatesFilter<"StudentTotalFees"> | string
  }

  export type AdminCreateInput = {
    username: string
    password: string
    full_name: string
    parentName?: string | null
    gender?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    dob?: Date | string | null
    img?: string | null
    bloodType?: string | null
    role?: string
    createdAt?: Date | string
  }

  export type AdminUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    full_name: string
    parentName?: string | null
    gender?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    dob?: Date | string | null
    img?: string | null
    bloodType?: string | null
    role?: string
    createdAt?: Date | string
  }

  export type AdminUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminCreateManyInput = {
    id?: number
    username: string
    password: string
    full_name: string
    parentName?: string | null
    gender?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    dob?: Date | string | null
    img?: string | null
    bloodType?: string | null
    role?: string
    createdAt?: Date | string
  }

  export type AdminUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeCreateInput = {
    level: string
    feestructure?: FeeStructureCreateNestedManyWithoutGradeInput
    Homework?: HomeworkCreateNestedManyWithoutGradeInput
    classes?: ClassCreateNestedManyWithoutGradeInput
  }

  export type GradeUncheckedCreateInput = {
    id?: number
    level: string
    feestructure?: FeeStructureUncheckedCreateNestedManyWithoutGradeInput
    Homework?: HomeworkUncheckedCreateNestedManyWithoutGradeInput
    classes?: ClassUncheckedCreateNestedManyWithoutGradeInput
  }

  export type GradeUpdateInput = {
    level?: StringFieldUpdateOperationsInput | string
    feestructure?: FeeStructureUpdateManyWithoutGradeNestedInput
    Homework?: HomeworkUpdateManyWithoutGradeNestedInput
    classes?: ClassUpdateManyWithoutGradeNestedInput
  }

  export type GradeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    feestructure?: FeeStructureUncheckedUpdateManyWithoutGradeNestedInput
    Homework?: HomeworkUncheckedUpdateManyWithoutGradeNestedInput
    classes?: ClassUncheckedUpdateManyWithoutGradeNestedInput
  }

  export type GradeCreateManyInput = {
    id?: number
    level: string
  }

  export type GradeUpdateManyMutationInput = {
    level?: StringFieldUpdateOperationsInput | string
  }

  export type GradeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
  }

  export type ClassCreateInput = {
    name: string
    Announcement?: AnnouncementCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    exams?: ExamCreateNestedManyWithoutClassInput
    homeworks?: HomeworkCreateNestedManyWithoutClassInput
    lessons?: LessonCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassInput
    Grade: GradeCreateNestedOneWithoutClassesInput
    Teacher?: TeacherCreateNestedOneWithoutClassInput
  }

  export type ClassUncheckedCreateInput = {
    id?: number
    name: string
    supervisorId?: string | null
    gradeId: number
    Announcement?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    exams?: ExamUncheckedCreateNestedManyWithoutClassInput
    homeworks?: HomeworkUncheckedCreateNestedManyWithoutClassInput
    lessons?: LessonUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Announcement?: AnnouncementUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    exams?: ExamUpdateManyWithoutClassNestedInput
    homeworks?: HomeworkUpdateManyWithoutClassNestedInput
    lessons?: LessonUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    Grade?: GradeUpdateOneRequiredWithoutClassesNestedInput
    Teacher?: TeacherUpdateOneWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: IntFieldUpdateOperationsInput | number
    Announcement?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    exams?: ExamUncheckedUpdateManyWithoutClassNestedInput
    homeworks?: HomeworkUncheckedUpdateManyWithoutClassNestedInput
    lessons?: LessonUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassCreateManyInput = {
    id?: number
    name: string
    supervisorId?: string | null
    gradeId: number
  }

  export type ClassUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ClassUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: IntFieldUpdateOperationsInput | number
  }

  export type LessonCreateInput = {
    name: string
    day: $Enums.LessonDay
    startTime: Date | string
    endTime: Date | string
    Class: ClassCreateNestedOneWithoutLessonsInput
    Subject: SubjectCreateNestedOneWithoutLessonsInput
    Teacher: TeacherCreateNestedOneWithoutLessonsInput
  }

  export type LessonUncheckedCreateInput = {
    id?: number
    name: string
    day: $Enums.LessonDay
    startTime: Date | string
    endTime: Date | string
    subjectId: number
    classId: number
    teacherId: string
  }

  export type LessonUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    day?: EnumLessonDayFieldUpdateOperationsInput | $Enums.LessonDay
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    Class?: ClassUpdateOneRequiredWithoutLessonsNestedInput
    Subject?: SubjectUpdateOneRequiredWithoutLessonsNestedInput
    Teacher?: TeacherUpdateOneRequiredWithoutLessonsNestedInput
  }

  export type LessonUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    day?: EnumLessonDayFieldUpdateOperationsInput | $Enums.LessonDay
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    subjectId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    teacherId?: StringFieldUpdateOperationsInput | string
  }

  export type LessonCreateManyInput = {
    id?: number
    name: string
    day: $Enums.LessonDay
    startTime: Date | string
    endTime: Date | string
    subjectId: number
    classId: number
    teacherId: string
  }

  export type LessonUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    day?: EnumLessonDayFieldUpdateOperationsInput | $Enums.LessonDay
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    day?: EnumLessonDayFieldUpdateOperationsInput | $Enums.LessonDay
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    subjectId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    teacherId?: StringFieldUpdateOperationsInput | string
  }

  export type AnnouncementCreateInput = {
    title: string
    description: string
    date: Date | string
    Class?: ClassCreateNestedOneWithoutAnnouncementInput
  }

  export type AnnouncementUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    date: Date | string
    classId?: number | null
  }

  export type AnnouncementUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    Class?: ClassUpdateOneWithoutAnnouncementNestedInput
  }

  export type AnnouncementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AnnouncementCreateManyInput = {
    id?: number
    title: string
    description: string
    date: Date | string
    classId?: number | null
  }

  export type AnnouncementUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnnouncementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AttendanceCreateInput = {
    date: Date | string
    present: boolean
    class: ClassCreateNestedOneWithoutAttendanceInput
    Student: StudentCreateNestedOneWithoutAttendanceInput
  }

  export type AttendanceUncheckedCreateInput = {
    id?: number
    date: Date | string
    present: boolean
    studentId: string
    classId: number
  }

  export type AttendanceUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
    class?: ClassUpdateOneRequiredWithoutAttendanceNestedInput
    Student?: StudentUpdateOneRequiredWithoutAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
    studentId?: StringFieldUpdateOperationsInput | string
    classId?: IntFieldUpdateOperationsInput | number
  }

  export type AttendanceCreateManyInput = {
    id?: number
    date: Date | string
    present: boolean
    studentId: string
    classId: number
  }

  export type AttendanceUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AttendanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
    studentId?: StringFieldUpdateOperationsInput | string
    classId?: IntFieldUpdateOperationsInput | number
  }

  export type EventCreateInput = {
    title: string
    description: string
    startTime: Date | string
    endTime: Date | string
    Class?: ClassCreateNestedOneWithoutEventsInput
  }

  export type EventUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    startTime: Date | string
    endTime: Date | string
    classId?: number | null
  }

  export type EventUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    Class?: ClassUpdateOneWithoutEventsNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EventCreateManyInput = {
    id?: number
    title: string
    description: string
    startTime: Date | string
    endTime: Date | string
    classId?: number | null
  }

  export type EventUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExamCreateInput = {
    title: string
    date: Date | string
    Class: ClassCreateNestedOneWithoutExamsInput
    subjects?: ExamSubjectCreateNestedManyWithoutExamInput
    results?: ResultCreateNestedManyWithoutExamInput
  }

  export type ExamUncheckedCreateInput = {
    id?: number
    title: string
    date: Date | string
    classId: number
    subjects?: ExamSubjectUncheckedCreateNestedManyWithoutExamInput
    results?: ResultUncheckedCreateNestedManyWithoutExamInput
  }

  export type ExamUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    Class?: ClassUpdateOneRequiredWithoutExamsNestedInput
    subjects?: ExamSubjectUpdateManyWithoutExamNestedInput
    results?: ResultUpdateManyWithoutExamNestedInput
  }

  export type ExamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: IntFieldUpdateOperationsInput | number
    subjects?: ExamSubjectUncheckedUpdateManyWithoutExamNestedInput
    results?: ResultUncheckedUpdateManyWithoutExamNestedInput
  }

  export type ExamCreateManyInput = {
    id?: number
    title: string
    date: Date | string
    classId: number
  }

  export type ExamUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: IntFieldUpdateOperationsInput | number
  }

  export type ExamSubjectCreateInput = {
    maxMarks: number
    Exam: ExamCreateNestedOneWithoutSubjectsInput
    Subject: SubjectCreateNestedOneWithoutExamsInput
  }

  export type ExamSubjectUncheckedCreateInput = {
    id?: number
    examId: number
    subjectId: number
    maxMarks: number
  }

  export type ExamSubjectUpdateInput = {
    maxMarks?: IntFieldUpdateOperationsInput | number
    Exam?: ExamUpdateOneRequiredWithoutSubjectsNestedInput
    Subject?: SubjectUpdateOneRequiredWithoutExamsNestedInput
  }

  export type ExamSubjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    maxMarks?: IntFieldUpdateOperationsInput | number
  }

  export type ExamSubjectCreateManyInput = {
    id?: number
    examId: number
    subjectId: number
    maxMarks: number
  }

  export type ExamSubjectUpdateManyMutationInput = {
    maxMarks?: IntFieldUpdateOperationsInput | number
  }

  export type ExamSubjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    maxMarks?: IntFieldUpdateOperationsInput | number
  }

  export type HomeworkCreateInput = {
    description: string
    date?: Date | string
    Class: ClassCreateNestedOneWithoutHomeworksInput
    Grade: GradeCreateNestedOneWithoutHomeworkInput
  }

  export type HomeworkUncheckedCreateInput = {
    id?: number
    description: string
    date?: Date | string
    classId: number
    gradeId: number
  }

  export type HomeworkUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    Class?: ClassUpdateOneRequiredWithoutHomeworksNestedInput
    Grade?: GradeUpdateOneRequiredWithoutHomeworkNestedInput
  }

  export type HomeworkUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
  }

  export type HomeworkCreateManyInput = {
    id?: number
    description: string
    date?: Date | string
    classId: number
    gradeId: number
  }

  export type HomeworkUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
  }

  export type ResultCreateInput = {
    score: number
    Exam: ExamCreateNestedOneWithoutResultsInput
    Student: StudentCreateNestedOneWithoutResultsInput
    Subject: SubjectCreateNestedOneWithoutResultsInput
  }

  export type ResultUncheckedCreateInput = {
    id?: number
    score: number
    studentId: string
    examId: number
    subjectId: number
  }

  export type ResultUpdateInput = {
    score?: FloatFieldUpdateOperationsInput | number
    Exam?: ExamUpdateOneRequiredWithoutResultsNestedInput
    Student?: StudentUpdateOneRequiredWithoutResultsNestedInput
    Subject?: SubjectUpdateOneRequiredWithoutResultsNestedInput
  }

  export type ResultUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    examId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type ResultCreateManyInput = {
    id?: number
    score: number
    studentId: string
    examId: number
    subjectId: number
  }

  export type ResultUpdateManyMutationInput = {
    score?: FloatFieldUpdateOperationsInput | number
  }

  export type ResultUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    examId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentCreateInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    parentName: string
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    dob: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    clerk_id?: string | null
    academicYear?: $Enums.AcademicYear
    Attendance?: AttendanceCreateNestedManyWithoutStudentInput
    clerkStudent?: ClerkStudentsCreateNestedOneWithoutStudentInput
    feeTransactions?: FeeTransactionCreateNestedManyWithoutStudentInput
    results?: ResultCreateNestedManyWithoutStudentInput
    Class: ClassCreateNestedOneWithoutStudentsInput
    studentFees?: StudentFeesCreateNestedManyWithoutStudentInput
    totalFees?: StudentTotalFeesCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    parentName: string
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    dob: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    classId: number
    clerk_id?: string | null
    academicYear?: $Enums.AcademicYear
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    clerkStudent?: ClerkStudentsUncheckedCreateNestedOneWithoutStudentInput
    feeTransactions?: FeeTransactionUncheckedCreateNestedManyWithoutStudentInput
    results?: ResultUncheckedCreateNestedManyWithoutStudentInput
    studentFees?: StudentFeesUncheckedCreateNestedManyWithoutStudentInput
    totalFees?: StudentTotalFeesUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    Attendance?: AttendanceUpdateManyWithoutStudentNestedInput
    clerkStudent?: ClerkStudentsUpdateOneWithoutStudentNestedInput
    feeTransactions?: FeeTransactionUpdateManyWithoutStudentNestedInput
    results?: ResultUpdateManyWithoutStudentNestedInput
    Class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    studentFees?: StudentFeesUpdateManyWithoutStudentNestedInput
    totalFees?: StudentTotalFeesUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: IntFieldUpdateOperationsInput | number
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    Attendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    clerkStudent?: ClerkStudentsUncheckedUpdateOneWithoutStudentNestedInput
    feeTransactions?: FeeTransactionUncheckedUpdateManyWithoutStudentNestedInput
    results?: ResultUncheckedUpdateManyWithoutStudentNestedInput
    studentFees?: StudentFeesUncheckedUpdateManyWithoutStudentNestedInput
    totalFees?: StudentTotalFeesUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    parentName: string
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    dob: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    classId: number
    clerk_id?: string | null
    academicYear?: $Enums.AcademicYear
  }

  export type StudentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
  }

  export type StudentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: IntFieldUpdateOperationsInput | number
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
  }

  export type ClerkStudentsCreateInput = {
    clerk_id: string
    user_id?: string | null
    username: string
    password: string
    full_name: string
    role?: string
    student?: StudentCreateNestedOneWithoutClerkStudentInput
  }

  export type ClerkStudentsUncheckedCreateInput = {
    clerk_id: string
    user_id?: string | null
    username: string
    password: string
    full_name: string
    role?: string
    studentId?: string | null
  }

  export type ClerkStudentsUpdateInput = {
    clerk_id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    student?: StudentUpdateOneWithoutClerkStudentNestedInput
  }

  export type ClerkStudentsUncheckedUpdateInput = {
    clerk_id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClerkStudentsCreateManyInput = {
    clerk_id: string
    user_id?: string | null
    username: string
    password: string
    full_name: string
    role?: string
    studentId?: string | null
  }

  export type ClerkStudentsUpdateManyMutationInput = {
    clerk_id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type ClerkStudentsUncheckedUpdateManyInput = {
    clerk_id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubjectCreateInput = {
    name: string
    createdAt?: Date | string
    exams?: ExamSubjectCreateNestedManyWithoutSubjectInput
    lessons?: LessonCreateNestedManyWithoutSubjectInput
    results?: ResultCreateNestedManyWithoutSubjectInput
    teachers?: TeacherSubjectCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    exams?: ExamSubjectUncheckedCreateNestedManyWithoutSubjectInput
    lessons?: LessonUncheckedCreateNestedManyWithoutSubjectInput
    results?: ResultUncheckedCreateNestedManyWithoutSubjectInput
    teachers?: TeacherSubjectUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exams?: ExamSubjectUpdateManyWithoutSubjectNestedInput
    lessons?: LessonUpdateManyWithoutSubjectNestedInput
    results?: ResultUpdateManyWithoutSubjectNestedInput
    teachers?: TeacherSubjectUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exams?: ExamSubjectUncheckedUpdateManyWithoutSubjectNestedInput
    lessons?: LessonUncheckedUpdateManyWithoutSubjectNestedInput
    results?: ResultUncheckedUpdateManyWithoutSubjectNestedInput
    teachers?: TeacherSubjectUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
  }

  export type SubjectUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeacherCreateInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    createdAt?: Date | string
    deletedAt?: Date | string | null
    supervisor?: boolean
    dob?: Date | string | null
    classId?: string | null
    clerk_id?: string | null
    ClerkTeachers?: ClerkTeachersCreateNestedOneWithoutTeacherInput
    lessons?: LessonCreateNestedManyWithoutTeacherInput
    subjects?: TeacherSubjectCreateNestedManyWithoutTeacherInput
    class?: ClassCreateNestedOneWithoutTeacherInput
  }

  export type TeacherUncheckedCreateInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    createdAt?: Date | string
    deletedAt?: Date | string | null
    supervisor?: boolean
    dob?: Date | string | null
    classId?: string | null
    clerk_id?: string | null
    ClerkTeachers?: ClerkTeachersUncheckedCreateNestedOneWithoutTeacherInput
    lessons?: LessonUncheckedCreateNestedManyWithoutTeacherInput
    subjects?: TeacherSubjectUncheckedCreateNestedManyWithoutTeacherInput
    class?: ClassUncheckedCreateNestedOneWithoutTeacherInput
  }

  export type TeacherUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supervisor?: BoolFieldUpdateOperationsInput | boolean
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    ClerkTeachers?: ClerkTeachersUpdateOneWithoutTeacherNestedInput
    lessons?: LessonUpdateManyWithoutTeacherNestedInput
    subjects?: TeacherSubjectUpdateManyWithoutTeacherNestedInput
    class?: ClassUpdateOneWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supervisor?: BoolFieldUpdateOperationsInput | boolean
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    ClerkTeachers?: ClerkTeachersUncheckedUpdateOneWithoutTeacherNestedInput
    lessons?: LessonUncheckedUpdateManyWithoutTeacherNestedInput
    subjects?: TeacherSubjectUncheckedUpdateManyWithoutTeacherNestedInput
    class?: ClassUncheckedUpdateOneWithoutTeacherNestedInput
  }

  export type TeacherCreateManyInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    createdAt?: Date | string
    deletedAt?: Date | string | null
    supervisor?: boolean
    dob?: Date | string | null
    classId?: string | null
    clerk_id?: string | null
  }

  export type TeacherUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supervisor?: BoolFieldUpdateOperationsInput | boolean
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supervisor?: BoolFieldUpdateOperationsInput | boolean
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherSubjectCreateInput = {
    Subject: SubjectCreateNestedOneWithoutTeachersInput
    Teacher: TeacherCreateNestedOneWithoutSubjectsInput
  }

  export type TeacherSubjectUncheckedCreateInput = {
    teacherId: string
    subjectId: number
  }

  export type TeacherSubjectUpdateInput = {
    Subject?: SubjectUpdateOneRequiredWithoutTeachersNestedInput
    Teacher?: TeacherUpdateOneRequiredWithoutSubjectsNestedInput
  }

  export type TeacherSubjectUncheckedUpdateInput = {
    teacherId?: StringFieldUpdateOperationsInput | string
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type TeacherSubjectCreateManyInput = {
    teacherId: string
    subjectId: number
  }

  export type TeacherSubjectUpdateManyMutationInput = {

  }

  export type TeacherSubjectUncheckedUpdateManyInput = {
    teacherId?: StringFieldUpdateOperationsInput | string
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type ClerkTeachersCreateInput = {
    clerk_id: string
    user_id?: string | null
    username: string
    password: string
    full_name: string
    role?: string
    teacher?: TeacherCreateNestedOneWithoutClerkTeachersInput
  }

  export type ClerkTeachersUncheckedCreateInput = {
    clerk_id: string
    user_id?: string | null
    username: string
    password: string
    full_name: string
    role?: string
    teacherId?: string | null
  }

  export type ClerkTeachersUpdateInput = {
    clerk_id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    teacher?: TeacherUpdateOneWithoutClerkTeachersNestedInput
  }

  export type ClerkTeachersUncheckedUpdateInput = {
    clerk_id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    teacherId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClerkTeachersCreateManyInput = {
    clerk_id: string
    user_id?: string | null
    username: string
    password: string
    full_name: string
    role?: string
    teacherId?: string | null
  }

  export type ClerkTeachersUpdateManyMutationInput = {
    clerk_id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type ClerkTeachersUncheckedUpdateManyInput = {
    clerk_id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    teacherId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeeStructureCreateInput = {
    startDate: Date | string
    dueDate: Date | string
    termFees: number
    abacusFees?: number | null
    term: $Enums.Term
    academicYear?: $Enums.AcademicYear
    grade: GradeCreateNestedOneWithoutFeestructureInput
    studentFees?: StudentFeesCreateNestedManyWithoutFeeStructureInput
  }

  export type FeeStructureUncheckedCreateInput = {
    id?: number
    gradeId: number
    startDate: Date | string
    dueDate: Date | string
    termFees: number
    abacusFees?: number | null
    term: $Enums.Term
    academicYear?: $Enums.AcademicYear
    studentFees?: StudentFeesUncheckedCreateNestedManyWithoutFeeStructureInput
  }

  export type FeeStructureUpdateInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    termFees?: IntFieldUpdateOperationsInput | number
    abacusFees?: NullableIntFieldUpdateOperationsInput | number | null
    term?: EnumTermFieldUpdateOperationsInput | $Enums.Term
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    grade?: GradeUpdateOneRequiredWithoutFeestructureNestedInput
    studentFees?: StudentFeesUpdateManyWithoutFeeStructureNestedInput
  }

  export type FeeStructureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    termFees?: IntFieldUpdateOperationsInput | number
    abacusFees?: NullableIntFieldUpdateOperationsInput | number | null
    term?: EnumTermFieldUpdateOperationsInput | $Enums.Term
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    studentFees?: StudentFeesUncheckedUpdateManyWithoutFeeStructureNestedInput
  }

  export type FeeStructureCreateManyInput = {
    id?: number
    gradeId: number
    startDate: Date | string
    dueDate: Date | string
    termFees: number
    abacusFees?: number | null
    term: $Enums.Term
    academicYear?: $Enums.AcademicYear
  }

  export type FeeStructureUpdateManyMutationInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    termFees?: IntFieldUpdateOperationsInput | number
    abacusFees?: NullableIntFieldUpdateOperationsInput | number | null
    term?: EnumTermFieldUpdateOperationsInput | $Enums.Term
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
  }

  export type FeeStructureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    termFees?: IntFieldUpdateOperationsInput | number
    abacusFees?: NullableIntFieldUpdateOperationsInput | number | null
    term?: EnumTermFieldUpdateOperationsInput | $Enums.Term
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
  }

  export type FeeTransactionCreateInput = {
    term: string
    amount?: number
    discountAmount?: number
    fineAmount?: number
    receiptDate: Date | string
    receiptNo: string
    paymentMode?: $Enums.PaymentMode
    createdAt?: Date | string
    updatedAt?: Date | string
    remarks?: string | null
    studentFees: StudentFeesCreateNestedOneWithoutFeeTransactionsInput
    student: StudentCreateNestedOneWithoutFeeTransactionsInput
  }

  export type FeeTransactionUncheckedCreateInput = {
    id?: number
    studentId: string
    term: string
    studentFeesId: number
    amount?: number
    discountAmount?: number
    fineAmount?: number
    receiptDate: Date | string
    receiptNo: string
    paymentMode?: $Enums.PaymentMode
    createdAt?: Date | string
    updatedAt?: Date | string
    remarks?: string | null
  }

  export type FeeTransactionUpdateInput = {
    term?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    fineAmount?: FloatFieldUpdateOperationsInput | number
    receiptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    studentFees?: StudentFeesUpdateOneRequiredWithoutFeeTransactionsNestedInput
    student?: StudentUpdateOneRequiredWithoutFeeTransactionsNestedInput
  }

  export type FeeTransactionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    studentFeesId?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    fineAmount?: FloatFieldUpdateOperationsInput | number
    receiptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeeTransactionCreateManyInput = {
    id?: number
    studentId: string
    term: string
    studentFeesId: number
    amount?: number
    discountAmount?: number
    fineAmount?: number
    receiptDate: Date | string
    receiptNo: string
    paymentMode?: $Enums.PaymentMode
    createdAt?: Date | string
    updatedAt?: Date | string
    remarks?: string | null
  }

  export type FeeTransactionUpdateManyMutationInput = {
    term?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    fineAmount?: FloatFieldUpdateOperationsInput | number
    receiptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeeTransactionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    studentFeesId?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    fineAmount?: FloatFieldUpdateOperationsInput | number
    receiptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentFeesCreateInput = {
    paidAmount?: number
    abacusPaidAmount?: number | null
    discountAmount?: number
    fineAmount?: number
    receiptDate?: Date | string | null
    receivedDate?: Date | string | null
    paymentMode?: $Enums.PaymentMode
    academicYear?: $Enums.AcademicYear
    receiptNo?: string | null
    term: string
    remarks?: string | null
    feeTransactions?: FeeTransactionCreateNestedManyWithoutStudentFeesInput
    feeStructure: FeeStructureCreateNestedOneWithoutStudentFeesInput
    student: StudentCreateNestedOneWithoutStudentFeesInput
  }

  export type StudentFeesUncheckedCreateInput = {
    id?: number
    studentId: string
    paidAmount?: number
    abacusPaidAmount?: number | null
    feeStructureId: number
    discountAmount?: number
    fineAmount?: number
    receiptDate?: Date | string | null
    receivedDate?: Date | string | null
    paymentMode?: $Enums.PaymentMode
    academicYear?: $Enums.AcademicYear
    receiptNo?: string | null
    term: string
    remarks?: string | null
    feeTransactions?: FeeTransactionUncheckedCreateNestedManyWithoutStudentFeesInput
  }

  export type StudentFeesUpdateInput = {
    paidAmount?: IntFieldUpdateOperationsInput | number
    abacusPaidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    discountAmount?: IntFieldUpdateOperationsInput | number
    fineAmount?: IntFieldUpdateOperationsInput | number
    receiptDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    receiptNo?: NullableStringFieldUpdateOperationsInput | string | null
    term?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    feeTransactions?: FeeTransactionUpdateManyWithoutStudentFeesNestedInput
    feeStructure?: FeeStructureUpdateOneRequiredWithoutStudentFeesNestedInput
    student?: StudentUpdateOneRequiredWithoutStudentFeesNestedInput
  }

  export type StudentFeesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    paidAmount?: IntFieldUpdateOperationsInput | number
    abacusPaidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeStructureId?: IntFieldUpdateOperationsInput | number
    discountAmount?: IntFieldUpdateOperationsInput | number
    fineAmount?: IntFieldUpdateOperationsInput | number
    receiptDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    receiptNo?: NullableStringFieldUpdateOperationsInput | string | null
    term?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    feeTransactions?: FeeTransactionUncheckedUpdateManyWithoutStudentFeesNestedInput
  }

  export type StudentFeesCreateManyInput = {
    id?: number
    studentId: string
    paidAmount?: number
    abacusPaidAmount?: number | null
    feeStructureId: number
    discountAmount?: number
    fineAmount?: number
    receiptDate?: Date | string | null
    receivedDate?: Date | string | null
    paymentMode?: $Enums.PaymentMode
    academicYear?: $Enums.AcademicYear
    receiptNo?: string | null
    term: string
    remarks?: string | null
  }

  export type StudentFeesUpdateManyMutationInput = {
    paidAmount?: IntFieldUpdateOperationsInput | number
    abacusPaidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    discountAmount?: IntFieldUpdateOperationsInput | number
    fineAmount?: IntFieldUpdateOperationsInput | number
    receiptDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    receiptNo?: NullableStringFieldUpdateOperationsInput | string | null
    term?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentFeesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    paidAmount?: IntFieldUpdateOperationsInput | number
    abacusPaidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeStructureId?: IntFieldUpdateOperationsInput | number
    discountAmount?: IntFieldUpdateOperationsInput | number
    fineAmount?: IntFieldUpdateOperationsInput | number
    receiptDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    receiptNo?: NullableStringFieldUpdateOperationsInput | string | null
    term?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentTotalFeesCreateInput = {
    totalPaidAmount?: number
    totalDiscountAmount?: number
    totalFineAmount?: number
    totalAbacusAmount?: number
    totalFeeAmount?: number
    dueAmount?: number
    status?: string
    student: StudentCreateNestedOneWithoutTotalFeesInput
  }

  export type StudentTotalFeesUncheckedCreateInput = {
    id?: number
    studentId: string
    totalPaidAmount?: number
    totalDiscountAmount?: number
    totalFineAmount?: number
    totalAbacusAmount?: number
    totalFeeAmount?: number
    dueAmount?: number
    status?: string
  }

  export type StudentTotalFeesUpdateInput = {
    totalPaidAmount?: FloatFieldUpdateOperationsInput | number
    totalDiscountAmount?: FloatFieldUpdateOperationsInput | number
    totalFineAmount?: FloatFieldUpdateOperationsInput | number
    totalAbacusAmount?: FloatFieldUpdateOperationsInput | number
    totalFeeAmount?: FloatFieldUpdateOperationsInput | number
    dueAmount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    student?: StudentUpdateOneRequiredWithoutTotalFeesNestedInput
  }

  export type StudentTotalFeesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    totalPaidAmount?: FloatFieldUpdateOperationsInput | number
    totalDiscountAmount?: FloatFieldUpdateOperationsInput | number
    totalFineAmount?: FloatFieldUpdateOperationsInput | number
    totalAbacusAmount?: FloatFieldUpdateOperationsInput | number
    totalFeeAmount?: FloatFieldUpdateOperationsInput | number
    dueAmount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type StudentTotalFeesCreateManyInput = {
    id?: number
    studentId: string
    totalPaidAmount?: number
    totalDiscountAmount?: number
    totalFineAmount?: number
    totalAbacusAmount?: number
    totalFeeAmount?: number
    dueAmount?: number
    status?: string
  }

  export type StudentTotalFeesUpdateManyMutationInput = {
    totalPaidAmount?: FloatFieldUpdateOperationsInput | number
    totalDiscountAmount?: FloatFieldUpdateOperationsInput | number
    totalFineAmount?: FloatFieldUpdateOperationsInput | number
    totalAbacusAmount?: FloatFieldUpdateOperationsInput | number
    totalFeeAmount?: FloatFieldUpdateOperationsInput | number
    dueAmount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type StudentTotalFeesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    totalPaidAmount?: FloatFieldUpdateOperationsInput | number
    totalDiscountAmount?: FloatFieldUpdateOperationsInput | number
    totalFineAmount?: FloatFieldUpdateOperationsInput | number
    totalAbacusAmount?: FloatFieldUpdateOperationsInput | number
    totalFeeAmount?: FloatFieldUpdateOperationsInput | number
    dueAmount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    full_name?: SortOrder
    parentName?: SortOrder
    gender?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    dob?: SortOrder
    img?: SortOrder
    bloodType?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    full_name?: SortOrder
    parentName?: SortOrder
    gender?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    dob?: SortOrder
    img?: SortOrder
    bloodType?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    full_name?: SortOrder
    parentName?: SortOrder
    gender?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    dob?: SortOrder
    img?: SortOrder
    bloodType?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FeeStructureListRelationFilter = {
    every?: FeeStructureWhereInput
    some?: FeeStructureWhereInput
    none?: FeeStructureWhereInput
  }

  export type HomeworkListRelationFilter = {
    every?: HomeworkWhereInput
    some?: HomeworkWhereInput
    none?: HomeworkWhereInput
  }

  export type ClassListRelationFilter = {
    every?: ClassWhereInput
    some?: ClassWhereInput
    none?: ClassWhereInput
  }

  export type FeeStructureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HomeworkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GradeCountOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
  }

  export type GradeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GradeMaxOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
  }

  export type GradeMinOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
  }

  export type GradeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AnnouncementListRelationFilter = {
    every?: AnnouncementWhereInput
    some?: AnnouncementWhereInput
    none?: AnnouncementWhereInput
  }

  export type AttendanceListRelationFilter = {
    every?: AttendanceWhereInput
    some?: AttendanceWhereInput
    none?: AttendanceWhereInput
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type ExamListRelationFilter = {
    every?: ExamWhereInput
    some?: ExamWhereInput
    none?: ExamWhereInput
  }

  export type LessonListRelationFilter = {
    every?: LessonWhereInput
    some?: LessonWhereInput
    none?: LessonWhereInput
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type GradeScalarRelationFilter = {
    is?: GradeWhereInput
    isNot?: GradeWhereInput
  }

  export type TeacherNullableScalarRelationFilter = {
    is?: TeacherWhereInput | null
    isNot?: TeacherWhereInput | null
  }

  export type AnnouncementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttendanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LessonOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    supervisorId?: SortOrder
    gradeId?: SortOrder
  }

  export type ClassAvgOrderByAggregateInput = {
    id?: SortOrder
    gradeId?: SortOrder
  }

  export type ClassMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    supervisorId?: SortOrder
    gradeId?: SortOrder
  }

  export type ClassMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    supervisorId?: SortOrder
    gradeId?: SortOrder
  }

  export type ClassSumOrderByAggregateInput = {
    id?: SortOrder
    gradeId?: SortOrder
  }

  export type EnumLessonDayFilter<$PrismaModel = never> = {
    equals?: $Enums.LessonDay | EnumLessonDayFieldRefInput<$PrismaModel>
    in?: $Enums.LessonDay[] | ListEnumLessonDayFieldRefInput<$PrismaModel>
    notIn?: $Enums.LessonDay[] | ListEnumLessonDayFieldRefInput<$PrismaModel>
    not?: NestedEnumLessonDayFilter<$PrismaModel> | $Enums.LessonDay
  }

  export type ClassScalarRelationFilter = {
    is?: ClassWhereInput
    isNot?: ClassWhereInput
  }

  export type SubjectScalarRelationFilter = {
    is?: SubjectWhereInput
    isNot?: SubjectWhereInput
  }

  export type TeacherScalarRelationFilter = {
    is?: TeacherWhereInput
    isNot?: TeacherWhereInput
  }

  export type LessonCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    day?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    subjectId?: SortOrder
    classId?: SortOrder
    teacherId?: SortOrder
  }

  export type LessonAvgOrderByAggregateInput = {
    id?: SortOrder
    subjectId?: SortOrder
    classId?: SortOrder
  }

  export type LessonMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    day?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    subjectId?: SortOrder
    classId?: SortOrder
    teacherId?: SortOrder
  }

  export type LessonMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    day?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    subjectId?: SortOrder
    classId?: SortOrder
    teacherId?: SortOrder
  }

  export type LessonSumOrderByAggregateInput = {
    id?: SortOrder
    subjectId?: SortOrder
    classId?: SortOrder
  }

  export type EnumLessonDayWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LessonDay | EnumLessonDayFieldRefInput<$PrismaModel>
    in?: $Enums.LessonDay[] | ListEnumLessonDayFieldRefInput<$PrismaModel>
    notIn?: $Enums.LessonDay[] | ListEnumLessonDayFieldRefInput<$PrismaModel>
    not?: NestedEnumLessonDayWithAggregatesFilter<$PrismaModel> | $Enums.LessonDay
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLessonDayFilter<$PrismaModel>
    _max?: NestedEnumLessonDayFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ClassNullableScalarRelationFilter = {
    is?: ClassWhereInput | null
    isNot?: ClassWhereInput | null
  }

  export type AnnouncementCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    classId?: SortOrder
  }

  export type AnnouncementAvgOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type AnnouncementMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    classId?: SortOrder
  }

  export type AnnouncementMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    classId?: SortOrder
  }

  export type AnnouncementSumOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StudentScalarRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type AttendanceCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    present?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
  }

  export type AttendanceAvgOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type AttendanceMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    present?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
  }

  export type AttendanceMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    present?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
  }

  export type AttendanceSumOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    classId?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    classId?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    classId?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type ExamSubjectListRelationFilter = {
    every?: ExamSubjectWhereInput
    some?: ExamSubjectWhereInput
    none?: ExamSubjectWhereInput
  }

  export type ResultListRelationFilter = {
    every?: ResultWhereInput
    some?: ResultWhereInput
    none?: ResultWhereInput
  }

  export type ExamSubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExamCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    classId?: SortOrder
  }

  export type ExamAvgOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type ExamMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    classId?: SortOrder
  }

  export type ExamMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    classId?: SortOrder
  }

  export type ExamSumOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type ExamScalarRelationFilter = {
    is?: ExamWhereInput
    isNot?: ExamWhereInput
  }

  export type ExamSubjectExamIdSubjectIdCompoundUniqueInput = {
    examId: number
    subjectId: number
  }

  export type ExamSubjectCountOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
    subjectId?: SortOrder
    maxMarks?: SortOrder
  }

  export type ExamSubjectAvgOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
    subjectId?: SortOrder
    maxMarks?: SortOrder
  }

  export type ExamSubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
    subjectId?: SortOrder
    maxMarks?: SortOrder
  }

  export type ExamSubjectMinOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
    subjectId?: SortOrder
    maxMarks?: SortOrder
  }

  export type ExamSubjectSumOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
    subjectId?: SortOrder
    maxMarks?: SortOrder
  }

  export type HomeworkCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    date?: SortOrder
    classId?: SortOrder
    gradeId?: SortOrder
  }

  export type HomeworkAvgOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    gradeId?: SortOrder
  }

  export type HomeworkMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    date?: SortOrder
    classId?: SortOrder
    gradeId?: SortOrder
  }

  export type HomeworkMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    date?: SortOrder
    classId?: SortOrder
    gradeId?: SortOrder
  }

  export type HomeworkSumOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    gradeId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ResultCountOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    studentId?: SortOrder
    examId?: SortOrder
    subjectId?: SortOrder
  }

  export type ResultAvgOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    examId?: SortOrder
    subjectId?: SortOrder
  }

  export type ResultMaxOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    studentId?: SortOrder
    examId?: SortOrder
    subjectId?: SortOrder
  }

  export type ResultMinOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    studentId?: SortOrder
    examId?: SortOrder
    subjectId?: SortOrder
  }

  export type ResultSumOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    examId?: SortOrder
    subjectId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type EnumAcademicYearFilter<$PrismaModel = never> = {
    equals?: $Enums.AcademicYear | EnumAcademicYearFieldRefInput<$PrismaModel>
    in?: $Enums.AcademicYear[] | ListEnumAcademicYearFieldRefInput<$PrismaModel>
    notIn?: $Enums.AcademicYear[] | ListEnumAcademicYearFieldRefInput<$PrismaModel>
    not?: NestedEnumAcademicYearFilter<$PrismaModel> | $Enums.AcademicYear
  }

  export type ClerkStudentsNullableScalarRelationFilter = {
    is?: ClerkStudentsWhereInput | null
    isNot?: ClerkStudentsWhereInput | null
  }

  export type FeeTransactionListRelationFilter = {
    every?: FeeTransactionWhereInput
    some?: FeeTransactionWhereInput
    none?: FeeTransactionWhereInput
  }

  export type StudentFeesListRelationFilter = {
    every?: StudentFeesWhereInput
    some?: StudentFeesWhereInput
    none?: StudentFeesWhereInput
  }

  export type StudentTotalFeesListRelationFilter = {
    every?: StudentTotalFeesWhereInput
    some?: StudentTotalFeesWhereInput
    none?: StudentTotalFeesWhereInput
  }

  export type FeeTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentFeesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentTotalFeesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    parentName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    img?: SortOrder
    bloodType?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    classId?: SortOrder
    clerk_id?: SortOrder
    academicYear?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    classId?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    parentName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    img?: SortOrder
    bloodType?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    classId?: SortOrder
    clerk_id?: SortOrder
    academicYear?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    parentName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    img?: SortOrder
    bloodType?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    classId?: SortOrder
    clerk_id?: SortOrder
    academicYear?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    classId?: SortOrder
  }

  export type EnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type EnumAcademicYearWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AcademicYear | EnumAcademicYearFieldRefInput<$PrismaModel>
    in?: $Enums.AcademicYear[] | ListEnumAcademicYearFieldRefInput<$PrismaModel>
    notIn?: $Enums.AcademicYear[] | ListEnumAcademicYearFieldRefInput<$PrismaModel>
    not?: NestedEnumAcademicYearWithAggregatesFilter<$PrismaModel> | $Enums.AcademicYear
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAcademicYearFilter<$PrismaModel>
    _max?: NestedEnumAcademicYearFilter<$PrismaModel>
  }

  export type StudentNullableScalarRelationFilter = {
    is?: StudentWhereInput | null
    isNot?: StudentWhereInput | null
  }

  export type ClerkStudentsCountOrderByAggregateInput = {
    clerk_id?: SortOrder
    user_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    full_name?: SortOrder
    role?: SortOrder
    studentId?: SortOrder
  }

  export type ClerkStudentsMaxOrderByAggregateInput = {
    clerk_id?: SortOrder
    user_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    full_name?: SortOrder
    role?: SortOrder
    studentId?: SortOrder
  }

  export type ClerkStudentsMinOrderByAggregateInput = {
    clerk_id?: SortOrder
    user_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    full_name?: SortOrder
    role?: SortOrder
    studentId?: SortOrder
  }

  export type TeacherSubjectListRelationFilter = {
    every?: TeacherSubjectWhereInput
    some?: TeacherSubjectWhereInput
    none?: TeacherSubjectWhereInput
  }

  export type TeacherSubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type SubjectAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type SubjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type SubjectSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClerkTeachersNullableScalarRelationFilter = {
    is?: ClerkTeachersWhereInput | null
    isNot?: ClerkTeachersWhereInput | null
  }

  export type TeacherCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    img?: SortOrder
    bloodType?: SortOrder
    gender?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    supervisor?: SortOrder
    dob?: SortOrder
    classId?: SortOrder
    clerk_id?: SortOrder
  }

  export type TeacherMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    img?: SortOrder
    bloodType?: SortOrder
    gender?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    supervisor?: SortOrder
    dob?: SortOrder
    classId?: SortOrder
    clerk_id?: SortOrder
  }

  export type TeacherMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    img?: SortOrder
    bloodType?: SortOrder
    gender?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    supervisor?: SortOrder
    dob?: SortOrder
    classId?: SortOrder
    clerk_id?: SortOrder
  }

  export type TeacherSubjectTeacherIdSubjectIdCompoundUniqueInput = {
    teacherId: string
    subjectId: number
  }

  export type TeacherSubjectCountOrderByAggregateInput = {
    teacherId?: SortOrder
    subjectId?: SortOrder
  }

  export type TeacherSubjectAvgOrderByAggregateInput = {
    subjectId?: SortOrder
  }

  export type TeacherSubjectMaxOrderByAggregateInput = {
    teacherId?: SortOrder
    subjectId?: SortOrder
  }

  export type TeacherSubjectMinOrderByAggregateInput = {
    teacherId?: SortOrder
    subjectId?: SortOrder
  }

  export type TeacherSubjectSumOrderByAggregateInput = {
    subjectId?: SortOrder
  }

  export type ClerkTeachersCountOrderByAggregateInput = {
    clerk_id?: SortOrder
    user_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    full_name?: SortOrder
    role?: SortOrder
    teacherId?: SortOrder
  }

  export type ClerkTeachersMaxOrderByAggregateInput = {
    clerk_id?: SortOrder
    user_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    full_name?: SortOrder
    role?: SortOrder
    teacherId?: SortOrder
  }

  export type ClerkTeachersMinOrderByAggregateInput = {
    clerk_id?: SortOrder
    user_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    full_name?: SortOrder
    role?: SortOrder
    teacherId?: SortOrder
  }

  export type EnumTermFilter<$PrismaModel = never> = {
    equals?: $Enums.Term | EnumTermFieldRefInput<$PrismaModel>
    in?: $Enums.Term[] | ListEnumTermFieldRefInput<$PrismaModel>
    notIn?: $Enums.Term[] | ListEnumTermFieldRefInput<$PrismaModel>
    not?: NestedEnumTermFilter<$PrismaModel> | $Enums.Term
  }

  export type FeeStructureGradeIdTermAcademicYearCompoundUniqueInput = {
    gradeId: number
    term: $Enums.Term
    academicYear: $Enums.AcademicYear
  }

  export type FeeStructureCountOrderByAggregateInput = {
    id?: SortOrder
    gradeId?: SortOrder
    startDate?: SortOrder
    dueDate?: SortOrder
    termFees?: SortOrder
    abacusFees?: SortOrder
    term?: SortOrder
    academicYear?: SortOrder
  }

  export type FeeStructureAvgOrderByAggregateInput = {
    id?: SortOrder
    gradeId?: SortOrder
    termFees?: SortOrder
    abacusFees?: SortOrder
  }

  export type FeeStructureMaxOrderByAggregateInput = {
    id?: SortOrder
    gradeId?: SortOrder
    startDate?: SortOrder
    dueDate?: SortOrder
    termFees?: SortOrder
    abacusFees?: SortOrder
    term?: SortOrder
    academicYear?: SortOrder
  }

  export type FeeStructureMinOrderByAggregateInput = {
    id?: SortOrder
    gradeId?: SortOrder
    startDate?: SortOrder
    dueDate?: SortOrder
    termFees?: SortOrder
    abacusFees?: SortOrder
    term?: SortOrder
    academicYear?: SortOrder
  }

  export type FeeStructureSumOrderByAggregateInput = {
    id?: SortOrder
    gradeId?: SortOrder
    termFees?: SortOrder
    abacusFees?: SortOrder
  }

  export type EnumTermWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Term | EnumTermFieldRefInput<$PrismaModel>
    in?: $Enums.Term[] | ListEnumTermFieldRefInput<$PrismaModel>
    notIn?: $Enums.Term[] | ListEnumTermFieldRefInput<$PrismaModel>
    not?: NestedEnumTermWithAggregatesFilter<$PrismaModel> | $Enums.Term
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTermFilter<$PrismaModel>
    _max?: NestedEnumTermFilter<$PrismaModel>
  }

  export type EnumPaymentModeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMode | EnumPaymentModeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentModeFilter<$PrismaModel> | $Enums.PaymentMode
  }

  export type StudentFeesScalarRelationFilter = {
    is?: StudentFeesWhereInput
    isNot?: StudentFeesWhereInput
  }

  export type FeeTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    term?: SortOrder
    studentFeesId?: SortOrder
    amount?: SortOrder
    discountAmount?: SortOrder
    fineAmount?: SortOrder
    receiptDate?: SortOrder
    receiptNo?: SortOrder
    paymentMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    remarks?: SortOrder
  }

  export type FeeTransactionAvgOrderByAggregateInput = {
    id?: SortOrder
    studentFeesId?: SortOrder
    amount?: SortOrder
    discountAmount?: SortOrder
    fineAmount?: SortOrder
  }

  export type FeeTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    term?: SortOrder
    studentFeesId?: SortOrder
    amount?: SortOrder
    discountAmount?: SortOrder
    fineAmount?: SortOrder
    receiptDate?: SortOrder
    receiptNo?: SortOrder
    paymentMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    remarks?: SortOrder
  }

  export type FeeTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    term?: SortOrder
    studentFeesId?: SortOrder
    amount?: SortOrder
    discountAmount?: SortOrder
    fineAmount?: SortOrder
    receiptDate?: SortOrder
    receiptNo?: SortOrder
    paymentMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    remarks?: SortOrder
  }

  export type FeeTransactionSumOrderByAggregateInput = {
    id?: SortOrder
    studentFeesId?: SortOrder
    amount?: SortOrder
    discountAmount?: SortOrder
    fineAmount?: SortOrder
  }

  export type EnumPaymentModeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMode | EnumPaymentModeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentModeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentModeFilter<$PrismaModel>
    _max?: NestedEnumPaymentModeFilter<$PrismaModel>
  }

  export type FeeStructureScalarRelationFilter = {
    is?: FeeStructureWhereInput
    isNot?: FeeStructureWhereInput
  }

  export type StudentFeesStudentIdAcademicYearTermCompoundUniqueInput = {
    studentId: string
    academicYear: $Enums.AcademicYear
    term: string
  }

  export type StudentFeesCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    paidAmount?: SortOrder
    abacusPaidAmount?: SortOrder
    feeStructureId?: SortOrder
    discountAmount?: SortOrder
    fineAmount?: SortOrder
    receiptDate?: SortOrder
    receivedDate?: SortOrder
    paymentMode?: SortOrder
    academicYear?: SortOrder
    receiptNo?: SortOrder
    term?: SortOrder
    remarks?: SortOrder
  }

  export type StudentFeesAvgOrderByAggregateInput = {
    id?: SortOrder
    paidAmount?: SortOrder
    abacusPaidAmount?: SortOrder
    feeStructureId?: SortOrder
    discountAmount?: SortOrder
    fineAmount?: SortOrder
  }

  export type StudentFeesMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    paidAmount?: SortOrder
    abacusPaidAmount?: SortOrder
    feeStructureId?: SortOrder
    discountAmount?: SortOrder
    fineAmount?: SortOrder
    receiptDate?: SortOrder
    receivedDate?: SortOrder
    paymentMode?: SortOrder
    academicYear?: SortOrder
    receiptNo?: SortOrder
    term?: SortOrder
    remarks?: SortOrder
  }

  export type StudentFeesMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    paidAmount?: SortOrder
    abacusPaidAmount?: SortOrder
    feeStructureId?: SortOrder
    discountAmount?: SortOrder
    fineAmount?: SortOrder
    receiptDate?: SortOrder
    receivedDate?: SortOrder
    paymentMode?: SortOrder
    academicYear?: SortOrder
    receiptNo?: SortOrder
    term?: SortOrder
    remarks?: SortOrder
  }

  export type StudentFeesSumOrderByAggregateInput = {
    id?: SortOrder
    paidAmount?: SortOrder
    abacusPaidAmount?: SortOrder
    feeStructureId?: SortOrder
    discountAmount?: SortOrder
    fineAmount?: SortOrder
  }

  export type StudentTotalFeesCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    totalPaidAmount?: SortOrder
    totalDiscountAmount?: SortOrder
    totalFineAmount?: SortOrder
    totalAbacusAmount?: SortOrder
    totalFeeAmount?: SortOrder
    dueAmount?: SortOrder
    status?: SortOrder
  }

  export type StudentTotalFeesAvgOrderByAggregateInput = {
    id?: SortOrder
    totalPaidAmount?: SortOrder
    totalDiscountAmount?: SortOrder
    totalFineAmount?: SortOrder
    totalAbacusAmount?: SortOrder
    totalFeeAmount?: SortOrder
    dueAmount?: SortOrder
  }

  export type StudentTotalFeesMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    totalPaidAmount?: SortOrder
    totalDiscountAmount?: SortOrder
    totalFineAmount?: SortOrder
    totalAbacusAmount?: SortOrder
    totalFeeAmount?: SortOrder
    dueAmount?: SortOrder
    status?: SortOrder
  }

  export type StudentTotalFeesMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    totalPaidAmount?: SortOrder
    totalDiscountAmount?: SortOrder
    totalFineAmount?: SortOrder
    totalAbacusAmount?: SortOrder
    totalFeeAmount?: SortOrder
    dueAmount?: SortOrder
    status?: SortOrder
  }

  export type StudentTotalFeesSumOrderByAggregateInput = {
    id?: SortOrder
    totalPaidAmount?: SortOrder
    totalDiscountAmount?: SortOrder
    totalFineAmount?: SortOrder
    totalAbacusAmount?: SortOrder
    totalFeeAmount?: SortOrder
    dueAmount?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FeeStructureCreateNestedManyWithoutGradeInput = {
    create?: XOR<FeeStructureCreateWithoutGradeInput, FeeStructureUncheckedCreateWithoutGradeInput> | FeeStructureCreateWithoutGradeInput[] | FeeStructureUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: FeeStructureCreateOrConnectWithoutGradeInput | FeeStructureCreateOrConnectWithoutGradeInput[]
    createMany?: FeeStructureCreateManyGradeInputEnvelope
    connect?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
  }

  export type HomeworkCreateNestedManyWithoutGradeInput = {
    create?: XOR<HomeworkCreateWithoutGradeInput, HomeworkUncheckedCreateWithoutGradeInput> | HomeworkCreateWithoutGradeInput[] | HomeworkUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: HomeworkCreateOrConnectWithoutGradeInput | HomeworkCreateOrConnectWithoutGradeInput[]
    createMany?: HomeworkCreateManyGradeInputEnvelope
    connect?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
  }

  export type ClassCreateNestedManyWithoutGradeInput = {
    create?: XOR<ClassCreateWithoutGradeInput, ClassUncheckedCreateWithoutGradeInput> | ClassCreateWithoutGradeInput[] | ClassUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutGradeInput | ClassCreateOrConnectWithoutGradeInput[]
    createMany?: ClassCreateManyGradeInputEnvelope
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type FeeStructureUncheckedCreateNestedManyWithoutGradeInput = {
    create?: XOR<FeeStructureCreateWithoutGradeInput, FeeStructureUncheckedCreateWithoutGradeInput> | FeeStructureCreateWithoutGradeInput[] | FeeStructureUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: FeeStructureCreateOrConnectWithoutGradeInput | FeeStructureCreateOrConnectWithoutGradeInput[]
    createMany?: FeeStructureCreateManyGradeInputEnvelope
    connect?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
  }

  export type HomeworkUncheckedCreateNestedManyWithoutGradeInput = {
    create?: XOR<HomeworkCreateWithoutGradeInput, HomeworkUncheckedCreateWithoutGradeInput> | HomeworkCreateWithoutGradeInput[] | HomeworkUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: HomeworkCreateOrConnectWithoutGradeInput | HomeworkCreateOrConnectWithoutGradeInput[]
    createMany?: HomeworkCreateManyGradeInputEnvelope
    connect?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
  }

  export type ClassUncheckedCreateNestedManyWithoutGradeInput = {
    create?: XOR<ClassCreateWithoutGradeInput, ClassUncheckedCreateWithoutGradeInput> | ClassCreateWithoutGradeInput[] | ClassUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutGradeInput | ClassCreateOrConnectWithoutGradeInput[]
    createMany?: ClassCreateManyGradeInputEnvelope
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type FeeStructureUpdateManyWithoutGradeNestedInput = {
    create?: XOR<FeeStructureCreateWithoutGradeInput, FeeStructureUncheckedCreateWithoutGradeInput> | FeeStructureCreateWithoutGradeInput[] | FeeStructureUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: FeeStructureCreateOrConnectWithoutGradeInput | FeeStructureCreateOrConnectWithoutGradeInput[]
    upsert?: FeeStructureUpsertWithWhereUniqueWithoutGradeInput | FeeStructureUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: FeeStructureCreateManyGradeInputEnvelope
    set?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
    disconnect?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
    delete?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
    connect?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
    update?: FeeStructureUpdateWithWhereUniqueWithoutGradeInput | FeeStructureUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: FeeStructureUpdateManyWithWhereWithoutGradeInput | FeeStructureUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: FeeStructureScalarWhereInput | FeeStructureScalarWhereInput[]
  }

  export type HomeworkUpdateManyWithoutGradeNestedInput = {
    create?: XOR<HomeworkCreateWithoutGradeInput, HomeworkUncheckedCreateWithoutGradeInput> | HomeworkCreateWithoutGradeInput[] | HomeworkUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: HomeworkCreateOrConnectWithoutGradeInput | HomeworkCreateOrConnectWithoutGradeInput[]
    upsert?: HomeworkUpsertWithWhereUniqueWithoutGradeInput | HomeworkUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: HomeworkCreateManyGradeInputEnvelope
    set?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    disconnect?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    delete?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    connect?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    update?: HomeworkUpdateWithWhereUniqueWithoutGradeInput | HomeworkUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: HomeworkUpdateManyWithWhereWithoutGradeInput | HomeworkUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: HomeworkScalarWhereInput | HomeworkScalarWhereInput[]
  }

  export type ClassUpdateManyWithoutGradeNestedInput = {
    create?: XOR<ClassCreateWithoutGradeInput, ClassUncheckedCreateWithoutGradeInput> | ClassCreateWithoutGradeInput[] | ClassUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutGradeInput | ClassCreateOrConnectWithoutGradeInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutGradeInput | ClassUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: ClassCreateManyGradeInputEnvelope
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutGradeInput | ClassUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutGradeInput | ClassUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type FeeStructureUncheckedUpdateManyWithoutGradeNestedInput = {
    create?: XOR<FeeStructureCreateWithoutGradeInput, FeeStructureUncheckedCreateWithoutGradeInput> | FeeStructureCreateWithoutGradeInput[] | FeeStructureUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: FeeStructureCreateOrConnectWithoutGradeInput | FeeStructureCreateOrConnectWithoutGradeInput[]
    upsert?: FeeStructureUpsertWithWhereUniqueWithoutGradeInput | FeeStructureUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: FeeStructureCreateManyGradeInputEnvelope
    set?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
    disconnect?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
    delete?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
    connect?: FeeStructureWhereUniqueInput | FeeStructureWhereUniqueInput[]
    update?: FeeStructureUpdateWithWhereUniqueWithoutGradeInput | FeeStructureUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: FeeStructureUpdateManyWithWhereWithoutGradeInput | FeeStructureUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: FeeStructureScalarWhereInput | FeeStructureScalarWhereInput[]
  }

  export type HomeworkUncheckedUpdateManyWithoutGradeNestedInput = {
    create?: XOR<HomeworkCreateWithoutGradeInput, HomeworkUncheckedCreateWithoutGradeInput> | HomeworkCreateWithoutGradeInput[] | HomeworkUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: HomeworkCreateOrConnectWithoutGradeInput | HomeworkCreateOrConnectWithoutGradeInput[]
    upsert?: HomeworkUpsertWithWhereUniqueWithoutGradeInput | HomeworkUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: HomeworkCreateManyGradeInputEnvelope
    set?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    disconnect?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    delete?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    connect?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    update?: HomeworkUpdateWithWhereUniqueWithoutGradeInput | HomeworkUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: HomeworkUpdateManyWithWhereWithoutGradeInput | HomeworkUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: HomeworkScalarWhereInput | HomeworkScalarWhereInput[]
  }

  export type ClassUncheckedUpdateManyWithoutGradeNestedInput = {
    create?: XOR<ClassCreateWithoutGradeInput, ClassUncheckedCreateWithoutGradeInput> | ClassCreateWithoutGradeInput[] | ClassUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutGradeInput | ClassCreateOrConnectWithoutGradeInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutGradeInput | ClassUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: ClassCreateManyGradeInputEnvelope
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutGradeInput | ClassUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutGradeInput | ClassUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type AnnouncementCreateNestedManyWithoutClassInput = {
    create?: XOR<AnnouncementCreateWithoutClassInput, AnnouncementUncheckedCreateWithoutClassInput> | AnnouncementCreateWithoutClassInput[] | AnnouncementUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutClassInput | AnnouncementCreateOrConnectWithoutClassInput[]
    createMany?: AnnouncementCreateManyClassInputEnvelope
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
  }

  export type AttendanceCreateNestedManyWithoutClassInput = {
    create?: XOR<AttendanceCreateWithoutClassInput, AttendanceUncheckedCreateWithoutClassInput> | AttendanceCreateWithoutClassInput[] | AttendanceUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutClassInput | AttendanceCreateOrConnectWithoutClassInput[]
    createMany?: AttendanceCreateManyClassInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutClassInput = {
    create?: XOR<EventCreateWithoutClassInput, EventUncheckedCreateWithoutClassInput> | EventCreateWithoutClassInput[] | EventUncheckedCreateWithoutClassInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClassInput | EventCreateOrConnectWithoutClassInput[]
    createMany?: EventCreateManyClassInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type ExamCreateNestedManyWithoutClassInput = {
    create?: XOR<ExamCreateWithoutClassInput, ExamUncheckedCreateWithoutClassInput> | ExamCreateWithoutClassInput[] | ExamUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ExamCreateOrConnectWithoutClassInput | ExamCreateOrConnectWithoutClassInput[]
    createMany?: ExamCreateManyClassInputEnvelope
    connect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
  }

  export type HomeworkCreateNestedManyWithoutClassInput = {
    create?: XOR<HomeworkCreateWithoutClassInput, HomeworkUncheckedCreateWithoutClassInput> | HomeworkCreateWithoutClassInput[] | HomeworkUncheckedCreateWithoutClassInput[]
    connectOrCreate?: HomeworkCreateOrConnectWithoutClassInput | HomeworkCreateOrConnectWithoutClassInput[]
    createMany?: HomeworkCreateManyClassInputEnvelope
    connect?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
  }

  export type LessonCreateNestedManyWithoutClassInput = {
    create?: XOR<LessonCreateWithoutClassInput, LessonUncheckedCreateWithoutClassInput> | LessonCreateWithoutClassInput[] | LessonUncheckedCreateWithoutClassInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutClassInput | LessonCreateOrConnectWithoutClassInput[]
    createMany?: LessonCreateManyClassInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type StudentCreateNestedManyWithoutClassInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type GradeCreateNestedOneWithoutClassesInput = {
    create?: XOR<GradeCreateWithoutClassesInput, GradeUncheckedCreateWithoutClassesInput>
    connectOrCreate?: GradeCreateOrConnectWithoutClassesInput
    connect?: GradeWhereUniqueInput
  }

  export type TeacherCreateNestedOneWithoutClassInput = {
    create?: XOR<TeacherCreateWithoutClassInput, TeacherUncheckedCreateWithoutClassInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutClassInput
    connect?: TeacherWhereUniqueInput
  }

  export type AnnouncementUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<AnnouncementCreateWithoutClassInput, AnnouncementUncheckedCreateWithoutClassInput> | AnnouncementCreateWithoutClassInput[] | AnnouncementUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutClassInput | AnnouncementCreateOrConnectWithoutClassInput[]
    createMany?: AnnouncementCreateManyClassInputEnvelope
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
  }

  export type AttendanceUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<AttendanceCreateWithoutClassInput, AttendanceUncheckedCreateWithoutClassInput> | AttendanceCreateWithoutClassInput[] | AttendanceUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutClassInput | AttendanceCreateOrConnectWithoutClassInput[]
    createMany?: AttendanceCreateManyClassInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<EventCreateWithoutClassInput, EventUncheckedCreateWithoutClassInput> | EventCreateWithoutClassInput[] | EventUncheckedCreateWithoutClassInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClassInput | EventCreateOrConnectWithoutClassInput[]
    createMany?: EventCreateManyClassInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type ExamUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<ExamCreateWithoutClassInput, ExamUncheckedCreateWithoutClassInput> | ExamCreateWithoutClassInput[] | ExamUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ExamCreateOrConnectWithoutClassInput | ExamCreateOrConnectWithoutClassInput[]
    createMany?: ExamCreateManyClassInputEnvelope
    connect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
  }

  export type HomeworkUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<HomeworkCreateWithoutClassInput, HomeworkUncheckedCreateWithoutClassInput> | HomeworkCreateWithoutClassInput[] | HomeworkUncheckedCreateWithoutClassInput[]
    connectOrCreate?: HomeworkCreateOrConnectWithoutClassInput | HomeworkCreateOrConnectWithoutClassInput[]
    createMany?: HomeworkCreateManyClassInputEnvelope
    connect?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
  }

  export type LessonUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<LessonCreateWithoutClassInput, LessonUncheckedCreateWithoutClassInput> | LessonCreateWithoutClassInput[] | LessonUncheckedCreateWithoutClassInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutClassInput | LessonCreateOrConnectWithoutClassInput[]
    createMany?: LessonCreateManyClassInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type AnnouncementUpdateManyWithoutClassNestedInput = {
    create?: XOR<AnnouncementCreateWithoutClassInput, AnnouncementUncheckedCreateWithoutClassInput> | AnnouncementCreateWithoutClassInput[] | AnnouncementUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutClassInput | AnnouncementCreateOrConnectWithoutClassInput[]
    upsert?: AnnouncementUpsertWithWhereUniqueWithoutClassInput | AnnouncementUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AnnouncementCreateManyClassInputEnvelope
    set?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    disconnect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    delete?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    update?: AnnouncementUpdateWithWhereUniqueWithoutClassInput | AnnouncementUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AnnouncementUpdateManyWithWhereWithoutClassInput | AnnouncementUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AnnouncementScalarWhereInput | AnnouncementScalarWhereInput[]
  }

  export type AttendanceUpdateManyWithoutClassNestedInput = {
    create?: XOR<AttendanceCreateWithoutClassInput, AttendanceUncheckedCreateWithoutClassInput> | AttendanceCreateWithoutClassInput[] | AttendanceUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutClassInput | AttendanceCreateOrConnectWithoutClassInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutClassInput | AttendanceUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AttendanceCreateManyClassInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutClassInput | AttendanceUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutClassInput | AttendanceUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type EventUpdateManyWithoutClassNestedInput = {
    create?: XOR<EventCreateWithoutClassInput, EventUncheckedCreateWithoutClassInput> | EventCreateWithoutClassInput[] | EventUncheckedCreateWithoutClassInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClassInput | EventCreateOrConnectWithoutClassInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutClassInput | EventUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: EventCreateManyClassInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutClassInput | EventUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: EventUpdateManyWithWhereWithoutClassInput | EventUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type ExamUpdateManyWithoutClassNestedInput = {
    create?: XOR<ExamCreateWithoutClassInput, ExamUncheckedCreateWithoutClassInput> | ExamCreateWithoutClassInput[] | ExamUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ExamCreateOrConnectWithoutClassInput | ExamCreateOrConnectWithoutClassInput[]
    upsert?: ExamUpsertWithWhereUniqueWithoutClassInput | ExamUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ExamCreateManyClassInputEnvelope
    set?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    disconnect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    delete?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    connect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    update?: ExamUpdateWithWhereUniqueWithoutClassInput | ExamUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ExamUpdateManyWithWhereWithoutClassInput | ExamUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ExamScalarWhereInput | ExamScalarWhereInput[]
  }

  export type HomeworkUpdateManyWithoutClassNestedInput = {
    create?: XOR<HomeworkCreateWithoutClassInput, HomeworkUncheckedCreateWithoutClassInput> | HomeworkCreateWithoutClassInput[] | HomeworkUncheckedCreateWithoutClassInput[]
    connectOrCreate?: HomeworkCreateOrConnectWithoutClassInput | HomeworkCreateOrConnectWithoutClassInput[]
    upsert?: HomeworkUpsertWithWhereUniqueWithoutClassInput | HomeworkUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: HomeworkCreateManyClassInputEnvelope
    set?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    disconnect?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    delete?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    connect?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    update?: HomeworkUpdateWithWhereUniqueWithoutClassInput | HomeworkUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: HomeworkUpdateManyWithWhereWithoutClassInput | HomeworkUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: HomeworkScalarWhereInput | HomeworkScalarWhereInput[]
  }

  export type LessonUpdateManyWithoutClassNestedInput = {
    create?: XOR<LessonCreateWithoutClassInput, LessonUncheckedCreateWithoutClassInput> | LessonCreateWithoutClassInput[] | LessonUncheckedCreateWithoutClassInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutClassInput | LessonCreateOrConnectWithoutClassInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutClassInput | LessonUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: LessonCreateManyClassInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutClassInput | LessonUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutClassInput | LessonUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type StudentUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutClassInput | StudentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutClassInput | StudentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutClassInput | StudentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type GradeUpdateOneRequiredWithoutClassesNestedInput = {
    create?: XOR<GradeCreateWithoutClassesInput, GradeUncheckedCreateWithoutClassesInput>
    connectOrCreate?: GradeCreateOrConnectWithoutClassesInput
    upsert?: GradeUpsertWithoutClassesInput
    connect?: GradeWhereUniqueInput
    update?: XOR<XOR<GradeUpdateToOneWithWhereWithoutClassesInput, GradeUpdateWithoutClassesInput>, GradeUncheckedUpdateWithoutClassesInput>
  }

  export type TeacherUpdateOneWithoutClassNestedInput = {
    create?: XOR<TeacherCreateWithoutClassInput, TeacherUncheckedCreateWithoutClassInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutClassInput
    upsert?: TeacherUpsertWithoutClassInput
    disconnect?: TeacherWhereInput | boolean
    delete?: TeacherWhereInput | boolean
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutClassInput, TeacherUpdateWithoutClassInput>, TeacherUncheckedUpdateWithoutClassInput>
  }

  export type AnnouncementUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<AnnouncementCreateWithoutClassInput, AnnouncementUncheckedCreateWithoutClassInput> | AnnouncementCreateWithoutClassInput[] | AnnouncementUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutClassInput | AnnouncementCreateOrConnectWithoutClassInput[]
    upsert?: AnnouncementUpsertWithWhereUniqueWithoutClassInput | AnnouncementUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AnnouncementCreateManyClassInputEnvelope
    set?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    disconnect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    delete?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    update?: AnnouncementUpdateWithWhereUniqueWithoutClassInput | AnnouncementUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AnnouncementUpdateManyWithWhereWithoutClassInput | AnnouncementUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AnnouncementScalarWhereInput | AnnouncementScalarWhereInput[]
  }

  export type AttendanceUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<AttendanceCreateWithoutClassInput, AttendanceUncheckedCreateWithoutClassInput> | AttendanceCreateWithoutClassInput[] | AttendanceUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutClassInput | AttendanceCreateOrConnectWithoutClassInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutClassInput | AttendanceUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AttendanceCreateManyClassInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutClassInput | AttendanceUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutClassInput | AttendanceUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<EventCreateWithoutClassInput, EventUncheckedCreateWithoutClassInput> | EventCreateWithoutClassInput[] | EventUncheckedCreateWithoutClassInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClassInput | EventCreateOrConnectWithoutClassInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutClassInput | EventUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: EventCreateManyClassInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutClassInput | EventUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: EventUpdateManyWithWhereWithoutClassInput | EventUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type ExamUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<ExamCreateWithoutClassInput, ExamUncheckedCreateWithoutClassInput> | ExamCreateWithoutClassInput[] | ExamUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ExamCreateOrConnectWithoutClassInput | ExamCreateOrConnectWithoutClassInput[]
    upsert?: ExamUpsertWithWhereUniqueWithoutClassInput | ExamUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ExamCreateManyClassInputEnvelope
    set?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    disconnect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    delete?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    connect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    update?: ExamUpdateWithWhereUniqueWithoutClassInput | ExamUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ExamUpdateManyWithWhereWithoutClassInput | ExamUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ExamScalarWhereInput | ExamScalarWhereInput[]
  }

  export type HomeworkUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<HomeworkCreateWithoutClassInput, HomeworkUncheckedCreateWithoutClassInput> | HomeworkCreateWithoutClassInput[] | HomeworkUncheckedCreateWithoutClassInput[]
    connectOrCreate?: HomeworkCreateOrConnectWithoutClassInput | HomeworkCreateOrConnectWithoutClassInput[]
    upsert?: HomeworkUpsertWithWhereUniqueWithoutClassInput | HomeworkUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: HomeworkCreateManyClassInputEnvelope
    set?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    disconnect?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    delete?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    connect?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    update?: HomeworkUpdateWithWhereUniqueWithoutClassInput | HomeworkUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: HomeworkUpdateManyWithWhereWithoutClassInput | HomeworkUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: HomeworkScalarWhereInput | HomeworkScalarWhereInput[]
  }

  export type LessonUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<LessonCreateWithoutClassInput, LessonUncheckedCreateWithoutClassInput> | LessonCreateWithoutClassInput[] | LessonUncheckedCreateWithoutClassInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutClassInput | LessonCreateOrConnectWithoutClassInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutClassInput | LessonUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: LessonCreateManyClassInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutClassInput | LessonUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutClassInput | LessonUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutClassInput | StudentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutClassInput | StudentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutClassInput | StudentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type ClassCreateNestedOneWithoutLessonsInput = {
    create?: XOR<ClassCreateWithoutLessonsInput, ClassUncheckedCreateWithoutLessonsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutLessonsInput
    connect?: ClassWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutLessonsInput = {
    create?: XOR<SubjectCreateWithoutLessonsInput, SubjectUncheckedCreateWithoutLessonsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutLessonsInput
    connect?: SubjectWhereUniqueInput
  }

  export type TeacherCreateNestedOneWithoutLessonsInput = {
    create?: XOR<TeacherCreateWithoutLessonsInput, TeacherUncheckedCreateWithoutLessonsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutLessonsInput
    connect?: TeacherWhereUniqueInput
  }

  export type EnumLessonDayFieldUpdateOperationsInput = {
    set?: $Enums.LessonDay
  }

  export type ClassUpdateOneRequiredWithoutLessonsNestedInput = {
    create?: XOR<ClassCreateWithoutLessonsInput, ClassUncheckedCreateWithoutLessonsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutLessonsInput
    upsert?: ClassUpsertWithoutLessonsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutLessonsInput, ClassUpdateWithoutLessonsInput>, ClassUncheckedUpdateWithoutLessonsInput>
  }

  export type SubjectUpdateOneRequiredWithoutLessonsNestedInput = {
    create?: XOR<SubjectCreateWithoutLessonsInput, SubjectUncheckedCreateWithoutLessonsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutLessonsInput
    upsert?: SubjectUpsertWithoutLessonsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutLessonsInput, SubjectUpdateWithoutLessonsInput>, SubjectUncheckedUpdateWithoutLessonsInput>
  }

  export type TeacherUpdateOneRequiredWithoutLessonsNestedInput = {
    create?: XOR<TeacherCreateWithoutLessonsInput, TeacherUncheckedCreateWithoutLessonsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutLessonsInput
    upsert?: TeacherUpsertWithoutLessonsInput
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutLessonsInput, TeacherUpdateWithoutLessonsInput>, TeacherUncheckedUpdateWithoutLessonsInput>
  }

  export type ClassCreateNestedOneWithoutAnnouncementInput = {
    create?: XOR<ClassCreateWithoutAnnouncementInput, ClassUncheckedCreateWithoutAnnouncementInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAnnouncementInput
    connect?: ClassWhereUniqueInput
  }

  export type ClassUpdateOneWithoutAnnouncementNestedInput = {
    create?: XOR<ClassCreateWithoutAnnouncementInput, ClassUncheckedCreateWithoutAnnouncementInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAnnouncementInput
    upsert?: ClassUpsertWithoutAnnouncementInput
    disconnect?: ClassWhereInput | boolean
    delete?: ClassWhereInput | boolean
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutAnnouncementInput, ClassUpdateWithoutAnnouncementInput>, ClassUncheckedUpdateWithoutAnnouncementInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClassCreateNestedOneWithoutAttendanceInput = {
    create?: XOR<ClassCreateWithoutAttendanceInput, ClassUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAttendanceInput
    connect?: ClassWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutAttendanceInput = {
    create?: XOR<StudentCreateWithoutAttendanceInput, StudentUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAttendanceInput
    connect?: StudentWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ClassUpdateOneRequiredWithoutAttendanceNestedInput = {
    create?: XOR<ClassCreateWithoutAttendanceInput, ClassUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAttendanceInput
    upsert?: ClassUpsertWithoutAttendanceInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutAttendanceInput, ClassUpdateWithoutAttendanceInput>, ClassUncheckedUpdateWithoutAttendanceInput>
  }

  export type StudentUpdateOneRequiredWithoutAttendanceNestedInput = {
    create?: XOR<StudentCreateWithoutAttendanceInput, StudentUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAttendanceInput
    upsert?: StudentUpsertWithoutAttendanceInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutAttendanceInput, StudentUpdateWithoutAttendanceInput>, StudentUncheckedUpdateWithoutAttendanceInput>
  }

  export type ClassCreateNestedOneWithoutEventsInput = {
    create?: XOR<ClassCreateWithoutEventsInput, ClassUncheckedCreateWithoutEventsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutEventsInput
    connect?: ClassWhereUniqueInput
  }

  export type ClassUpdateOneWithoutEventsNestedInput = {
    create?: XOR<ClassCreateWithoutEventsInput, ClassUncheckedCreateWithoutEventsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutEventsInput
    upsert?: ClassUpsertWithoutEventsInput
    disconnect?: ClassWhereInput | boolean
    delete?: ClassWhereInput | boolean
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutEventsInput, ClassUpdateWithoutEventsInput>, ClassUncheckedUpdateWithoutEventsInput>
  }

  export type ClassCreateNestedOneWithoutExamsInput = {
    create?: XOR<ClassCreateWithoutExamsInput, ClassUncheckedCreateWithoutExamsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutExamsInput
    connect?: ClassWhereUniqueInput
  }

  export type ExamSubjectCreateNestedManyWithoutExamInput = {
    create?: XOR<ExamSubjectCreateWithoutExamInput, ExamSubjectUncheckedCreateWithoutExamInput> | ExamSubjectCreateWithoutExamInput[] | ExamSubjectUncheckedCreateWithoutExamInput[]
    connectOrCreate?: ExamSubjectCreateOrConnectWithoutExamInput | ExamSubjectCreateOrConnectWithoutExamInput[]
    createMany?: ExamSubjectCreateManyExamInputEnvelope
    connect?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
  }

  export type ResultCreateNestedManyWithoutExamInput = {
    create?: XOR<ResultCreateWithoutExamInput, ResultUncheckedCreateWithoutExamInput> | ResultCreateWithoutExamInput[] | ResultUncheckedCreateWithoutExamInput[]
    connectOrCreate?: ResultCreateOrConnectWithoutExamInput | ResultCreateOrConnectWithoutExamInput[]
    createMany?: ResultCreateManyExamInputEnvelope
    connect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
  }

  export type ExamSubjectUncheckedCreateNestedManyWithoutExamInput = {
    create?: XOR<ExamSubjectCreateWithoutExamInput, ExamSubjectUncheckedCreateWithoutExamInput> | ExamSubjectCreateWithoutExamInput[] | ExamSubjectUncheckedCreateWithoutExamInput[]
    connectOrCreate?: ExamSubjectCreateOrConnectWithoutExamInput | ExamSubjectCreateOrConnectWithoutExamInput[]
    createMany?: ExamSubjectCreateManyExamInputEnvelope
    connect?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
  }

  export type ResultUncheckedCreateNestedManyWithoutExamInput = {
    create?: XOR<ResultCreateWithoutExamInput, ResultUncheckedCreateWithoutExamInput> | ResultCreateWithoutExamInput[] | ResultUncheckedCreateWithoutExamInput[]
    connectOrCreate?: ResultCreateOrConnectWithoutExamInput | ResultCreateOrConnectWithoutExamInput[]
    createMany?: ResultCreateManyExamInputEnvelope
    connect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
  }

  export type ClassUpdateOneRequiredWithoutExamsNestedInput = {
    create?: XOR<ClassCreateWithoutExamsInput, ClassUncheckedCreateWithoutExamsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutExamsInput
    upsert?: ClassUpsertWithoutExamsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutExamsInput, ClassUpdateWithoutExamsInput>, ClassUncheckedUpdateWithoutExamsInput>
  }

  export type ExamSubjectUpdateManyWithoutExamNestedInput = {
    create?: XOR<ExamSubjectCreateWithoutExamInput, ExamSubjectUncheckedCreateWithoutExamInput> | ExamSubjectCreateWithoutExamInput[] | ExamSubjectUncheckedCreateWithoutExamInput[]
    connectOrCreate?: ExamSubjectCreateOrConnectWithoutExamInput | ExamSubjectCreateOrConnectWithoutExamInput[]
    upsert?: ExamSubjectUpsertWithWhereUniqueWithoutExamInput | ExamSubjectUpsertWithWhereUniqueWithoutExamInput[]
    createMany?: ExamSubjectCreateManyExamInputEnvelope
    set?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
    disconnect?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
    delete?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
    connect?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
    update?: ExamSubjectUpdateWithWhereUniqueWithoutExamInput | ExamSubjectUpdateWithWhereUniqueWithoutExamInput[]
    updateMany?: ExamSubjectUpdateManyWithWhereWithoutExamInput | ExamSubjectUpdateManyWithWhereWithoutExamInput[]
    deleteMany?: ExamSubjectScalarWhereInput | ExamSubjectScalarWhereInput[]
  }

  export type ResultUpdateManyWithoutExamNestedInput = {
    create?: XOR<ResultCreateWithoutExamInput, ResultUncheckedCreateWithoutExamInput> | ResultCreateWithoutExamInput[] | ResultUncheckedCreateWithoutExamInput[]
    connectOrCreate?: ResultCreateOrConnectWithoutExamInput | ResultCreateOrConnectWithoutExamInput[]
    upsert?: ResultUpsertWithWhereUniqueWithoutExamInput | ResultUpsertWithWhereUniqueWithoutExamInput[]
    createMany?: ResultCreateManyExamInputEnvelope
    set?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    disconnect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    delete?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    connect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    update?: ResultUpdateWithWhereUniqueWithoutExamInput | ResultUpdateWithWhereUniqueWithoutExamInput[]
    updateMany?: ResultUpdateManyWithWhereWithoutExamInput | ResultUpdateManyWithWhereWithoutExamInput[]
    deleteMany?: ResultScalarWhereInput | ResultScalarWhereInput[]
  }

  export type ExamSubjectUncheckedUpdateManyWithoutExamNestedInput = {
    create?: XOR<ExamSubjectCreateWithoutExamInput, ExamSubjectUncheckedCreateWithoutExamInput> | ExamSubjectCreateWithoutExamInput[] | ExamSubjectUncheckedCreateWithoutExamInput[]
    connectOrCreate?: ExamSubjectCreateOrConnectWithoutExamInput | ExamSubjectCreateOrConnectWithoutExamInput[]
    upsert?: ExamSubjectUpsertWithWhereUniqueWithoutExamInput | ExamSubjectUpsertWithWhereUniqueWithoutExamInput[]
    createMany?: ExamSubjectCreateManyExamInputEnvelope
    set?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
    disconnect?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
    delete?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
    connect?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
    update?: ExamSubjectUpdateWithWhereUniqueWithoutExamInput | ExamSubjectUpdateWithWhereUniqueWithoutExamInput[]
    updateMany?: ExamSubjectUpdateManyWithWhereWithoutExamInput | ExamSubjectUpdateManyWithWhereWithoutExamInput[]
    deleteMany?: ExamSubjectScalarWhereInput | ExamSubjectScalarWhereInput[]
  }

  export type ResultUncheckedUpdateManyWithoutExamNestedInput = {
    create?: XOR<ResultCreateWithoutExamInput, ResultUncheckedCreateWithoutExamInput> | ResultCreateWithoutExamInput[] | ResultUncheckedCreateWithoutExamInput[]
    connectOrCreate?: ResultCreateOrConnectWithoutExamInput | ResultCreateOrConnectWithoutExamInput[]
    upsert?: ResultUpsertWithWhereUniqueWithoutExamInput | ResultUpsertWithWhereUniqueWithoutExamInput[]
    createMany?: ResultCreateManyExamInputEnvelope
    set?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    disconnect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    delete?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    connect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    update?: ResultUpdateWithWhereUniqueWithoutExamInput | ResultUpdateWithWhereUniqueWithoutExamInput[]
    updateMany?: ResultUpdateManyWithWhereWithoutExamInput | ResultUpdateManyWithWhereWithoutExamInput[]
    deleteMany?: ResultScalarWhereInput | ResultScalarWhereInput[]
  }

  export type ExamCreateNestedOneWithoutSubjectsInput = {
    create?: XOR<ExamCreateWithoutSubjectsInput, ExamUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: ExamCreateOrConnectWithoutSubjectsInput
    connect?: ExamWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutExamsInput = {
    create?: XOR<SubjectCreateWithoutExamsInput, SubjectUncheckedCreateWithoutExamsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutExamsInput
    connect?: SubjectWhereUniqueInput
  }

  export type ExamUpdateOneRequiredWithoutSubjectsNestedInput = {
    create?: XOR<ExamCreateWithoutSubjectsInput, ExamUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: ExamCreateOrConnectWithoutSubjectsInput
    upsert?: ExamUpsertWithoutSubjectsInput
    connect?: ExamWhereUniqueInput
    update?: XOR<XOR<ExamUpdateToOneWithWhereWithoutSubjectsInput, ExamUpdateWithoutSubjectsInput>, ExamUncheckedUpdateWithoutSubjectsInput>
  }

  export type SubjectUpdateOneRequiredWithoutExamsNestedInput = {
    create?: XOR<SubjectCreateWithoutExamsInput, SubjectUncheckedCreateWithoutExamsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutExamsInput
    upsert?: SubjectUpsertWithoutExamsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutExamsInput, SubjectUpdateWithoutExamsInput>, SubjectUncheckedUpdateWithoutExamsInput>
  }

  export type ClassCreateNestedOneWithoutHomeworksInput = {
    create?: XOR<ClassCreateWithoutHomeworksInput, ClassUncheckedCreateWithoutHomeworksInput>
    connectOrCreate?: ClassCreateOrConnectWithoutHomeworksInput
    connect?: ClassWhereUniqueInput
  }

  export type GradeCreateNestedOneWithoutHomeworkInput = {
    create?: XOR<GradeCreateWithoutHomeworkInput, GradeUncheckedCreateWithoutHomeworkInput>
    connectOrCreate?: GradeCreateOrConnectWithoutHomeworkInput
    connect?: GradeWhereUniqueInput
  }

  export type ClassUpdateOneRequiredWithoutHomeworksNestedInput = {
    create?: XOR<ClassCreateWithoutHomeworksInput, ClassUncheckedCreateWithoutHomeworksInput>
    connectOrCreate?: ClassCreateOrConnectWithoutHomeworksInput
    upsert?: ClassUpsertWithoutHomeworksInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutHomeworksInput, ClassUpdateWithoutHomeworksInput>, ClassUncheckedUpdateWithoutHomeworksInput>
  }

  export type GradeUpdateOneRequiredWithoutHomeworkNestedInput = {
    create?: XOR<GradeCreateWithoutHomeworkInput, GradeUncheckedCreateWithoutHomeworkInput>
    connectOrCreate?: GradeCreateOrConnectWithoutHomeworkInput
    upsert?: GradeUpsertWithoutHomeworkInput
    connect?: GradeWhereUniqueInput
    update?: XOR<XOR<GradeUpdateToOneWithWhereWithoutHomeworkInput, GradeUpdateWithoutHomeworkInput>, GradeUncheckedUpdateWithoutHomeworkInput>
  }

  export type ExamCreateNestedOneWithoutResultsInput = {
    create?: XOR<ExamCreateWithoutResultsInput, ExamUncheckedCreateWithoutResultsInput>
    connectOrCreate?: ExamCreateOrConnectWithoutResultsInput
    connect?: ExamWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutResultsInput = {
    create?: XOR<StudentCreateWithoutResultsInput, StudentUncheckedCreateWithoutResultsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutResultsInput
    connect?: StudentWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutResultsInput = {
    create?: XOR<SubjectCreateWithoutResultsInput, SubjectUncheckedCreateWithoutResultsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutResultsInput
    connect?: SubjectWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ExamUpdateOneRequiredWithoutResultsNestedInput = {
    create?: XOR<ExamCreateWithoutResultsInput, ExamUncheckedCreateWithoutResultsInput>
    connectOrCreate?: ExamCreateOrConnectWithoutResultsInput
    upsert?: ExamUpsertWithoutResultsInput
    connect?: ExamWhereUniqueInput
    update?: XOR<XOR<ExamUpdateToOneWithWhereWithoutResultsInput, ExamUpdateWithoutResultsInput>, ExamUncheckedUpdateWithoutResultsInput>
  }

  export type StudentUpdateOneRequiredWithoutResultsNestedInput = {
    create?: XOR<StudentCreateWithoutResultsInput, StudentUncheckedCreateWithoutResultsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutResultsInput
    upsert?: StudentUpsertWithoutResultsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutResultsInput, StudentUpdateWithoutResultsInput>, StudentUncheckedUpdateWithoutResultsInput>
  }

  export type SubjectUpdateOneRequiredWithoutResultsNestedInput = {
    create?: XOR<SubjectCreateWithoutResultsInput, SubjectUncheckedCreateWithoutResultsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutResultsInput
    upsert?: SubjectUpsertWithoutResultsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutResultsInput, SubjectUpdateWithoutResultsInput>, SubjectUncheckedUpdateWithoutResultsInput>
  }

  export type AttendanceCreateNestedManyWithoutStudentInput = {
    create?: XOR<AttendanceCreateWithoutStudentInput, AttendanceUncheckedCreateWithoutStudentInput> | AttendanceCreateWithoutStudentInput[] | AttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutStudentInput | AttendanceCreateOrConnectWithoutStudentInput[]
    createMany?: AttendanceCreateManyStudentInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type ClerkStudentsCreateNestedOneWithoutStudentInput = {
    create?: XOR<ClerkStudentsCreateWithoutStudentInput, ClerkStudentsUncheckedCreateWithoutStudentInput>
    connectOrCreate?: ClerkStudentsCreateOrConnectWithoutStudentInput
    connect?: ClerkStudentsWhereUniqueInput
  }

  export type FeeTransactionCreateNestedManyWithoutStudentInput = {
    create?: XOR<FeeTransactionCreateWithoutStudentInput, FeeTransactionUncheckedCreateWithoutStudentInput> | FeeTransactionCreateWithoutStudentInput[] | FeeTransactionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FeeTransactionCreateOrConnectWithoutStudentInput | FeeTransactionCreateOrConnectWithoutStudentInput[]
    createMany?: FeeTransactionCreateManyStudentInputEnvelope
    connect?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
  }

  export type ResultCreateNestedManyWithoutStudentInput = {
    create?: XOR<ResultCreateWithoutStudentInput, ResultUncheckedCreateWithoutStudentInput> | ResultCreateWithoutStudentInput[] | ResultUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ResultCreateOrConnectWithoutStudentInput | ResultCreateOrConnectWithoutStudentInput[]
    createMany?: ResultCreateManyStudentInputEnvelope
    connect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
  }

  export type ClassCreateNestedOneWithoutStudentsInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput
    connect?: ClassWhereUniqueInput
  }

  export type StudentFeesCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentFeesCreateWithoutStudentInput, StudentFeesUncheckedCreateWithoutStudentInput> | StudentFeesCreateWithoutStudentInput[] | StudentFeesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentFeesCreateOrConnectWithoutStudentInput | StudentFeesCreateOrConnectWithoutStudentInput[]
    createMany?: StudentFeesCreateManyStudentInputEnvelope
    connect?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
  }

  export type StudentTotalFeesCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentTotalFeesCreateWithoutStudentInput, StudentTotalFeesUncheckedCreateWithoutStudentInput> | StudentTotalFeesCreateWithoutStudentInput[] | StudentTotalFeesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentTotalFeesCreateOrConnectWithoutStudentInput | StudentTotalFeesCreateOrConnectWithoutStudentInput[]
    createMany?: StudentTotalFeesCreateManyStudentInputEnvelope
    connect?: StudentTotalFeesWhereUniqueInput | StudentTotalFeesWhereUniqueInput[]
  }

  export type AttendanceUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<AttendanceCreateWithoutStudentInput, AttendanceUncheckedCreateWithoutStudentInput> | AttendanceCreateWithoutStudentInput[] | AttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutStudentInput | AttendanceCreateOrConnectWithoutStudentInput[]
    createMany?: AttendanceCreateManyStudentInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type ClerkStudentsUncheckedCreateNestedOneWithoutStudentInput = {
    create?: XOR<ClerkStudentsCreateWithoutStudentInput, ClerkStudentsUncheckedCreateWithoutStudentInput>
    connectOrCreate?: ClerkStudentsCreateOrConnectWithoutStudentInput
    connect?: ClerkStudentsWhereUniqueInput
  }

  export type FeeTransactionUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<FeeTransactionCreateWithoutStudentInput, FeeTransactionUncheckedCreateWithoutStudentInput> | FeeTransactionCreateWithoutStudentInput[] | FeeTransactionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FeeTransactionCreateOrConnectWithoutStudentInput | FeeTransactionCreateOrConnectWithoutStudentInput[]
    createMany?: FeeTransactionCreateManyStudentInputEnvelope
    connect?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
  }

  export type ResultUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<ResultCreateWithoutStudentInput, ResultUncheckedCreateWithoutStudentInput> | ResultCreateWithoutStudentInput[] | ResultUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ResultCreateOrConnectWithoutStudentInput | ResultCreateOrConnectWithoutStudentInput[]
    createMany?: ResultCreateManyStudentInputEnvelope
    connect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
  }

  export type StudentFeesUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentFeesCreateWithoutStudentInput, StudentFeesUncheckedCreateWithoutStudentInput> | StudentFeesCreateWithoutStudentInput[] | StudentFeesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentFeesCreateOrConnectWithoutStudentInput | StudentFeesCreateOrConnectWithoutStudentInput[]
    createMany?: StudentFeesCreateManyStudentInputEnvelope
    connect?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
  }

  export type StudentTotalFeesUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentTotalFeesCreateWithoutStudentInput, StudentTotalFeesUncheckedCreateWithoutStudentInput> | StudentTotalFeesCreateWithoutStudentInput[] | StudentTotalFeesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentTotalFeesCreateOrConnectWithoutStudentInput | StudentTotalFeesCreateOrConnectWithoutStudentInput[]
    createMany?: StudentTotalFeesCreateManyStudentInputEnvelope
    connect?: StudentTotalFeesWhereUniqueInput | StudentTotalFeesWhereUniqueInput[]
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender
  }

  export type EnumAcademicYearFieldUpdateOperationsInput = {
    set?: $Enums.AcademicYear
  }

  export type AttendanceUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AttendanceCreateWithoutStudentInput, AttendanceUncheckedCreateWithoutStudentInput> | AttendanceCreateWithoutStudentInput[] | AttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutStudentInput | AttendanceCreateOrConnectWithoutStudentInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutStudentInput | AttendanceUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AttendanceCreateManyStudentInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutStudentInput | AttendanceUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutStudentInput | AttendanceUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type ClerkStudentsUpdateOneWithoutStudentNestedInput = {
    create?: XOR<ClerkStudentsCreateWithoutStudentInput, ClerkStudentsUncheckedCreateWithoutStudentInput>
    connectOrCreate?: ClerkStudentsCreateOrConnectWithoutStudentInput
    upsert?: ClerkStudentsUpsertWithoutStudentInput
    disconnect?: ClerkStudentsWhereInput | boolean
    delete?: ClerkStudentsWhereInput | boolean
    connect?: ClerkStudentsWhereUniqueInput
    update?: XOR<XOR<ClerkStudentsUpdateToOneWithWhereWithoutStudentInput, ClerkStudentsUpdateWithoutStudentInput>, ClerkStudentsUncheckedUpdateWithoutStudentInput>
  }

  export type FeeTransactionUpdateManyWithoutStudentNestedInput = {
    create?: XOR<FeeTransactionCreateWithoutStudentInput, FeeTransactionUncheckedCreateWithoutStudentInput> | FeeTransactionCreateWithoutStudentInput[] | FeeTransactionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FeeTransactionCreateOrConnectWithoutStudentInput | FeeTransactionCreateOrConnectWithoutStudentInput[]
    upsert?: FeeTransactionUpsertWithWhereUniqueWithoutStudentInput | FeeTransactionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: FeeTransactionCreateManyStudentInputEnvelope
    set?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
    disconnect?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
    delete?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
    connect?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
    update?: FeeTransactionUpdateWithWhereUniqueWithoutStudentInput | FeeTransactionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: FeeTransactionUpdateManyWithWhereWithoutStudentInput | FeeTransactionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: FeeTransactionScalarWhereInput | FeeTransactionScalarWhereInput[]
  }

  export type ResultUpdateManyWithoutStudentNestedInput = {
    create?: XOR<ResultCreateWithoutStudentInput, ResultUncheckedCreateWithoutStudentInput> | ResultCreateWithoutStudentInput[] | ResultUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ResultCreateOrConnectWithoutStudentInput | ResultCreateOrConnectWithoutStudentInput[]
    upsert?: ResultUpsertWithWhereUniqueWithoutStudentInput | ResultUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: ResultCreateManyStudentInputEnvelope
    set?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    disconnect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    delete?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    connect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    update?: ResultUpdateWithWhereUniqueWithoutStudentInput | ResultUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: ResultUpdateManyWithWhereWithoutStudentInput | ResultUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: ResultScalarWhereInput | ResultScalarWhereInput[]
  }

  export type ClassUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput
    upsert?: ClassUpsertWithoutStudentsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutStudentsInput, ClassUpdateWithoutStudentsInput>, ClassUncheckedUpdateWithoutStudentsInput>
  }

  export type StudentFeesUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentFeesCreateWithoutStudentInput, StudentFeesUncheckedCreateWithoutStudentInput> | StudentFeesCreateWithoutStudentInput[] | StudentFeesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentFeesCreateOrConnectWithoutStudentInput | StudentFeesCreateOrConnectWithoutStudentInput[]
    upsert?: StudentFeesUpsertWithWhereUniqueWithoutStudentInput | StudentFeesUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentFeesCreateManyStudentInputEnvelope
    set?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    disconnect?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    delete?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    connect?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    update?: StudentFeesUpdateWithWhereUniqueWithoutStudentInput | StudentFeesUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentFeesUpdateManyWithWhereWithoutStudentInput | StudentFeesUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentFeesScalarWhereInput | StudentFeesScalarWhereInput[]
  }

  export type StudentTotalFeesUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentTotalFeesCreateWithoutStudentInput, StudentTotalFeesUncheckedCreateWithoutStudentInput> | StudentTotalFeesCreateWithoutStudentInput[] | StudentTotalFeesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentTotalFeesCreateOrConnectWithoutStudentInput | StudentTotalFeesCreateOrConnectWithoutStudentInput[]
    upsert?: StudentTotalFeesUpsertWithWhereUniqueWithoutStudentInput | StudentTotalFeesUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentTotalFeesCreateManyStudentInputEnvelope
    set?: StudentTotalFeesWhereUniqueInput | StudentTotalFeesWhereUniqueInput[]
    disconnect?: StudentTotalFeesWhereUniqueInput | StudentTotalFeesWhereUniqueInput[]
    delete?: StudentTotalFeesWhereUniqueInput | StudentTotalFeesWhereUniqueInput[]
    connect?: StudentTotalFeesWhereUniqueInput | StudentTotalFeesWhereUniqueInput[]
    update?: StudentTotalFeesUpdateWithWhereUniqueWithoutStudentInput | StudentTotalFeesUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentTotalFeesUpdateManyWithWhereWithoutStudentInput | StudentTotalFeesUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentTotalFeesScalarWhereInput | StudentTotalFeesScalarWhereInput[]
  }

  export type AttendanceUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AttendanceCreateWithoutStudentInput, AttendanceUncheckedCreateWithoutStudentInput> | AttendanceCreateWithoutStudentInput[] | AttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutStudentInput | AttendanceCreateOrConnectWithoutStudentInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutStudentInput | AttendanceUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AttendanceCreateManyStudentInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutStudentInput | AttendanceUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutStudentInput | AttendanceUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type ClerkStudentsUncheckedUpdateOneWithoutStudentNestedInput = {
    create?: XOR<ClerkStudentsCreateWithoutStudentInput, ClerkStudentsUncheckedCreateWithoutStudentInput>
    connectOrCreate?: ClerkStudentsCreateOrConnectWithoutStudentInput
    upsert?: ClerkStudentsUpsertWithoutStudentInput
    disconnect?: ClerkStudentsWhereInput | boolean
    delete?: ClerkStudentsWhereInput | boolean
    connect?: ClerkStudentsWhereUniqueInput
    update?: XOR<XOR<ClerkStudentsUpdateToOneWithWhereWithoutStudentInput, ClerkStudentsUpdateWithoutStudentInput>, ClerkStudentsUncheckedUpdateWithoutStudentInput>
  }

  export type FeeTransactionUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<FeeTransactionCreateWithoutStudentInput, FeeTransactionUncheckedCreateWithoutStudentInput> | FeeTransactionCreateWithoutStudentInput[] | FeeTransactionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FeeTransactionCreateOrConnectWithoutStudentInput | FeeTransactionCreateOrConnectWithoutStudentInput[]
    upsert?: FeeTransactionUpsertWithWhereUniqueWithoutStudentInput | FeeTransactionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: FeeTransactionCreateManyStudentInputEnvelope
    set?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
    disconnect?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
    delete?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
    connect?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
    update?: FeeTransactionUpdateWithWhereUniqueWithoutStudentInput | FeeTransactionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: FeeTransactionUpdateManyWithWhereWithoutStudentInput | FeeTransactionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: FeeTransactionScalarWhereInput | FeeTransactionScalarWhereInput[]
  }

  export type ResultUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<ResultCreateWithoutStudentInput, ResultUncheckedCreateWithoutStudentInput> | ResultCreateWithoutStudentInput[] | ResultUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ResultCreateOrConnectWithoutStudentInput | ResultCreateOrConnectWithoutStudentInput[]
    upsert?: ResultUpsertWithWhereUniqueWithoutStudentInput | ResultUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: ResultCreateManyStudentInputEnvelope
    set?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    disconnect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    delete?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    connect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    update?: ResultUpdateWithWhereUniqueWithoutStudentInput | ResultUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: ResultUpdateManyWithWhereWithoutStudentInput | ResultUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: ResultScalarWhereInput | ResultScalarWhereInput[]
  }

  export type StudentFeesUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentFeesCreateWithoutStudentInput, StudentFeesUncheckedCreateWithoutStudentInput> | StudentFeesCreateWithoutStudentInput[] | StudentFeesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentFeesCreateOrConnectWithoutStudentInput | StudentFeesCreateOrConnectWithoutStudentInput[]
    upsert?: StudentFeesUpsertWithWhereUniqueWithoutStudentInput | StudentFeesUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentFeesCreateManyStudentInputEnvelope
    set?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    disconnect?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    delete?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    connect?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    update?: StudentFeesUpdateWithWhereUniqueWithoutStudentInput | StudentFeesUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentFeesUpdateManyWithWhereWithoutStudentInput | StudentFeesUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentFeesScalarWhereInput | StudentFeesScalarWhereInput[]
  }

  export type StudentTotalFeesUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentTotalFeesCreateWithoutStudentInput, StudentTotalFeesUncheckedCreateWithoutStudentInput> | StudentTotalFeesCreateWithoutStudentInput[] | StudentTotalFeesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentTotalFeesCreateOrConnectWithoutStudentInput | StudentTotalFeesCreateOrConnectWithoutStudentInput[]
    upsert?: StudentTotalFeesUpsertWithWhereUniqueWithoutStudentInput | StudentTotalFeesUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentTotalFeesCreateManyStudentInputEnvelope
    set?: StudentTotalFeesWhereUniqueInput | StudentTotalFeesWhereUniqueInput[]
    disconnect?: StudentTotalFeesWhereUniqueInput | StudentTotalFeesWhereUniqueInput[]
    delete?: StudentTotalFeesWhereUniqueInput | StudentTotalFeesWhereUniqueInput[]
    connect?: StudentTotalFeesWhereUniqueInput | StudentTotalFeesWhereUniqueInput[]
    update?: StudentTotalFeesUpdateWithWhereUniqueWithoutStudentInput | StudentTotalFeesUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentTotalFeesUpdateManyWithWhereWithoutStudentInput | StudentTotalFeesUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentTotalFeesScalarWhereInput | StudentTotalFeesScalarWhereInput[]
  }

  export type StudentCreateNestedOneWithoutClerkStudentInput = {
    create?: XOR<StudentCreateWithoutClerkStudentInput, StudentUncheckedCreateWithoutClerkStudentInput>
    connectOrCreate?: StudentCreateOrConnectWithoutClerkStudentInput
    connect?: StudentWhereUniqueInput
  }

  export type StudentUpdateOneWithoutClerkStudentNestedInput = {
    create?: XOR<StudentCreateWithoutClerkStudentInput, StudentUncheckedCreateWithoutClerkStudentInput>
    connectOrCreate?: StudentCreateOrConnectWithoutClerkStudentInput
    upsert?: StudentUpsertWithoutClerkStudentInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutClerkStudentInput, StudentUpdateWithoutClerkStudentInput>, StudentUncheckedUpdateWithoutClerkStudentInput>
  }

  export type ExamSubjectCreateNestedManyWithoutSubjectInput = {
    create?: XOR<ExamSubjectCreateWithoutSubjectInput, ExamSubjectUncheckedCreateWithoutSubjectInput> | ExamSubjectCreateWithoutSubjectInput[] | ExamSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ExamSubjectCreateOrConnectWithoutSubjectInput | ExamSubjectCreateOrConnectWithoutSubjectInput[]
    createMany?: ExamSubjectCreateManySubjectInputEnvelope
    connect?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
  }

  export type LessonCreateNestedManyWithoutSubjectInput = {
    create?: XOR<LessonCreateWithoutSubjectInput, LessonUncheckedCreateWithoutSubjectInput> | LessonCreateWithoutSubjectInput[] | LessonUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutSubjectInput | LessonCreateOrConnectWithoutSubjectInput[]
    createMany?: LessonCreateManySubjectInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type ResultCreateNestedManyWithoutSubjectInput = {
    create?: XOR<ResultCreateWithoutSubjectInput, ResultUncheckedCreateWithoutSubjectInput> | ResultCreateWithoutSubjectInput[] | ResultUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ResultCreateOrConnectWithoutSubjectInput | ResultCreateOrConnectWithoutSubjectInput[]
    createMany?: ResultCreateManySubjectInputEnvelope
    connect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
  }

  export type TeacherSubjectCreateNestedManyWithoutSubjectInput = {
    create?: XOR<TeacherSubjectCreateWithoutSubjectInput, TeacherSubjectUncheckedCreateWithoutSubjectInput> | TeacherSubjectCreateWithoutSubjectInput[] | TeacherSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TeacherSubjectCreateOrConnectWithoutSubjectInput | TeacherSubjectCreateOrConnectWithoutSubjectInput[]
    createMany?: TeacherSubjectCreateManySubjectInputEnvelope
    connect?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
  }

  export type ExamSubjectUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<ExamSubjectCreateWithoutSubjectInput, ExamSubjectUncheckedCreateWithoutSubjectInput> | ExamSubjectCreateWithoutSubjectInput[] | ExamSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ExamSubjectCreateOrConnectWithoutSubjectInput | ExamSubjectCreateOrConnectWithoutSubjectInput[]
    createMany?: ExamSubjectCreateManySubjectInputEnvelope
    connect?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
  }

  export type LessonUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<LessonCreateWithoutSubjectInput, LessonUncheckedCreateWithoutSubjectInput> | LessonCreateWithoutSubjectInput[] | LessonUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutSubjectInput | LessonCreateOrConnectWithoutSubjectInput[]
    createMany?: LessonCreateManySubjectInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type ResultUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<ResultCreateWithoutSubjectInput, ResultUncheckedCreateWithoutSubjectInput> | ResultCreateWithoutSubjectInput[] | ResultUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ResultCreateOrConnectWithoutSubjectInput | ResultCreateOrConnectWithoutSubjectInput[]
    createMany?: ResultCreateManySubjectInputEnvelope
    connect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
  }

  export type TeacherSubjectUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<TeacherSubjectCreateWithoutSubjectInput, TeacherSubjectUncheckedCreateWithoutSubjectInput> | TeacherSubjectCreateWithoutSubjectInput[] | TeacherSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TeacherSubjectCreateOrConnectWithoutSubjectInput | TeacherSubjectCreateOrConnectWithoutSubjectInput[]
    createMany?: TeacherSubjectCreateManySubjectInputEnvelope
    connect?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
  }

  export type ExamSubjectUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<ExamSubjectCreateWithoutSubjectInput, ExamSubjectUncheckedCreateWithoutSubjectInput> | ExamSubjectCreateWithoutSubjectInput[] | ExamSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ExamSubjectCreateOrConnectWithoutSubjectInput | ExamSubjectCreateOrConnectWithoutSubjectInput[]
    upsert?: ExamSubjectUpsertWithWhereUniqueWithoutSubjectInput | ExamSubjectUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: ExamSubjectCreateManySubjectInputEnvelope
    set?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
    disconnect?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
    delete?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
    connect?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
    update?: ExamSubjectUpdateWithWhereUniqueWithoutSubjectInput | ExamSubjectUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: ExamSubjectUpdateManyWithWhereWithoutSubjectInput | ExamSubjectUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: ExamSubjectScalarWhereInput | ExamSubjectScalarWhereInput[]
  }

  export type LessonUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<LessonCreateWithoutSubjectInput, LessonUncheckedCreateWithoutSubjectInput> | LessonCreateWithoutSubjectInput[] | LessonUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutSubjectInput | LessonCreateOrConnectWithoutSubjectInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutSubjectInput | LessonUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: LessonCreateManySubjectInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutSubjectInput | LessonUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutSubjectInput | LessonUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type ResultUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<ResultCreateWithoutSubjectInput, ResultUncheckedCreateWithoutSubjectInput> | ResultCreateWithoutSubjectInput[] | ResultUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ResultCreateOrConnectWithoutSubjectInput | ResultCreateOrConnectWithoutSubjectInput[]
    upsert?: ResultUpsertWithWhereUniqueWithoutSubjectInput | ResultUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: ResultCreateManySubjectInputEnvelope
    set?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    disconnect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    delete?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    connect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    update?: ResultUpdateWithWhereUniqueWithoutSubjectInput | ResultUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: ResultUpdateManyWithWhereWithoutSubjectInput | ResultUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: ResultScalarWhereInput | ResultScalarWhereInput[]
  }

  export type TeacherSubjectUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<TeacherSubjectCreateWithoutSubjectInput, TeacherSubjectUncheckedCreateWithoutSubjectInput> | TeacherSubjectCreateWithoutSubjectInput[] | TeacherSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TeacherSubjectCreateOrConnectWithoutSubjectInput | TeacherSubjectCreateOrConnectWithoutSubjectInput[]
    upsert?: TeacherSubjectUpsertWithWhereUniqueWithoutSubjectInput | TeacherSubjectUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: TeacherSubjectCreateManySubjectInputEnvelope
    set?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
    disconnect?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
    delete?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
    connect?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
    update?: TeacherSubjectUpdateWithWhereUniqueWithoutSubjectInput | TeacherSubjectUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: TeacherSubjectUpdateManyWithWhereWithoutSubjectInput | TeacherSubjectUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: TeacherSubjectScalarWhereInput | TeacherSubjectScalarWhereInput[]
  }

  export type ExamSubjectUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<ExamSubjectCreateWithoutSubjectInput, ExamSubjectUncheckedCreateWithoutSubjectInput> | ExamSubjectCreateWithoutSubjectInput[] | ExamSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ExamSubjectCreateOrConnectWithoutSubjectInput | ExamSubjectCreateOrConnectWithoutSubjectInput[]
    upsert?: ExamSubjectUpsertWithWhereUniqueWithoutSubjectInput | ExamSubjectUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: ExamSubjectCreateManySubjectInputEnvelope
    set?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
    disconnect?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
    delete?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
    connect?: ExamSubjectWhereUniqueInput | ExamSubjectWhereUniqueInput[]
    update?: ExamSubjectUpdateWithWhereUniqueWithoutSubjectInput | ExamSubjectUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: ExamSubjectUpdateManyWithWhereWithoutSubjectInput | ExamSubjectUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: ExamSubjectScalarWhereInput | ExamSubjectScalarWhereInput[]
  }

  export type LessonUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<LessonCreateWithoutSubjectInput, LessonUncheckedCreateWithoutSubjectInput> | LessonCreateWithoutSubjectInput[] | LessonUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutSubjectInput | LessonCreateOrConnectWithoutSubjectInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutSubjectInput | LessonUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: LessonCreateManySubjectInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutSubjectInput | LessonUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutSubjectInput | LessonUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type ResultUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<ResultCreateWithoutSubjectInput, ResultUncheckedCreateWithoutSubjectInput> | ResultCreateWithoutSubjectInput[] | ResultUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ResultCreateOrConnectWithoutSubjectInput | ResultCreateOrConnectWithoutSubjectInput[]
    upsert?: ResultUpsertWithWhereUniqueWithoutSubjectInput | ResultUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: ResultCreateManySubjectInputEnvelope
    set?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    disconnect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    delete?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    connect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    update?: ResultUpdateWithWhereUniqueWithoutSubjectInput | ResultUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: ResultUpdateManyWithWhereWithoutSubjectInput | ResultUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: ResultScalarWhereInput | ResultScalarWhereInput[]
  }

  export type TeacherSubjectUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<TeacherSubjectCreateWithoutSubjectInput, TeacherSubjectUncheckedCreateWithoutSubjectInput> | TeacherSubjectCreateWithoutSubjectInput[] | TeacherSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TeacherSubjectCreateOrConnectWithoutSubjectInput | TeacherSubjectCreateOrConnectWithoutSubjectInput[]
    upsert?: TeacherSubjectUpsertWithWhereUniqueWithoutSubjectInput | TeacherSubjectUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: TeacherSubjectCreateManySubjectInputEnvelope
    set?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
    disconnect?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
    delete?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
    connect?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
    update?: TeacherSubjectUpdateWithWhereUniqueWithoutSubjectInput | TeacherSubjectUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: TeacherSubjectUpdateManyWithWhereWithoutSubjectInput | TeacherSubjectUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: TeacherSubjectScalarWhereInput | TeacherSubjectScalarWhereInput[]
  }

  export type ClerkTeachersCreateNestedOneWithoutTeacherInput = {
    create?: XOR<ClerkTeachersCreateWithoutTeacherInput, ClerkTeachersUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: ClerkTeachersCreateOrConnectWithoutTeacherInput
    connect?: ClerkTeachersWhereUniqueInput
  }

  export type LessonCreateNestedManyWithoutTeacherInput = {
    create?: XOR<LessonCreateWithoutTeacherInput, LessonUncheckedCreateWithoutTeacherInput> | LessonCreateWithoutTeacherInput[] | LessonUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutTeacherInput | LessonCreateOrConnectWithoutTeacherInput[]
    createMany?: LessonCreateManyTeacherInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type TeacherSubjectCreateNestedManyWithoutTeacherInput = {
    create?: XOR<TeacherSubjectCreateWithoutTeacherInput, TeacherSubjectUncheckedCreateWithoutTeacherInput> | TeacherSubjectCreateWithoutTeacherInput[] | TeacherSubjectUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherSubjectCreateOrConnectWithoutTeacherInput | TeacherSubjectCreateOrConnectWithoutTeacherInput[]
    createMany?: TeacherSubjectCreateManyTeacherInputEnvelope
    connect?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
  }

  export type ClassCreateNestedOneWithoutTeacherInput = {
    create?: XOR<ClassCreateWithoutTeacherInput, ClassUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: ClassCreateOrConnectWithoutTeacherInput
    connect?: ClassWhereUniqueInput
  }

  export type ClerkTeachersUncheckedCreateNestedOneWithoutTeacherInput = {
    create?: XOR<ClerkTeachersCreateWithoutTeacherInput, ClerkTeachersUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: ClerkTeachersCreateOrConnectWithoutTeacherInput
    connect?: ClerkTeachersWhereUniqueInput
  }

  export type LessonUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<LessonCreateWithoutTeacherInput, LessonUncheckedCreateWithoutTeacherInput> | LessonCreateWithoutTeacherInput[] | LessonUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutTeacherInput | LessonCreateOrConnectWithoutTeacherInput[]
    createMany?: LessonCreateManyTeacherInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type TeacherSubjectUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<TeacherSubjectCreateWithoutTeacherInput, TeacherSubjectUncheckedCreateWithoutTeacherInput> | TeacherSubjectCreateWithoutTeacherInput[] | TeacherSubjectUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherSubjectCreateOrConnectWithoutTeacherInput | TeacherSubjectCreateOrConnectWithoutTeacherInput[]
    createMany?: TeacherSubjectCreateManyTeacherInputEnvelope
    connect?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
  }

  export type ClassUncheckedCreateNestedOneWithoutTeacherInput = {
    create?: XOR<ClassCreateWithoutTeacherInput, ClassUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: ClassCreateOrConnectWithoutTeacherInput
    connect?: ClassWhereUniqueInput
  }

  export type ClerkTeachersUpdateOneWithoutTeacherNestedInput = {
    create?: XOR<ClerkTeachersCreateWithoutTeacherInput, ClerkTeachersUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: ClerkTeachersCreateOrConnectWithoutTeacherInput
    upsert?: ClerkTeachersUpsertWithoutTeacherInput
    disconnect?: ClerkTeachersWhereInput | boolean
    delete?: ClerkTeachersWhereInput | boolean
    connect?: ClerkTeachersWhereUniqueInput
    update?: XOR<XOR<ClerkTeachersUpdateToOneWithWhereWithoutTeacherInput, ClerkTeachersUpdateWithoutTeacherInput>, ClerkTeachersUncheckedUpdateWithoutTeacherInput>
  }

  export type LessonUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<LessonCreateWithoutTeacherInput, LessonUncheckedCreateWithoutTeacherInput> | LessonCreateWithoutTeacherInput[] | LessonUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutTeacherInput | LessonCreateOrConnectWithoutTeacherInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutTeacherInput | LessonUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: LessonCreateManyTeacherInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutTeacherInput | LessonUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutTeacherInput | LessonUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type TeacherSubjectUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<TeacherSubjectCreateWithoutTeacherInput, TeacherSubjectUncheckedCreateWithoutTeacherInput> | TeacherSubjectCreateWithoutTeacherInput[] | TeacherSubjectUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherSubjectCreateOrConnectWithoutTeacherInput | TeacherSubjectCreateOrConnectWithoutTeacherInput[]
    upsert?: TeacherSubjectUpsertWithWhereUniqueWithoutTeacherInput | TeacherSubjectUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: TeacherSubjectCreateManyTeacherInputEnvelope
    set?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
    disconnect?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
    delete?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
    connect?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
    update?: TeacherSubjectUpdateWithWhereUniqueWithoutTeacherInput | TeacherSubjectUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: TeacherSubjectUpdateManyWithWhereWithoutTeacherInput | TeacherSubjectUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: TeacherSubjectScalarWhereInput | TeacherSubjectScalarWhereInput[]
  }

  export type ClassUpdateOneWithoutTeacherNestedInput = {
    create?: XOR<ClassCreateWithoutTeacherInput, ClassUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: ClassCreateOrConnectWithoutTeacherInput
    upsert?: ClassUpsertWithoutTeacherInput
    disconnect?: ClassWhereInput | boolean
    delete?: ClassWhereInput | boolean
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutTeacherInput, ClassUpdateWithoutTeacherInput>, ClassUncheckedUpdateWithoutTeacherInput>
  }

  export type ClerkTeachersUncheckedUpdateOneWithoutTeacherNestedInput = {
    create?: XOR<ClerkTeachersCreateWithoutTeacherInput, ClerkTeachersUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: ClerkTeachersCreateOrConnectWithoutTeacherInput
    upsert?: ClerkTeachersUpsertWithoutTeacherInput
    disconnect?: ClerkTeachersWhereInput | boolean
    delete?: ClerkTeachersWhereInput | boolean
    connect?: ClerkTeachersWhereUniqueInput
    update?: XOR<XOR<ClerkTeachersUpdateToOneWithWhereWithoutTeacherInput, ClerkTeachersUpdateWithoutTeacherInput>, ClerkTeachersUncheckedUpdateWithoutTeacherInput>
  }

  export type LessonUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<LessonCreateWithoutTeacherInput, LessonUncheckedCreateWithoutTeacherInput> | LessonCreateWithoutTeacherInput[] | LessonUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutTeacherInput | LessonCreateOrConnectWithoutTeacherInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutTeacherInput | LessonUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: LessonCreateManyTeacherInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutTeacherInput | LessonUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutTeacherInput | LessonUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type TeacherSubjectUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<TeacherSubjectCreateWithoutTeacherInput, TeacherSubjectUncheckedCreateWithoutTeacherInput> | TeacherSubjectCreateWithoutTeacherInput[] | TeacherSubjectUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherSubjectCreateOrConnectWithoutTeacherInput | TeacherSubjectCreateOrConnectWithoutTeacherInput[]
    upsert?: TeacherSubjectUpsertWithWhereUniqueWithoutTeacherInput | TeacherSubjectUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: TeacherSubjectCreateManyTeacherInputEnvelope
    set?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
    disconnect?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
    delete?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
    connect?: TeacherSubjectWhereUniqueInput | TeacherSubjectWhereUniqueInput[]
    update?: TeacherSubjectUpdateWithWhereUniqueWithoutTeacherInput | TeacherSubjectUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: TeacherSubjectUpdateManyWithWhereWithoutTeacherInput | TeacherSubjectUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: TeacherSubjectScalarWhereInput | TeacherSubjectScalarWhereInput[]
  }

  export type ClassUncheckedUpdateOneWithoutTeacherNestedInput = {
    create?: XOR<ClassCreateWithoutTeacherInput, ClassUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: ClassCreateOrConnectWithoutTeacherInput
    upsert?: ClassUpsertWithoutTeacherInput
    disconnect?: ClassWhereInput | boolean
    delete?: ClassWhereInput | boolean
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutTeacherInput, ClassUpdateWithoutTeacherInput>, ClassUncheckedUpdateWithoutTeacherInput>
  }

  export type SubjectCreateNestedOneWithoutTeachersInput = {
    create?: XOR<SubjectCreateWithoutTeachersInput, SubjectUncheckedCreateWithoutTeachersInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutTeachersInput
    connect?: SubjectWhereUniqueInput
  }

  export type TeacherCreateNestedOneWithoutSubjectsInput = {
    create?: XOR<TeacherCreateWithoutSubjectsInput, TeacherUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutSubjectsInput
    connect?: TeacherWhereUniqueInput
  }

  export type SubjectUpdateOneRequiredWithoutTeachersNestedInput = {
    create?: XOR<SubjectCreateWithoutTeachersInput, SubjectUncheckedCreateWithoutTeachersInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutTeachersInput
    upsert?: SubjectUpsertWithoutTeachersInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutTeachersInput, SubjectUpdateWithoutTeachersInput>, SubjectUncheckedUpdateWithoutTeachersInput>
  }

  export type TeacherUpdateOneRequiredWithoutSubjectsNestedInput = {
    create?: XOR<TeacherCreateWithoutSubjectsInput, TeacherUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutSubjectsInput
    upsert?: TeacherUpsertWithoutSubjectsInput
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutSubjectsInput, TeacherUpdateWithoutSubjectsInput>, TeacherUncheckedUpdateWithoutSubjectsInput>
  }

  export type TeacherCreateNestedOneWithoutClerkTeachersInput = {
    create?: XOR<TeacherCreateWithoutClerkTeachersInput, TeacherUncheckedCreateWithoutClerkTeachersInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutClerkTeachersInput
    connect?: TeacherWhereUniqueInput
  }

  export type TeacherUpdateOneWithoutClerkTeachersNestedInput = {
    create?: XOR<TeacherCreateWithoutClerkTeachersInput, TeacherUncheckedCreateWithoutClerkTeachersInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutClerkTeachersInput
    upsert?: TeacherUpsertWithoutClerkTeachersInput
    disconnect?: TeacherWhereInput | boolean
    delete?: TeacherWhereInput | boolean
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutClerkTeachersInput, TeacherUpdateWithoutClerkTeachersInput>, TeacherUncheckedUpdateWithoutClerkTeachersInput>
  }

  export type GradeCreateNestedOneWithoutFeestructureInput = {
    create?: XOR<GradeCreateWithoutFeestructureInput, GradeUncheckedCreateWithoutFeestructureInput>
    connectOrCreate?: GradeCreateOrConnectWithoutFeestructureInput
    connect?: GradeWhereUniqueInput
  }

  export type StudentFeesCreateNestedManyWithoutFeeStructureInput = {
    create?: XOR<StudentFeesCreateWithoutFeeStructureInput, StudentFeesUncheckedCreateWithoutFeeStructureInput> | StudentFeesCreateWithoutFeeStructureInput[] | StudentFeesUncheckedCreateWithoutFeeStructureInput[]
    connectOrCreate?: StudentFeesCreateOrConnectWithoutFeeStructureInput | StudentFeesCreateOrConnectWithoutFeeStructureInput[]
    createMany?: StudentFeesCreateManyFeeStructureInputEnvelope
    connect?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
  }

  export type StudentFeesUncheckedCreateNestedManyWithoutFeeStructureInput = {
    create?: XOR<StudentFeesCreateWithoutFeeStructureInput, StudentFeesUncheckedCreateWithoutFeeStructureInput> | StudentFeesCreateWithoutFeeStructureInput[] | StudentFeesUncheckedCreateWithoutFeeStructureInput[]
    connectOrCreate?: StudentFeesCreateOrConnectWithoutFeeStructureInput | StudentFeesCreateOrConnectWithoutFeeStructureInput[]
    createMany?: StudentFeesCreateManyFeeStructureInputEnvelope
    connect?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
  }

  export type EnumTermFieldUpdateOperationsInput = {
    set?: $Enums.Term
  }

  export type GradeUpdateOneRequiredWithoutFeestructureNestedInput = {
    create?: XOR<GradeCreateWithoutFeestructureInput, GradeUncheckedCreateWithoutFeestructureInput>
    connectOrCreate?: GradeCreateOrConnectWithoutFeestructureInput
    upsert?: GradeUpsertWithoutFeestructureInput
    connect?: GradeWhereUniqueInput
    update?: XOR<XOR<GradeUpdateToOneWithWhereWithoutFeestructureInput, GradeUpdateWithoutFeestructureInput>, GradeUncheckedUpdateWithoutFeestructureInput>
  }

  export type StudentFeesUpdateManyWithoutFeeStructureNestedInput = {
    create?: XOR<StudentFeesCreateWithoutFeeStructureInput, StudentFeesUncheckedCreateWithoutFeeStructureInput> | StudentFeesCreateWithoutFeeStructureInput[] | StudentFeesUncheckedCreateWithoutFeeStructureInput[]
    connectOrCreate?: StudentFeesCreateOrConnectWithoutFeeStructureInput | StudentFeesCreateOrConnectWithoutFeeStructureInput[]
    upsert?: StudentFeesUpsertWithWhereUniqueWithoutFeeStructureInput | StudentFeesUpsertWithWhereUniqueWithoutFeeStructureInput[]
    createMany?: StudentFeesCreateManyFeeStructureInputEnvelope
    set?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    disconnect?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    delete?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    connect?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    update?: StudentFeesUpdateWithWhereUniqueWithoutFeeStructureInput | StudentFeesUpdateWithWhereUniqueWithoutFeeStructureInput[]
    updateMany?: StudentFeesUpdateManyWithWhereWithoutFeeStructureInput | StudentFeesUpdateManyWithWhereWithoutFeeStructureInput[]
    deleteMany?: StudentFeesScalarWhereInput | StudentFeesScalarWhereInput[]
  }

  export type StudentFeesUncheckedUpdateManyWithoutFeeStructureNestedInput = {
    create?: XOR<StudentFeesCreateWithoutFeeStructureInput, StudentFeesUncheckedCreateWithoutFeeStructureInput> | StudentFeesCreateWithoutFeeStructureInput[] | StudentFeesUncheckedCreateWithoutFeeStructureInput[]
    connectOrCreate?: StudentFeesCreateOrConnectWithoutFeeStructureInput | StudentFeesCreateOrConnectWithoutFeeStructureInput[]
    upsert?: StudentFeesUpsertWithWhereUniqueWithoutFeeStructureInput | StudentFeesUpsertWithWhereUniqueWithoutFeeStructureInput[]
    createMany?: StudentFeesCreateManyFeeStructureInputEnvelope
    set?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    disconnect?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    delete?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    connect?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    update?: StudentFeesUpdateWithWhereUniqueWithoutFeeStructureInput | StudentFeesUpdateWithWhereUniqueWithoutFeeStructureInput[]
    updateMany?: StudentFeesUpdateManyWithWhereWithoutFeeStructureInput | StudentFeesUpdateManyWithWhereWithoutFeeStructureInput[]
    deleteMany?: StudentFeesScalarWhereInput | StudentFeesScalarWhereInput[]
  }

  export type StudentFeesCreateNestedOneWithoutFeeTransactionsInput = {
    create?: XOR<StudentFeesCreateWithoutFeeTransactionsInput, StudentFeesUncheckedCreateWithoutFeeTransactionsInput>
    connectOrCreate?: StudentFeesCreateOrConnectWithoutFeeTransactionsInput
    connect?: StudentFeesWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutFeeTransactionsInput = {
    create?: XOR<StudentCreateWithoutFeeTransactionsInput, StudentUncheckedCreateWithoutFeeTransactionsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutFeeTransactionsInput
    connect?: StudentWhereUniqueInput
  }

  export type EnumPaymentModeFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMode
  }

  export type StudentFeesUpdateOneRequiredWithoutFeeTransactionsNestedInput = {
    create?: XOR<StudentFeesCreateWithoutFeeTransactionsInput, StudentFeesUncheckedCreateWithoutFeeTransactionsInput>
    connectOrCreate?: StudentFeesCreateOrConnectWithoutFeeTransactionsInput
    upsert?: StudentFeesUpsertWithoutFeeTransactionsInput
    connect?: StudentFeesWhereUniqueInput
    update?: XOR<XOR<StudentFeesUpdateToOneWithWhereWithoutFeeTransactionsInput, StudentFeesUpdateWithoutFeeTransactionsInput>, StudentFeesUncheckedUpdateWithoutFeeTransactionsInput>
  }

  export type StudentUpdateOneRequiredWithoutFeeTransactionsNestedInput = {
    create?: XOR<StudentCreateWithoutFeeTransactionsInput, StudentUncheckedCreateWithoutFeeTransactionsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutFeeTransactionsInput
    upsert?: StudentUpsertWithoutFeeTransactionsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutFeeTransactionsInput, StudentUpdateWithoutFeeTransactionsInput>, StudentUncheckedUpdateWithoutFeeTransactionsInput>
  }

  export type FeeTransactionCreateNestedManyWithoutStudentFeesInput = {
    create?: XOR<FeeTransactionCreateWithoutStudentFeesInput, FeeTransactionUncheckedCreateWithoutStudentFeesInput> | FeeTransactionCreateWithoutStudentFeesInput[] | FeeTransactionUncheckedCreateWithoutStudentFeesInput[]
    connectOrCreate?: FeeTransactionCreateOrConnectWithoutStudentFeesInput | FeeTransactionCreateOrConnectWithoutStudentFeesInput[]
    createMany?: FeeTransactionCreateManyStudentFeesInputEnvelope
    connect?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
  }

  export type FeeStructureCreateNestedOneWithoutStudentFeesInput = {
    create?: XOR<FeeStructureCreateWithoutStudentFeesInput, FeeStructureUncheckedCreateWithoutStudentFeesInput>
    connectOrCreate?: FeeStructureCreateOrConnectWithoutStudentFeesInput
    connect?: FeeStructureWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutStudentFeesInput = {
    create?: XOR<StudentCreateWithoutStudentFeesInput, StudentUncheckedCreateWithoutStudentFeesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudentFeesInput
    connect?: StudentWhereUniqueInput
  }

  export type FeeTransactionUncheckedCreateNestedManyWithoutStudentFeesInput = {
    create?: XOR<FeeTransactionCreateWithoutStudentFeesInput, FeeTransactionUncheckedCreateWithoutStudentFeesInput> | FeeTransactionCreateWithoutStudentFeesInput[] | FeeTransactionUncheckedCreateWithoutStudentFeesInput[]
    connectOrCreate?: FeeTransactionCreateOrConnectWithoutStudentFeesInput | FeeTransactionCreateOrConnectWithoutStudentFeesInput[]
    createMany?: FeeTransactionCreateManyStudentFeesInputEnvelope
    connect?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
  }

  export type FeeTransactionUpdateManyWithoutStudentFeesNestedInput = {
    create?: XOR<FeeTransactionCreateWithoutStudentFeesInput, FeeTransactionUncheckedCreateWithoutStudentFeesInput> | FeeTransactionCreateWithoutStudentFeesInput[] | FeeTransactionUncheckedCreateWithoutStudentFeesInput[]
    connectOrCreate?: FeeTransactionCreateOrConnectWithoutStudentFeesInput | FeeTransactionCreateOrConnectWithoutStudentFeesInput[]
    upsert?: FeeTransactionUpsertWithWhereUniqueWithoutStudentFeesInput | FeeTransactionUpsertWithWhereUniqueWithoutStudentFeesInput[]
    createMany?: FeeTransactionCreateManyStudentFeesInputEnvelope
    set?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
    disconnect?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
    delete?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
    connect?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
    update?: FeeTransactionUpdateWithWhereUniqueWithoutStudentFeesInput | FeeTransactionUpdateWithWhereUniqueWithoutStudentFeesInput[]
    updateMany?: FeeTransactionUpdateManyWithWhereWithoutStudentFeesInput | FeeTransactionUpdateManyWithWhereWithoutStudentFeesInput[]
    deleteMany?: FeeTransactionScalarWhereInput | FeeTransactionScalarWhereInput[]
  }

  export type FeeStructureUpdateOneRequiredWithoutStudentFeesNestedInput = {
    create?: XOR<FeeStructureCreateWithoutStudentFeesInput, FeeStructureUncheckedCreateWithoutStudentFeesInput>
    connectOrCreate?: FeeStructureCreateOrConnectWithoutStudentFeesInput
    upsert?: FeeStructureUpsertWithoutStudentFeesInput
    connect?: FeeStructureWhereUniqueInput
    update?: XOR<XOR<FeeStructureUpdateToOneWithWhereWithoutStudentFeesInput, FeeStructureUpdateWithoutStudentFeesInput>, FeeStructureUncheckedUpdateWithoutStudentFeesInput>
  }

  export type StudentUpdateOneRequiredWithoutStudentFeesNestedInput = {
    create?: XOR<StudentCreateWithoutStudentFeesInput, StudentUncheckedCreateWithoutStudentFeesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudentFeesInput
    upsert?: StudentUpsertWithoutStudentFeesInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutStudentFeesInput, StudentUpdateWithoutStudentFeesInput>, StudentUncheckedUpdateWithoutStudentFeesInput>
  }

  export type FeeTransactionUncheckedUpdateManyWithoutStudentFeesNestedInput = {
    create?: XOR<FeeTransactionCreateWithoutStudentFeesInput, FeeTransactionUncheckedCreateWithoutStudentFeesInput> | FeeTransactionCreateWithoutStudentFeesInput[] | FeeTransactionUncheckedCreateWithoutStudentFeesInput[]
    connectOrCreate?: FeeTransactionCreateOrConnectWithoutStudentFeesInput | FeeTransactionCreateOrConnectWithoutStudentFeesInput[]
    upsert?: FeeTransactionUpsertWithWhereUniqueWithoutStudentFeesInput | FeeTransactionUpsertWithWhereUniqueWithoutStudentFeesInput[]
    createMany?: FeeTransactionCreateManyStudentFeesInputEnvelope
    set?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
    disconnect?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
    delete?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
    connect?: FeeTransactionWhereUniqueInput | FeeTransactionWhereUniqueInput[]
    update?: FeeTransactionUpdateWithWhereUniqueWithoutStudentFeesInput | FeeTransactionUpdateWithWhereUniqueWithoutStudentFeesInput[]
    updateMany?: FeeTransactionUpdateManyWithWhereWithoutStudentFeesInput | FeeTransactionUpdateManyWithWhereWithoutStudentFeesInput[]
    deleteMany?: FeeTransactionScalarWhereInput | FeeTransactionScalarWhereInput[]
  }

  export type StudentCreateNestedOneWithoutTotalFeesInput = {
    create?: XOR<StudentCreateWithoutTotalFeesInput, StudentUncheckedCreateWithoutTotalFeesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutTotalFeesInput
    connect?: StudentWhereUniqueInput
  }

  export type StudentUpdateOneRequiredWithoutTotalFeesNestedInput = {
    create?: XOR<StudentCreateWithoutTotalFeesInput, StudentUncheckedCreateWithoutTotalFeesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutTotalFeesInput
    upsert?: StudentUpsertWithoutTotalFeesInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutTotalFeesInput, StudentUpdateWithoutTotalFeesInput>, StudentUncheckedUpdateWithoutTotalFeesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumLessonDayFilter<$PrismaModel = never> = {
    equals?: $Enums.LessonDay | EnumLessonDayFieldRefInput<$PrismaModel>
    in?: $Enums.LessonDay[] | ListEnumLessonDayFieldRefInput<$PrismaModel>
    notIn?: $Enums.LessonDay[] | ListEnumLessonDayFieldRefInput<$PrismaModel>
    not?: NestedEnumLessonDayFilter<$PrismaModel> | $Enums.LessonDay
  }

  export type NestedEnumLessonDayWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LessonDay | EnumLessonDayFieldRefInput<$PrismaModel>
    in?: $Enums.LessonDay[] | ListEnumLessonDayFieldRefInput<$PrismaModel>
    notIn?: $Enums.LessonDay[] | ListEnumLessonDayFieldRefInput<$PrismaModel>
    not?: NestedEnumLessonDayWithAggregatesFilter<$PrismaModel> | $Enums.LessonDay
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLessonDayFilter<$PrismaModel>
    _max?: NestedEnumLessonDayFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type NestedEnumAcademicYearFilter<$PrismaModel = never> = {
    equals?: $Enums.AcademicYear | EnumAcademicYearFieldRefInput<$PrismaModel>
    in?: $Enums.AcademicYear[] | ListEnumAcademicYearFieldRefInput<$PrismaModel>
    notIn?: $Enums.AcademicYear[] | ListEnumAcademicYearFieldRefInput<$PrismaModel>
    not?: NestedEnumAcademicYearFilter<$PrismaModel> | $Enums.AcademicYear
  }

  export type NestedEnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type NestedEnumAcademicYearWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AcademicYear | EnumAcademicYearFieldRefInput<$PrismaModel>
    in?: $Enums.AcademicYear[] | ListEnumAcademicYearFieldRefInput<$PrismaModel>
    notIn?: $Enums.AcademicYear[] | ListEnumAcademicYearFieldRefInput<$PrismaModel>
    not?: NestedEnumAcademicYearWithAggregatesFilter<$PrismaModel> | $Enums.AcademicYear
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAcademicYearFilter<$PrismaModel>
    _max?: NestedEnumAcademicYearFilter<$PrismaModel>
  }

  export type NestedEnumTermFilter<$PrismaModel = never> = {
    equals?: $Enums.Term | EnumTermFieldRefInput<$PrismaModel>
    in?: $Enums.Term[] | ListEnumTermFieldRefInput<$PrismaModel>
    notIn?: $Enums.Term[] | ListEnumTermFieldRefInput<$PrismaModel>
    not?: NestedEnumTermFilter<$PrismaModel> | $Enums.Term
  }

  export type NestedEnumTermWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Term | EnumTermFieldRefInput<$PrismaModel>
    in?: $Enums.Term[] | ListEnumTermFieldRefInput<$PrismaModel>
    notIn?: $Enums.Term[] | ListEnumTermFieldRefInput<$PrismaModel>
    not?: NestedEnumTermWithAggregatesFilter<$PrismaModel> | $Enums.Term
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTermFilter<$PrismaModel>
    _max?: NestedEnumTermFilter<$PrismaModel>
  }

  export type NestedEnumPaymentModeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMode | EnumPaymentModeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentModeFilter<$PrismaModel> | $Enums.PaymentMode
  }

  export type NestedEnumPaymentModeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMode | EnumPaymentModeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentModeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentModeFilter<$PrismaModel>
    _max?: NestedEnumPaymentModeFilter<$PrismaModel>
  }

  export type FeeStructureCreateWithoutGradeInput = {
    startDate: Date | string
    dueDate: Date | string
    termFees: number
    abacusFees?: number | null
    term: $Enums.Term
    academicYear?: $Enums.AcademicYear
    studentFees?: StudentFeesCreateNestedManyWithoutFeeStructureInput
  }

  export type FeeStructureUncheckedCreateWithoutGradeInput = {
    id?: number
    startDate: Date | string
    dueDate: Date | string
    termFees: number
    abacusFees?: number | null
    term: $Enums.Term
    academicYear?: $Enums.AcademicYear
    studentFees?: StudentFeesUncheckedCreateNestedManyWithoutFeeStructureInput
  }

  export type FeeStructureCreateOrConnectWithoutGradeInput = {
    where: FeeStructureWhereUniqueInput
    create: XOR<FeeStructureCreateWithoutGradeInput, FeeStructureUncheckedCreateWithoutGradeInput>
  }

  export type FeeStructureCreateManyGradeInputEnvelope = {
    data: FeeStructureCreateManyGradeInput | FeeStructureCreateManyGradeInput[]
    skipDuplicates?: boolean
  }

  export type HomeworkCreateWithoutGradeInput = {
    description: string
    date?: Date | string
    Class: ClassCreateNestedOneWithoutHomeworksInput
  }

  export type HomeworkUncheckedCreateWithoutGradeInput = {
    id?: number
    description: string
    date?: Date | string
    classId: number
  }

  export type HomeworkCreateOrConnectWithoutGradeInput = {
    where: HomeworkWhereUniqueInput
    create: XOR<HomeworkCreateWithoutGradeInput, HomeworkUncheckedCreateWithoutGradeInput>
  }

  export type HomeworkCreateManyGradeInputEnvelope = {
    data: HomeworkCreateManyGradeInput | HomeworkCreateManyGradeInput[]
    skipDuplicates?: boolean
  }

  export type ClassCreateWithoutGradeInput = {
    name: string
    Announcement?: AnnouncementCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    exams?: ExamCreateNestedManyWithoutClassInput
    homeworks?: HomeworkCreateNestedManyWithoutClassInput
    lessons?: LessonCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassInput
    Teacher?: TeacherCreateNestedOneWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutGradeInput = {
    id?: number
    name: string
    supervisorId?: string | null
    Announcement?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    exams?: ExamUncheckedCreateNestedManyWithoutClassInput
    homeworks?: HomeworkUncheckedCreateNestedManyWithoutClassInput
    lessons?: LessonUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutGradeInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutGradeInput, ClassUncheckedCreateWithoutGradeInput>
  }

  export type ClassCreateManyGradeInputEnvelope = {
    data: ClassCreateManyGradeInput | ClassCreateManyGradeInput[]
    skipDuplicates?: boolean
  }

  export type FeeStructureUpsertWithWhereUniqueWithoutGradeInput = {
    where: FeeStructureWhereUniqueInput
    update: XOR<FeeStructureUpdateWithoutGradeInput, FeeStructureUncheckedUpdateWithoutGradeInput>
    create: XOR<FeeStructureCreateWithoutGradeInput, FeeStructureUncheckedCreateWithoutGradeInput>
  }

  export type FeeStructureUpdateWithWhereUniqueWithoutGradeInput = {
    where: FeeStructureWhereUniqueInput
    data: XOR<FeeStructureUpdateWithoutGradeInput, FeeStructureUncheckedUpdateWithoutGradeInput>
  }

  export type FeeStructureUpdateManyWithWhereWithoutGradeInput = {
    where: FeeStructureScalarWhereInput
    data: XOR<FeeStructureUpdateManyMutationInput, FeeStructureUncheckedUpdateManyWithoutGradeInput>
  }

  export type FeeStructureScalarWhereInput = {
    AND?: FeeStructureScalarWhereInput | FeeStructureScalarWhereInput[]
    OR?: FeeStructureScalarWhereInput[]
    NOT?: FeeStructureScalarWhereInput | FeeStructureScalarWhereInput[]
    id?: IntFilter<"FeeStructure"> | number
    gradeId?: IntFilter<"FeeStructure"> | number
    startDate?: DateTimeFilter<"FeeStructure"> | Date | string
    dueDate?: DateTimeFilter<"FeeStructure"> | Date | string
    termFees?: IntFilter<"FeeStructure"> | number
    abacusFees?: IntNullableFilter<"FeeStructure"> | number | null
    term?: EnumTermFilter<"FeeStructure"> | $Enums.Term
    academicYear?: EnumAcademicYearFilter<"FeeStructure"> | $Enums.AcademicYear
  }

  export type HomeworkUpsertWithWhereUniqueWithoutGradeInput = {
    where: HomeworkWhereUniqueInput
    update: XOR<HomeworkUpdateWithoutGradeInput, HomeworkUncheckedUpdateWithoutGradeInput>
    create: XOR<HomeworkCreateWithoutGradeInput, HomeworkUncheckedCreateWithoutGradeInput>
  }

  export type HomeworkUpdateWithWhereUniqueWithoutGradeInput = {
    where: HomeworkWhereUniqueInput
    data: XOR<HomeworkUpdateWithoutGradeInput, HomeworkUncheckedUpdateWithoutGradeInput>
  }

  export type HomeworkUpdateManyWithWhereWithoutGradeInput = {
    where: HomeworkScalarWhereInput
    data: XOR<HomeworkUpdateManyMutationInput, HomeworkUncheckedUpdateManyWithoutGradeInput>
  }

  export type HomeworkScalarWhereInput = {
    AND?: HomeworkScalarWhereInput | HomeworkScalarWhereInput[]
    OR?: HomeworkScalarWhereInput[]
    NOT?: HomeworkScalarWhereInput | HomeworkScalarWhereInput[]
    id?: IntFilter<"Homework"> | number
    description?: StringFilter<"Homework"> | string
    date?: DateTimeFilter<"Homework"> | Date | string
    classId?: IntFilter<"Homework"> | number
    gradeId?: IntFilter<"Homework"> | number
  }

  export type ClassUpsertWithWhereUniqueWithoutGradeInput = {
    where: ClassWhereUniqueInput
    update: XOR<ClassUpdateWithoutGradeInput, ClassUncheckedUpdateWithoutGradeInput>
    create: XOR<ClassCreateWithoutGradeInput, ClassUncheckedCreateWithoutGradeInput>
  }

  export type ClassUpdateWithWhereUniqueWithoutGradeInput = {
    where: ClassWhereUniqueInput
    data: XOR<ClassUpdateWithoutGradeInput, ClassUncheckedUpdateWithoutGradeInput>
  }

  export type ClassUpdateManyWithWhereWithoutGradeInput = {
    where: ClassScalarWhereInput
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyWithoutGradeInput>
  }

  export type ClassScalarWhereInput = {
    AND?: ClassScalarWhereInput | ClassScalarWhereInput[]
    OR?: ClassScalarWhereInput[]
    NOT?: ClassScalarWhereInput | ClassScalarWhereInput[]
    id?: IntFilter<"Class"> | number
    name?: StringFilter<"Class"> | string
    supervisorId?: StringNullableFilter<"Class"> | string | null
    gradeId?: IntFilter<"Class"> | number
  }

  export type AnnouncementCreateWithoutClassInput = {
    title: string
    description: string
    date: Date | string
  }

  export type AnnouncementUncheckedCreateWithoutClassInput = {
    id?: number
    title: string
    description: string
    date: Date | string
  }

  export type AnnouncementCreateOrConnectWithoutClassInput = {
    where: AnnouncementWhereUniqueInput
    create: XOR<AnnouncementCreateWithoutClassInput, AnnouncementUncheckedCreateWithoutClassInput>
  }

  export type AnnouncementCreateManyClassInputEnvelope = {
    data: AnnouncementCreateManyClassInput | AnnouncementCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceCreateWithoutClassInput = {
    date: Date | string
    present: boolean
    Student: StudentCreateNestedOneWithoutAttendanceInput
  }

  export type AttendanceUncheckedCreateWithoutClassInput = {
    id?: number
    date: Date | string
    present: boolean
    studentId: string
  }

  export type AttendanceCreateOrConnectWithoutClassInput = {
    where: AttendanceWhereUniqueInput
    create: XOR<AttendanceCreateWithoutClassInput, AttendanceUncheckedCreateWithoutClassInput>
  }

  export type AttendanceCreateManyClassInputEnvelope = {
    data: AttendanceCreateManyClassInput | AttendanceCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutClassInput = {
    title: string
    description: string
    startTime: Date | string
    endTime: Date | string
  }

  export type EventUncheckedCreateWithoutClassInput = {
    id?: number
    title: string
    description: string
    startTime: Date | string
    endTime: Date | string
  }

  export type EventCreateOrConnectWithoutClassInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutClassInput, EventUncheckedCreateWithoutClassInput>
  }

  export type EventCreateManyClassInputEnvelope = {
    data: EventCreateManyClassInput | EventCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type ExamCreateWithoutClassInput = {
    title: string
    date: Date | string
    subjects?: ExamSubjectCreateNestedManyWithoutExamInput
    results?: ResultCreateNestedManyWithoutExamInput
  }

  export type ExamUncheckedCreateWithoutClassInput = {
    id?: number
    title: string
    date: Date | string
    subjects?: ExamSubjectUncheckedCreateNestedManyWithoutExamInput
    results?: ResultUncheckedCreateNestedManyWithoutExamInput
  }

  export type ExamCreateOrConnectWithoutClassInput = {
    where: ExamWhereUniqueInput
    create: XOR<ExamCreateWithoutClassInput, ExamUncheckedCreateWithoutClassInput>
  }

  export type ExamCreateManyClassInputEnvelope = {
    data: ExamCreateManyClassInput | ExamCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type HomeworkCreateWithoutClassInput = {
    description: string
    date?: Date | string
    Grade: GradeCreateNestedOneWithoutHomeworkInput
  }

  export type HomeworkUncheckedCreateWithoutClassInput = {
    id?: number
    description: string
    date?: Date | string
    gradeId: number
  }

  export type HomeworkCreateOrConnectWithoutClassInput = {
    where: HomeworkWhereUniqueInput
    create: XOR<HomeworkCreateWithoutClassInput, HomeworkUncheckedCreateWithoutClassInput>
  }

  export type HomeworkCreateManyClassInputEnvelope = {
    data: HomeworkCreateManyClassInput | HomeworkCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type LessonCreateWithoutClassInput = {
    name: string
    day: $Enums.LessonDay
    startTime: Date | string
    endTime: Date | string
    Subject: SubjectCreateNestedOneWithoutLessonsInput
    Teacher: TeacherCreateNestedOneWithoutLessonsInput
  }

  export type LessonUncheckedCreateWithoutClassInput = {
    id?: number
    name: string
    day: $Enums.LessonDay
    startTime: Date | string
    endTime: Date | string
    subjectId: number
    teacherId: string
  }

  export type LessonCreateOrConnectWithoutClassInput = {
    where: LessonWhereUniqueInput
    create: XOR<LessonCreateWithoutClassInput, LessonUncheckedCreateWithoutClassInput>
  }

  export type LessonCreateManyClassInputEnvelope = {
    data: LessonCreateManyClassInput | LessonCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type StudentCreateWithoutClassInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    parentName: string
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    dob: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    clerk_id?: string | null
    academicYear?: $Enums.AcademicYear
    Attendance?: AttendanceCreateNestedManyWithoutStudentInput
    clerkStudent?: ClerkStudentsCreateNestedOneWithoutStudentInput
    feeTransactions?: FeeTransactionCreateNestedManyWithoutStudentInput
    results?: ResultCreateNestedManyWithoutStudentInput
    studentFees?: StudentFeesCreateNestedManyWithoutStudentInput
    totalFees?: StudentTotalFeesCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutClassInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    parentName: string
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    dob: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    clerk_id?: string | null
    academicYear?: $Enums.AcademicYear
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    clerkStudent?: ClerkStudentsUncheckedCreateNestedOneWithoutStudentInput
    feeTransactions?: FeeTransactionUncheckedCreateNestedManyWithoutStudentInput
    results?: ResultUncheckedCreateNestedManyWithoutStudentInput
    studentFees?: StudentFeesUncheckedCreateNestedManyWithoutStudentInput
    totalFees?: StudentTotalFeesUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutClassInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput>
  }

  export type StudentCreateManyClassInputEnvelope = {
    data: StudentCreateManyClassInput | StudentCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type GradeCreateWithoutClassesInput = {
    level: string
    feestructure?: FeeStructureCreateNestedManyWithoutGradeInput
    Homework?: HomeworkCreateNestedManyWithoutGradeInput
  }

  export type GradeUncheckedCreateWithoutClassesInput = {
    id?: number
    level: string
    feestructure?: FeeStructureUncheckedCreateNestedManyWithoutGradeInput
    Homework?: HomeworkUncheckedCreateNestedManyWithoutGradeInput
  }

  export type GradeCreateOrConnectWithoutClassesInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutClassesInput, GradeUncheckedCreateWithoutClassesInput>
  }

  export type TeacherCreateWithoutClassInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    createdAt?: Date | string
    deletedAt?: Date | string | null
    supervisor?: boolean
    dob?: Date | string | null
    classId?: string | null
    clerk_id?: string | null
    ClerkTeachers?: ClerkTeachersCreateNestedOneWithoutTeacherInput
    lessons?: LessonCreateNestedManyWithoutTeacherInput
    subjects?: TeacherSubjectCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutClassInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    createdAt?: Date | string
    deletedAt?: Date | string | null
    supervisor?: boolean
    dob?: Date | string | null
    classId?: string | null
    clerk_id?: string | null
    ClerkTeachers?: ClerkTeachersUncheckedCreateNestedOneWithoutTeacherInput
    lessons?: LessonUncheckedCreateNestedManyWithoutTeacherInput
    subjects?: TeacherSubjectUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutClassInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutClassInput, TeacherUncheckedCreateWithoutClassInput>
  }

  export type AnnouncementUpsertWithWhereUniqueWithoutClassInput = {
    where: AnnouncementWhereUniqueInput
    update: XOR<AnnouncementUpdateWithoutClassInput, AnnouncementUncheckedUpdateWithoutClassInput>
    create: XOR<AnnouncementCreateWithoutClassInput, AnnouncementUncheckedCreateWithoutClassInput>
  }

  export type AnnouncementUpdateWithWhereUniqueWithoutClassInput = {
    where: AnnouncementWhereUniqueInput
    data: XOR<AnnouncementUpdateWithoutClassInput, AnnouncementUncheckedUpdateWithoutClassInput>
  }

  export type AnnouncementUpdateManyWithWhereWithoutClassInput = {
    where: AnnouncementScalarWhereInput
    data: XOR<AnnouncementUpdateManyMutationInput, AnnouncementUncheckedUpdateManyWithoutClassInput>
  }

  export type AnnouncementScalarWhereInput = {
    AND?: AnnouncementScalarWhereInput | AnnouncementScalarWhereInput[]
    OR?: AnnouncementScalarWhereInput[]
    NOT?: AnnouncementScalarWhereInput | AnnouncementScalarWhereInput[]
    id?: IntFilter<"Announcement"> | number
    title?: StringFilter<"Announcement"> | string
    description?: StringFilter<"Announcement"> | string
    date?: DateTimeFilter<"Announcement"> | Date | string
    classId?: IntNullableFilter<"Announcement"> | number | null
  }

  export type AttendanceUpsertWithWhereUniqueWithoutClassInput = {
    where: AttendanceWhereUniqueInput
    update: XOR<AttendanceUpdateWithoutClassInput, AttendanceUncheckedUpdateWithoutClassInput>
    create: XOR<AttendanceCreateWithoutClassInput, AttendanceUncheckedCreateWithoutClassInput>
  }

  export type AttendanceUpdateWithWhereUniqueWithoutClassInput = {
    where: AttendanceWhereUniqueInput
    data: XOR<AttendanceUpdateWithoutClassInput, AttendanceUncheckedUpdateWithoutClassInput>
  }

  export type AttendanceUpdateManyWithWhereWithoutClassInput = {
    where: AttendanceScalarWhereInput
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyWithoutClassInput>
  }

  export type AttendanceScalarWhereInput = {
    AND?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
    OR?: AttendanceScalarWhereInput[]
    NOT?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
    id?: IntFilter<"Attendance"> | number
    date?: DateTimeFilter<"Attendance"> | Date | string
    present?: BoolFilter<"Attendance"> | boolean
    studentId?: StringFilter<"Attendance"> | string
    classId?: IntFilter<"Attendance"> | number
  }

  export type EventUpsertWithWhereUniqueWithoutClassInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutClassInput, EventUncheckedUpdateWithoutClassInput>
    create: XOR<EventCreateWithoutClassInput, EventUncheckedCreateWithoutClassInput>
  }

  export type EventUpdateWithWhereUniqueWithoutClassInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutClassInput, EventUncheckedUpdateWithoutClassInput>
  }

  export type EventUpdateManyWithWhereWithoutClassInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutClassInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: IntFilter<"Event"> | number
    title?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    startTime?: DateTimeFilter<"Event"> | Date | string
    endTime?: DateTimeFilter<"Event"> | Date | string
    classId?: IntNullableFilter<"Event"> | number | null
  }

  export type ExamUpsertWithWhereUniqueWithoutClassInput = {
    where: ExamWhereUniqueInput
    update: XOR<ExamUpdateWithoutClassInput, ExamUncheckedUpdateWithoutClassInput>
    create: XOR<ExamCreateWithoutClassInput, ExamUncheckedCreateWithoutClassInput>
  }

  export type ExamUpdateWithWhereUniqueWithoutClassInput = {
    where: ExamWhereUniqueInput
    data: XOR<ExamUpdateWithoutClassInput, ExamUncheckedUpdateWithoutClassInput>
  }

  export type ExamUpdateManyWithWhereWithoutClassInput = {
    where: ExamScalarWhereInput
    data: XOR<ExamUpdateManyMutationInput, ExamUncheckedUpdateManyWithoutClassInput>
  }

  export type ExamScalarWhereInput = {
    AND?: ExamScalarWhereInput | ExamScalarWhereInput[]
    OR?: ExamScalarWhereInput[]
    NOT?: ExamScalarWhereInput | ExamScalarWhereInput[]
    id?: IntFilter<"Exam"> | number
    title?: StringFilter<"Exam"> | string
    date?: DateTimeFilter<"Exam"> | Date | string
    classId?: IntFilter<"Exam"> | number
  }

  export type HomeworkUpsertWithWhereUniqueWithoutClassInput = {
    where: HomeworkWhereUniqueInput
    update: XOR<HomeworkUpdateWithoutClassInput, HomeworkUncheckedUpdateWithoutClassInput>
    create: XOR<HomeworkCreateWithoutClassInput, HomeworkUncheckedCreateWithoutClassInput>
  }

  export type HomeworkUpdateWithWhereUniqueWithoutClassInput = {
    where: HomeworkWhereUniqueInput
    data: XOR<HomeworkUpdateWithoutClassInput, HomeworkUncheckedUpdateWithoutClassInput>
  }

  export type HomeworkUpdateManyWithWhereWithoutClassInput = {
    where: HomeworkScalarWhereInput
    data: XOR<HomeworkUpdateManyMutationInput, HomeworkUncheckedUpdateManyWithoutClassInput>
  }

  export type LessonUpsertWithWhereUniqueWithoutClassInput = {
    where: LessonWhereUniqueInput
    update: XOR<LessonUpdateWithoutClassInput, LessonUncheckedUpdateWithoutClassInput>
    create: XOR<LessonCreateWithoutClassInput, LessonUncheckedCreateWithoutClassInput>
  }

  export type LessonUpdateWithWhereUniqueWithoutClassInput = {
    where: LessonWhereUniqueInput
    data: XOR<LessonUpdateWithoutClassInput, LessonUncheckedUpdateWithoutClassInput>
  }

  export type LessonUpdateManyWithWhereWithoutClassInput = {
    where: LessonScalarWhereInput
    data: XOR<LessonUpdateManyMutationInput, LessonUncheckedUpdateManyWithoutClassInput>
  }

  export type LessonScalarWhereInput = {
    AND?: LessonScalarWhereInput | LessonScalarWhereInput[]
    OR?: LessonScalarWhereInput[]
    NOT?: LessonScalarWhereInput | LessonScalarWhereInput[]
    id?: IntFilter<"Lesson"> | number
    name?: StringFilter<"Lesson"> | string
    day?: EnumLessonDayFilter<"Lesson"> | $Enums.LessonDay
    startTime?: DateTimeFilter<"Lesson"> | Date | string
    endTime?: DateTimeFilter<"Lesson"> | Date | string
    subjectId?: IntFilter<"Lesson"> | number
    classId?: IntFilter<"Lesson"> | number
    teacherId?: StringFilter<"Lesson"> | string
  }

  export type StudentUpsertWithWhereUniqueWithoutClassInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutClassInput, StudentUncheckedUpdateWithoutClassInput>
    create: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutClassInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutClassInput, StudentUncheckedUpdateWithoutClassInput>
  }

  export type StudentUpdateManyWithWhereWithoutClassInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutClassInput>
  }

  export type StudentScalarWhereInput = {
    AND?: StudentScalarWhereInput | StudentScalarWhereInput[]
    OR?: StudentScalarWhereInput[]
    NOT?: StudentScalarWhereInput | StudentScalarWhereInput[]
    id?: StringFilter<"Student"> | string
    username?: StringFilter<"Student"> | string
    name?: StringFilter<"Student"> | string
    surname?: StringNullableFilter<"Student"> | string | null
    parentName?: StringFilter<"Student"> | string
    email?: StringNullableFilter<"Student"> | string | null
    phone?: StringFilter<"Student"> | string
    address?: StringFilter<"Student"> | string
    img?: StringNullableFilter<"Student"> | string | null
    bloodType?: StringNullableFilter<"Student"> | string | null
    gender?: EnumGenderFilter<"Student"> | $Enums.Gender
    dob?: DateTimeFilter<"Student"> | Date | string
    createdAt?: DateTimeFilter<"Student"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Student"> | Date | string | null
    classId?: IntFilter<"Student"> | number
    clerk_id?: StringNullableFilter<"Student"> | string | null
    academicYear?: EnumAcademicYearFilter<"Student"> | $Enums.AcademicYear
  }

  export type GradeUpsertWithoutClassesInput = {
    update: XOR<GradeUpdateWithoutClassesInput, GradeUncheckedUpdateWithoutClassesInput>
    create: XOR<GradeCreateWithoutClassesInput, GradeUncheckedCreateWithoutClassesInput>
    where?: GradeWhereInput
  }

  export type GradeUpdateToOneWithWhereWithoutClassesInput = {
    where?: GradeWhereInput
    data: XOR<GradeUpdateWithoutClassesInput, GradeUncheckedUpdateWithoutClassesInput>
  }

  export type GradeUpdateWithoutClassesInput = {
    level?: StringFieldUpdateOperationsInput | string
    feestructure?: FeeStructureUpdateManyWithoutGradeNestedInput
    Homework?: HomeworkUpdateManyWithoutGradeNestedInput
  }

  export type GradeUncheckedUpdateWithoutClassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    feestructure?: FeeStructureUncheckedUpdateManyWithoutGradeNestedInput
    Homework?: HomeworkUncheckedUpdateManyWithoutGradeNestedInput
  }

  export type TeacherUpsertWithoutClassInput = {
    update: XOR<TeacherUpdateWithoutClassInput, TeacherUncheckedUpdateWithoutClassInput>
    create: XOR<TeacherCreateWithoutClassInput, TeacherUncheckedCreateWithoutClassInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutClassInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutClassInput, TeacherUncheckedUpdateWithoutClassInput>
  }

  export type TeacherUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supervisor?: BoolFieldUpdateOperationsInput | boolean
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    ClerkTeachers?: ClerkTeachersUpdateOneWithoutTeacherNestedInput
    lessons?: LessonUpdateManyWithoutTeacherNestedInput
    subjects?: TeacherSubjectUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supervisor?: BoolFieldUpdateOperationsInput | boolean
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    ClerkTeachers?: ClerkTeachersUncheckedUpdateOneWithoutTeacherNestedInput
    lessons?: LessonUncheckedUpdateManyWithoutTeacherNestedInput
    subjects?: TeacherSubjectUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type ClassCreateWithoutLessonsInput = {
    name: string
    Announcement?: AnnouncementCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    exams?: ExamCreateNestedManyWithoutClassInput
    homeworks?: HomeworkCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassInput
    Grade: GradeCreateNestedOneWithoutClassesInput
    Teacher?: TeacherCreateNestedOneWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutLessonsInput = {
    id?: number
    name: string
    supervisorId?: string | null
    gradeId: number
    Announcement?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    exams?: ExamUncheckedCreateNestedManyWithoutClassInput
    homeworks?: HomeworkUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutLessonsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutLessonsInput, ClassUncheckedCreateWithoutLessonsInput>
  }

  export type SubjectCreateWithoutLessonsInput = {
    name: string
    createdAt?: Date | string
    exams?: ExamSubjectCreateNestedManyWithoutSubjectInput
    results?: ResultCreateNestedManyWithoutSubjectInput
    teachers?: TeacherSubjectCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutLessonsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    exams?: ExamSubjectUncheckedCreateNestedManyWithoutSubjectInput
    results?: ResultUncheckedCreateNestedManyWithoutSubjectInput
    teachers?: TeacherSubjectUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutLessonsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutLessonsInput, SubjectUncheckedCreateWithoutLessonsInput>
  }

  export type TeacherCreateWithoutLessonsInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    createdAt?: Date | string
    deletedAt?: Date | string | null
    supervisor?: boolean
    dob?: Date | string | null
    classId?: string | null
    clerk_id?: string | null
    ClerkTeachers?: ClerkTeachersCreateNestedOneWithoutTeacherInput
    subjects?: TeacherSubjectCreateNestedManyWithoutTeacherInput
    class?: ClassCreateNestedOneWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutLessonsInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    createdAt?: Date | string
    deletedAt?: Date | string | null
    supervisor?: boolean
    dob?: Date | string | null
    classId?: string | null
    clerk_id?: string | null
    ClerkTeachers?: ClerkTeachersUncheckedCreateNestedOneWithoutTeacherInput
    subjects?: TeacherSubjectUncheckedCreateNestedManyWithoutTeacherInput
    class?: ClassUncheckedCreateNestedOneWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutLessonsInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutLessonsInput, TeacherUncheckedCreateWithoutLessonsInput>
  }

  export type ClassUpsertWithoutLessonsInput = {
    update: XOR<ClassUpdateWithoutLessonsInput, ClassUncheckedUpdateWithoutLessonsInput>
    create: XOR<ClassCreateWithoutLessonsInput, ClassUncheckedCreateWithoutLessonsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutLessonsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutLessonsInput, ClassUncheckedUpdateWithoutLessonsInput>
  }

  export type ClassUpdateWithoutLessonsInput = {
    name?: StringFieldUpdateOperationsInput | string
    Announcement?: AnnouncementUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    exams?: ExamUpdateManyWithoutClassNestedInput
    homeworks?: HomeworkUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    Grade?: GradeUpdateOneRequiredWithoutClassesNestedInput
    Teacher?: TeacherUpdateOneWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutLessonsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: IntFieldUpdateOperationsInput | number
    Announcement?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    exams?: ExamUncheckedUpdateManyWithoutClassNestedInput
    homeworks?: HomeworkUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
  }

  export type SubjectUpsertWithoutLessonsInput = {
    update: XOR<SubjectUpdateWithoutLessonsInput, SubjectUncheckedUpdateWithoutLessonsInput>
    create: XOR<SubjectCreateWithoutLessonsInput, SubjectUncheckedCreateWithoutLessonsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutLessonsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutLessonsInput, SubjectUncheckedUpdateWithoutLessonsInput>
  }

  export type SubjectUpdateWithoutLessonsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exams?: ExamSubjectUpdateManyWithoutSubjectNestedInput
    results?: ResultUpdateManyWithoutSubjectNestedInput
    teachers?: TeacherSubjectUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutLessonsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exams?: ExamSubjectUncheckedUpdateManyWithoutSubjectNestedInput
    results?: ResultUncheckedUpdateManyWithoutSubjectNestedInput
    teachers?: TeacherSubjectUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type TeacherUpsertWithoutLessonsInput = {
    update: XOR<TeacherUpdateWithoutLessonsInput, TeacherUncheckedUpdateWithoutLessonsInput>
    create: XOR<TeacherCreateWithoutLessonsInput, TeacherUncheckedCreateWithoutLessonsInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutLessonsInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutLessonsInput, TeacherUncheckedUpdateWithoutLessonsInput>
  }

  export type TeacherUpdateWithoutLessonsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supervisor?: BoolFieldUpdateOperationsInput | boolean
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    ClerkTeachers?: ClerkTeachersUpdateOneWithoutTeacherNestedInput
    subjects?: TeacherSubjectUpdateManyWithoutTeacherNestedInput
    class?: ClassUpdateOneWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutLessonsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supervisor?: BoolFieldUpdateOperationsInput | boolean
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    ClerkTeachers?: ClerkTeachersUncheckedUpdateOneWithoutTeacherNestedInput
    subjects?: TeacherSubjectUncheckedUpdateManyWithoutTeacherNestedInput
    class?: ClassUncheckedUpdateOneWithoutTeacherNestedInput
  }

  export type ClassCreateWithoutAnnouncementInput = {
    name: string
    attendance?: AttendanceCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    exams?: ExamCreateNestedManyWithoutClassInput
    homeworks?: HomeworkCreateNestedManyWithoutClassInput
    lessons?: LessonCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassInput
    Grade: GradeCreateNestedOneWithoutClassesInput
    Teacher?: TeacherCreateNestedOneWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutAnnouncementInput = {
    id?: number
    name: string
    supervisorId?: string | null
    gradeId: number
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    exams?: ExamUncheckedCreateNestedManyWithoutClassInput
    homeworks?: HomeworkUncheckedCreateNestedManyWithoutClassInput
    lessons?: LessonUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutAnnouncementInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutAnnouncementInput, ClassUncheckedCreateWithoutAnnouncementInput>
  }

  export type ClassUpsertWithoutAnnouncementInput = {
    update: XOR<ClassUpdateWithoutAnnouncementInput, ClassUncheckedUpdateWithoutAnnouncementInput>
    create: XOR<ClassCreateWithoutAnnouncementInput, ClassUncheckedCreateWithoutAnnouncementInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutAnnouncementInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutAnnouncementInput, ClassUncheckedUpdateWithoutAnnouncementInput>
  }

  export type ClassUpdateWithoutAnnouncementInput = {
    name?: StringFieldUpdateOperationsInput | string
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    exams?: ExamUpdateManyWithoutClassNestedInput
    homeworks?: HomeworkUpdateManyWithoutClassNestedInput
    lessons?: LessonUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    Grade?: GradeUpdateOneRequiredWithoutClassesNestedInput
    Teacher?: TeacherUpdateOneWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutAnnouncementInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: IntFieldUpdateOperationsInput | number
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    exams?: ExamUncheckedUpdateManyWithoutClassNestedInput
    homeworks?: HomeworkUncheckedUpdateManyWithoutClassNestedInput
    lessons?: LessonUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassCreateWithoutAttendanceInput = {
    name: string
    Announcement?: AnnouncementCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    exams?: ExamCreateNestedManyWithoutClassInput
    homeworks?: HomeworkCreateNestedManyWithoutClassInput
    lessons?: LessonCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassInput
    Grade: GradeCreateNestedOneWithoutClassesInput
    Teacher?: TeacherCreateNestedOneWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutAttendanceInput = {
    id?: number
    name: string
    supervisorId?: string | null
    gradeId: number
    Announcement?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    exams?: ExamUncheckedCreateNestedManyWithoutClassInput
    homeworks?: HomeworkUncheckedCreateNestedManyWithoutClassInput
    lessons?: LessonUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutAttendanceInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutAttendanceInput, ClassUncheckedCreateWithoutAttendanceInput>
  }

  export type StudentCreateWithoutAttendanceInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    parentName: string
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    dob: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    clerk_id?: string | null
    academicYear?: $Enums.AcademicYear
    clerkStudent?: ClerkStudentsCreateNestedOneWithoutStudentInput
    feeTransactions?: FeeTransactionCreateNestedManyWithoutStudentInput
    results?: ResultCreateNestedManyWithoutStudentInput
    Class: ClassCreateNestedOneWithoutStudentsInput
    studentFees?: StudentFeesCreateNestedManyWithoutStudentInput
    totalFees?: StudentTotalFeesCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutAttendanceInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    parentName: string
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    dob: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    classId: number
    clerk_id?: string | null
    academicYear?: $Enums.AcademicYear
    clerkStudent?: ClerkStudentsUncheckedCreateNestedOneWithoutStudentInput
    feeTransactions?: FeeTransactionUncheckedCreateNestedManyWithoutStudentInput
    results?: ResultUncheckedCreateNestedManyWithoutStudentInput
    studentFees?: StudentFeesUncheckedCreateNestedManyWithoutStudentInput
    totalFees?: StudentTotalFeesUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutAttendanceInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutAttendanceInput, StudentUncheckedCreateWithoutAttendanceInput>
  }

  export type ClassUpsertWithoutAttendanceInput = {
    update: XOR<ClassUpdateWithoutAttendanceInput, ClassUncheckedUpdateWithoutAttendanceInput>
    create: XOR<ClassCreateWithoutAttendanceInput, ClassUncheckedCreateWithoutAttendanceInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutAttendanceInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutAttendanceInput, ClassUncheckedUpdateWithoutAttendanceInput>
  }

  export type ClassUpdateWithoutAttendanceInput = {
    name?: StringFieldUpdateOperationsInput | string
    Announcement?: AnnouncementUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    exams?: ExamUpdateManyWithoutClassNestedInput
    homeworks?: HomeworkUpdateManyWithoutClassNestedInput
    lessons?: LessonUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    Grade?: GradeUpdateOneRequiredWithoutClassesNestedInput
    Teacher?: TeacherUpdateOneWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutAttendanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: IntFieldUpdateOperationsInput | number
    Announcement?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    exams?: ExamUncheckedUpdateManyWithoutClassNestedInput
    homeworks?: HomeworkUncheckedUpdateManyWithoutClassNestedInput
    lessons?: LessonUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
  }

  export type StudentUpsertWithoutAttendanceInput = {
    update: XOR<StudentUpdateWithoutAttendanceInput, StudentUncheckedUpdateWithoutAttendanceInput>
    create: XOR<StudentCreateWithoutAttendanceInput, StudentUncheckedCreateWithoutAttendanceInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutAttendanceInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutAttendanceInput, StudentUncheckedUpdateWithoutAttendanceInput>
  }

  export type StudentUpdateWithoutAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    clerkStudent?: ClerkStudentsUpdateOneWithoutStudentNestedInput
    feeTransactions?: FeeTransactionUpdateManyWithoutStudentNestedInput
    results?: ResultUpdateManyWithoutStudentNestedInput
    Class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    studentFees?: StudentFeesUpdateManyWithoutStudentNestedInput
    totalFees?: StudentTotalFeesUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: IntFieldUpdateOperationsInput | number
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    clerkStudent?: ClerkStudentsUncheckedUpdateOneWithoutStudentNestedInput
    feeTransactions?: FeeTransactionUncheckedUpdateManyWithoutStudentNestedInput
    results?: ResultUncheckedUpdateManyWithoutStudentNestedInput
    studentFees?: StudentFeesUncheckedUpdateManyWithoutStudentNestedInput
    totalFees?: StudentTotalFeesUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type ClassCreateWithoutEventsInput = {
    name: string
    Announcement?: AnnouncementCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
    exams?: ExamCreateNestedManyWithoutClassInput
    homeworks?: HomeworkCreateNestedManyWithoutClassInput
    lessons?: LessonCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassInput
    Grade: GradeCreateNestedOneWithoutClassesInput
    Teacher?: TeacherCreateNestedOneWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutEventsInput = {
    id?: number
    name: string
    supervisorId?: string | null
    gradeId: number
    Announcement?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
    exams?: ExamUncheckedCreateNestedManyWithoutClassInput
    homeworks?: HomeworkUncheckedCreateNestedManyWithoutClassInput
    lessons?: LessonUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutEventsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutEventsInput, ClassUncheckedCreateWithoutEventsInput>
  }

  export type ClassUpsertWithoutEventsInput = {
    update: XOR<ClassUpdateWithoutEventsInput, ClassUncheckedUpdateWithoutEventsInput>
    create: XOR<ClassCreateWithoutEventsInput, ClassUncheckedCreateWithoutEventsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutEventsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutEventsInput, ClassUncheckedUpdateWithoutEventsInput>
  }

  export type ClassUpdateWithoutEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    Announcement?: AnnouncementUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
    exams?: ExamUpdateManyWithoutClassNestedInput
    homeworks?: HomeworkUpdateManyWithoutClassNestedInput
    lessons?: LessonUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    Grade?: GradeUpdateOneRequiredWithoutClassesNestedInput
    Teacher?: TeacherUpdateOneWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: IntFieldUpdateOperationsInput | number
    Announcement?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
    exams?: ExamUncheckedUpdateManyWithoutClassNestedInput
    homeworks?: HomeworkUncheckedUpdateManyWithoutClassNestedInput
    lessons?: LessonUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassCreateWithoutExamsInput = {
    name: string
    Announcement?: AnnouncementCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    homeworks?: HomeworkCreateNestedManyWithoutClassInput
    lessons?: LessonCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassInput
    Grade: GradeCreateNestedOneWithoutClassesInput
    Teacher?: TeacherCreateNestedOneWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutExamsInput = {
    id?: number
    name: string
    supervisorId?: string | null
    gradeId: number
    Announcement?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    homeworks?: HomeworkUncheckedCreateNestedManyWithoutClassInput
    lessons?: LessonUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutExamsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutExamsInput, ClassUncheckedCreateWithoutExamsInput>
  }

  export type ExamSubjectCreateWithoutExamInput = {
    maxMarks: number
    Subject: SubjectCreateNestedOneWithoutExamsInput
  }

  export type ExamSubjectUncheckedCreateWithoutExamInput = {
    id?: number
    subjectId: number
    maxMarks: number
  }

  export type ExamSubjectCreateOrConnectWithoutExamInput = {
    where: ExamSubjectWhereUniqueInput
    create: XOR<ExamSubjectCreateWithoutExamInput, ExamSubjectUncheckedCreateWithoutExamInput>
  }

  export type ExamSubjectCreateManyExamInputEnvelope = {
    data: ExamSubjectCreateManyExamInput | ExamSubjectCreateManyExamInput[]
    skipDuplicates?: boolean
  }

  export type ResultCreateWithoutExamInput = {
    score: number
    Student: StudentCreateNestedOneWithoutResultsInput
    Subject: SubjectCreateNestedOneWithoutResultsInput
  }

  export type ResultUncheckedCreateWithoutExamInput = {
    id?: number
    score: number
    studentId: string
    subjectId: number
  }

  export type ResultCreateOrConnectWithoutExamInput = {
    where: ResultWhereUniqueInput
    create: XOR<ResultCreateWithoutExamInput, ResultUncheckedCreateWithoutExamInput>
  }

  export type ResultCreateManyExamInputEnvelope = {
    data: ResultCreateManyExamInput | ResultCreateManyExamInput[]
    skipDuplicates?: boolean
  }

  export type ClassUpsertWithoutExamsInput = {
    update: XOR<ClassUpdateWithoutExamsInput, ClassUncheckedUpdateWithoutExamsInput>
    create: XOR<ClassCreateWithoutExamsInput, ClassUncheckedCreateWithoutExamsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutExamsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutExamsInput, ClassUncheckedUpdateWithoutExamsInput>
  }

  export type ClassUpdateWithoutExamsInput = {
    name?: StringFieldUpdateOperationsInput | string
    Announcement?: AnnouncementUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    homeworks?: HomeworkUpdateManyWithoutClassNestedInput
    lessons?: LessonUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    Grade?: GradeUpdateOneRequiredWithoutClassesNestedInput
    Teacher?: TeacherUpdateOneWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutExamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: IntFieldUpdateOperationsInput | number
    Announcement?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    homeworks?: HomeworkUncheckedUpdateManyWithoutClassNestedInput
    lessons?: LessonUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ExamSubjectUpsertWithWhereUniqueWithoutExamInput = {
    where: ExamSubjectWhereUniqueInput
    update: XOR<ExamSubjectUpdateWithoutExamInput, ExamSubjectUncheckedUpdateWithoutExamInput>
    create: XOR<ExamSubjectCreateWithoutExamInput, ExamSubjectUncheckedCreateWithoutExamInput>
  }

  export type ExamSubjectUpdateWithWhereUniqueWithoutExamInput = {
    where: ExamSubjectWhereUniqueInput
    data: XOR<ExamSubjectUpdateWithoutExamInput, ExamSubjectUncheckedUpdateWithoutExamInput>
  }

  export type ExamSubjectUpdateManyWithWhereWithoutExamInput = {
    where: ExamSubjectScalarWhereInput
    data: XOR<ExamSubjectUpdateManyMutationInput, ExamSubjectUncheckedUpdateManyWithoutExamInput>
  }

  export type ExamSubjectScalarWhereInput = {
    AND?: ExamSubjectScalarWhereInput | ExamSubjectScalarWhereInput[]
    OR?: ExamSubjectScalarWhereInput[]
    NOT?: ExamSubjectScalarWhereInput | ExamSubjectScalarWhereInput[]
    id?: IntFilter<"ExamSubject"> | number
    examId?: IntFilter<"ExamSubject"> | number
    subjectId?: IntFilter<"ExamSubject"> | number
    maxMarks?: IntFilter<"ExamSubject"> | number
  }

  export type ResultUpsertWithWhereUniqueWithoutExamInput = {
    where: ResultWhereUniqueInput
    update: XOR<ResultUpdateWithoutExamInput, ResultUncheckedUpdateWithoutExamInput>
    create: XOR<ResultCreateWithoutExamInput, ResultUncheckedCreateWithoutExamInput>
  }

  export type ResultUpdateWithWhereUniqueWithoutExamInput = {
    where: ResultWhereUniqueInput
    data: XOR<ResultUpdateWithoutExamInput, ResultUncheckedUpdateWithoutExamInput>
  }

  export type ResultUpdateManyWithWhereWithoutExamInput = {
    where: ResultScalarWhereInput
    data: XOR<ResultUpdateManyMutationInput, ResultUncheckedUpdateManyWithoutExamInput>
  }

  export type ResultScalarWhereInput = {
    AND?: ResultScalarWhereInput | ResultScalarWhereInput[]
    OR?: ResultScalarWhereInput[]
    NOT?: ResultScalarWhereInput | ResultScalarWhereInput[]
    id?: IntFilter<"Result"> | number
    score?: FloatFilter<"Result"> | number
    studentId?: StringFilter<"Result"> | string
    examId?: IntFilter<"Result"> | number
    subjectId?: IntFilter<"Result"> | number
  }

  export type ExamCreateWithoutSubjectsInput = {
    title: string
    date: Date | string
    Class: ClassCreateNestedOneWithoutExamsInput
    results?: ResultCreateNestedManyWithoutExamInput
  }

  export type ExamUncheckedCreateWithoutSubjectsInput = {
    id?: number
    title: string
    date: Date | string
    classId: number
    results?: ResultUncheckedCreateNestedManyWithoutExamInput
  }

  export type ExamCreateOrConnectWithoutSubjectsInput = {
    where: ExamWhereUniqueInput
    create: XOR<ExamCreateWithoutSubjectsInput, ExamUncheckedCreateWithoutSubjectsInput>
  }

  export type SubjectCreateWithoutExamsInput = {
    name: string
    createdAt?: Date | string
    lessons?: LessonCreateNestedManyWithoutSubjectInput
    results?: ResultCreateNestedManyWithoutSubjectInput
    teachers?: TeacherSubjectCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutExamsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    lessons?: LessonUncheckedCreateNestedManyWithoutSubjectInput
    results?: ResultUncheckedCreateNestedManyWithoutSubjectInput
    teachers?: TeacherSubjectUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutExamsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutExamsInput, SubjectUncheckedCreateWithoutExamsInput>
  }

  export type ExamUpsertWithoutSubjectsInput = {
    update: XOR<ExamUpdateWithoutSubjectsInput, ExamUncheckedUpdateWithoutSubjectsInput>
    create: XOR<ExamCreateWithoutSubjectsInput, ExamUncheckedCreateWithoutSubjectsInput>
    where?: ExamWhereInput
  }

  export type ExamUpdateToOneWithWhereWithoutSubjectsInput = {
    where?: ExamWhereInput
    data: XOR<ExamUpdateWithoutSubjectsInput, ExamUncheckedUpdateWithoutSubjectsInput>
  }

  export type ExamUpdateWithoutSubjectsInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    Class?: ClassUpdateOneRequiredWithoutExamsNestedInput
    results?: ResultUpdateManyWithoutExamNestedInput
  }

  export type ExamUncheckedUpdateWithoutSubjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: IntFieldUpdateOperationsInput | number
    results?: ResultUncheckedUpdateManyWithoutExamNestedInput
  }

  export type SubjectUpsertWithoutExamsInput = {
    update: XOR<SubjectUpdateWithoutExamsInput, SubjectUncheckedUpdateWithoutExamsInput>
    create: XOR<SubjectCreateWithoutExamsInput, SubjectUncheckedCreateWithoutExamsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutExamsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutExamsInput, SubjectUncheckedUpdateWithoutExamsInput>
  }

  export type SubjectUpdateWithoutExamsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lessons?: LessonUpdateManyWithoutSubjectNestedInput
    results?: ResultUpdateManyWithoutSubjectNestedInput
    teachers?: TeacherSubjectUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutExamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lessons?: LessonUncheckedUpdateManyWithoutSubjectNestedInput
    results?: ResultUncheckedUpdateManyWithoutSubjectNestedInput
    teachers?: TeacherSubjectUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type ClassCreateWithoutHomeworksInput = {
    name: string
    Announcement?: AnnouncementCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    exams?: ExamCreateNestedManyWithoutClassInput
    lessons?: LessonCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassInput
    Grade: GradeCreateNestedOneWithoutClassesInput
    Teacher?: TeacherCreateNestedOneWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutHomeworksInput = {
    id?: number
    name: string
    supervisorId?: string | null
    gradeId: number
    Announcement?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    exams?: ExamUncheckedCreateNestedManyWithoutClassInput
    lessons?: LessonUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutHomeworksInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutHomeworksInput, ClassUncheckedCreateWithoutHomeworksInput>
  }

  export type GradeCreateWithoutHomeworkInput = {
    level: string
    feestructure?: FeeStructureCreateNestedManyWithoutGradeInput
    classes?: ClassCreateNestedManyWithoutGradeInput
  }

  export type GradeUncheckedCreateWithoutHomeworkInput = {
    id?: number
    level: string
    feestructure?: FeeStructureUncheckedCreateNestedManyWithoutGradeInput
    classes?: ClassUncheckedCreateNestedManyWithoutGradeInput
  }

  export type GradeCreateOrConnectWithoutHomeworkInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutHomeworkInput, GradeUncheckedCreateWithoutHomeworkInput>
  }

  export type ClassUpsertWithoutHomeworksInput = {
    update: XOR<ClassUpdateWithoutHomeworksInput, ClassUncheckedUpdateWithoutHomeworksInput>
    create: XOR<ClassCreateWithoutHomeworksInput, ClassUncheckedCreateWithoutHomeworksInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutHomeworksInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutHomeworksInput, ClassUncheckedUpdateWithoutHomeworksInput>
  }

  export type ClassUpdateWithoutHomeworksInput = {
    name?: StringFieldUpdateOperationsInput | string
    Announcement?: AnnouncementUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    exams?: ExamUpdateManyWithoutClassNestedInput
    lessons?: LessonUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    Grade?: GradeUpdateOneRequiredWithoutClassesNestedInput
    Teacher?: TeacherUpdateOneWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutHomeworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: IntFieldUpdateOperationsInput | number
    Announcement?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    exams?: ExamUncheckedUpdateManyWithoutClassNestedInput
    lessons?: LessonUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
  }

  export type GradeUpsertWithoutHomeworkInput = {
    update: XOR<GradeUpdateWithoutHomeworkInput, GradeUncheckedUpdateWithoutHomeworkInput>
    create: XOR<GradeCreateWithoutHomeworkInput, GradeUncheckedCreateWithoutHomeworkInput>
    where?: GradeWhereInput
  }

  export type GradeUpdateToOneWithWhereWithoutHomeworkInput = {
    where?: GradeWhereInput
    data: XOR<GradeUpdateWithoutHomeworkInput, GradeUncheckedUpdateWithoutHomeworkInput>
  }

  export type GradeUpdateWithoutHomeworkInput = {
    level?: StringFieldUpdateOperationsInput | string
    feestructure?: FeeStructureUpdateManyWithoutGradeNestedInput
    classes?: ClassUpdateManyWithoutGradeNestedInput
  }

  export type GradeUncheckedUpdateWithoutHomeworkInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    feestructure?: FeeStructureUncheckedUpdateManyWithoutGradeNestedInput
    classes?: ClassUncheckedUpdateManyWithoutGradeNestedInput
  }

  export type ExamCreateWithoutResultsInput = {
    title: string
    date: Date | string
    Class: ClassCreateNestedOneWithoutExamsInput
    subjects?: ExamSubjectCreateNestedManyWithoutExamInput
  }

  export type ExamUncheckedCreateWithoutResultsInput = {
    id?: number
    title: string
    date: Date | string
    classId: number
    subjects?: ExamSubjectUncheckedCreateNestedManyWithoutExamInput
  }

  export type ExamCreateOrConnectWithoutResultsInput = {
    where: ExamWhereUniqueInput
    create: XOR<ExamCreateWithoutResultsInput, ExamUncheckedCreateWithoutResultsInput>
  }

  export type StudentCreateWithoutResultsInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    parentName: string
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    dob: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    clerk_id?: string | null
    academicYear?: $Enums.AcademicYear
    Attendance?: AttendanceCreateNestedManyWithoutStudentInput
    clerkStudent?: ClerkStudentsCreateNestedOneWithoutStudentInput
    feeTransactions?: FeeTransactionCreateNestedManyWithoutStudentInput
    Class: ClassCreateNestedOneWithoutStudentsInput
    studentFees?: StudentFeesCreateNestedManyWithoutStudentInput
    totalFees?: StudentTotalFeesCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutResultsInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    parentName: string
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    dob: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    classId: number
    clerk_id?: string | null
    academicYear?: $Enums.AcademicYear
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    clerkStudent?: ClerkStudentsUncheckedCreateNestedOneWithoutStudentInput
    feeTransactions?: FeeTransactionUncheckedCreateNestedManyWithoutStudentInput
    studentFees?: StudentFeesUncheckedCreateNestedManyWithoutStudentInput
    totalFees?: StudentTotalFeesUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutResultsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutResultsInput, StudentUncheckedCreateWithoutResultsInput>
  }

  export type SubjectCreateWithoutResultsInput = {
    name: string
    createdAt?: Date | string
    exams?: ExamSubjectCreateNestedManyWithoutSubjectInput
    lessons?: LessonCreateNestedManyWithoutSubjectInput
    teachers?: TeacherSubjectCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutResultsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    exams?: ExamSubjectUncheckedCreateNestedManyWithoutSubjectInput
    lessons?: LessonUncheckedCreateNestedManyWithoutSubjectInput
    teachers?: TeacherSubjectUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutResultsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutResultsInput, SubjectUncheckedCreateWithoutResultsInput>
  }

  export type ExamUpsertWithoutResultsInput = {
    update: XOR<ExamUpdateWithoutResultsInput, ExamUncheckedUpdateWithoutResultsInput>
    create: XOR<ExamCreateWithoutResultsInput, ExamUncheckedCreateWithoutResultsInput>
    where?: ExamWhereInput
  }

  export type ExamUpdateToOneWithWhereWithoutResultsInput = {
    where?: ExamWhereInput
    data: XOR<ExamUpdateWithoutResultsInput, ExamUncheckedUpdateWithoutResultsInput>
  }

  export type ExamUpdateWithoutResultsInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    Class?: ClassUpdateOneRequiredWithoutExamsNestedInput
    subjects?: ExamSubjectUpdateManyWithoutExamNestedInput
  }

  export type ExamUncheckedUpdateWithoutResultsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: IntFieldUpdateOperationsInput | number
    subjects?: ExamSubjectUncheckedUpdateManyWithoutExamNestedInput
  }

  export type StudentUpsertWithoutResultsInput = {
    update: XOR<StudentUpdateWithoutResultsInput, StudentUncheckedUpdateWithoutResultsInput>
    create: XOR<StudentCreateWithoutResultsInput, StudentUncheckedCreateWithoutResultsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutResultsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutResultsInput, StudentUncheckedUpdateWithoutResultsInput>
  }

  export type StudentUpdateWithoutResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    Attendance?: AttendanceUpdateManyWithoutStudentNestedInput
    clerkStudent?: ClerkStudentsUpdateOneWithoutStudentNestedInput
    feeTransactions?: FeeTransactionUpdateManyWithoutStudentNestedInput
    Class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    studentFees?: StudentFeesUpdateManyWithoutStudentNestedInput
    totalFees?: StudentTotalFeesUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: IntFieldUpdateOperationsInput | number
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    Attendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    clerkStudent?: ClerkStudentsUncheckedUpdateOneWithoutStudentNestedInput
    feeTransactions?: FeeTransactionUncheckedUpdateManyWithoutStudentNestedInput
    studentFees?: StudentFeesUncheckedUpdateManyWithoutStudentNestedInput
    totalFees?: StudentTotalFeesUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type SubjectUpsertWithoutResultsInput = {
    update: XOR<SubjectUpdateWithoutResultsInput, SubjectUncheckedUpdateWithoutResultsInput>
    create: XOR<SubjectCreateWithoutResultsInput, SubjectUncheckedCreateWithoutResultsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutResultsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutResultsInput, SubjectUncheckedUpdateWithoutResultsInput>
  }

  export type SubjectUpdateWithoutResultsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exams?: ExamSubjectUpdateManyWithoutSubjectNestedInput
    lessons?: LessonUpdateManyWithoutSubjectNestedInput
    teachers?: TeacherSubjectUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutResultsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exams?: ExamSubjectUncheckedUpdateManyWithoutSubjectNestedInput
    lessons?: LessonUncheckedUpdateManyWithoutSubjectNestedInput
    teachers?: TeacherSubjectUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type AttendanceCreateWithoutStudentInput = {
    date: Date | string
    present: boolean
    class: ClassCreateNestedOneWithoutAttendanceInput
  }

  export type AttendanceUncheckedCreateWithoutStudentInput = {
    id?: number
    date: Date | string
    present: boolean
    classId: number
  }

  export type AttendanceCreateOrConnectWithoutStudentInput = {
    where: AttendanceWhereUniqueInput
    create: XOR<AttendanceCreateWithoutStudentInput, AttendanceUncheckedCreateWithoutStudentInput>
  }

  export type AttendanceCreateManyStudentInputEnvelope = {
    data: AttendanceCreateManyStudentInput | AttendanceCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type ClerkStudentsCreateWithoutStudentInput = {
    clerk_id: string
    user_id?: string | null
    username: string
    password: string
    full_name: string
    role?: string
  }

  export type ClerkStudentsUncheckedCreateWithoutStudentInput = {
    clerk_id: string
    user_id?: string | null
    username: string
    password: string
    full_name: string
    role?: string
  }

  export type ClerkStudentsCreateOrConnectWithoutStudentInput = {
    where: ClerkStudentsWhereUniqueInput
    create: XOR<ClerkStudentsCreateWithoutStudentInput, ClerkStudentsUncheckedCreateWithoutStudentInput>
  }

  export type FeeTransactionCreateWithoutStudentInput = {
    term: string
    amount?: number
    discountAmount?: number
    fineAmount?: number
    receiptDate: Date | string
    receiptNo: string
    paymentMode?: $Enums.PaymentMode
    createdAt?: Date | string
    updatedAt?: Date | string
    remarks?: string | null
    studentFees: StudentFeesCreateNestedOneWithoutFeeTransactionsInput
  }

  export type FeeTransactionUncheckedCreateWithoutStudentInput = {
    id?: number
    term: string
    studentFeesId: number
    amount?: number
    discountAmount?: number
    fineAmount?: number
    receiptDate: Date | string
    receiptNo: string
    paymentMode?: $Enums.PaymentMode
    createdAt?: Date | string
    updatedAt?: Date | string
    remarks?: string | null
  }

  export type FeeTransactionCreateOrConnectWithoutStudentInput = {
    where: FeeTransactionWhereUniqueInput
    create: XOR<FeeTransactionCreateWithoutStudentInput, FeeTransactionUncheckedCreateWithoutStudentInput>
  }

  export type FeeTransactionCreateManyStudentInputEnvelope = {
    data: FeeTransactionCreateManyStudentInput | FeeTransactionCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type ResultCreateWithoutStudentInput = {
    score: number
    Exam: ExamCreateNestedOneWithoutResultsInput
    Subject: SubjectCreateNestedOneWithoutResultsInput
  }

  export type ResultUncheckedCreateWithoutStudentInput = {
    id?: number
    score: number
    examId: number
    subjectId: number
  }

  export type ResultCreateOrConnectWithoutStudentInput = {
    where: ResultWhereUniqueInput
    create: XOR<ResultCreateWithoutStudentInput, ResultUncheckedCreateWithoutStudentInput>
  }

  export type ResultCreateManyStudentInputEnvelope = {
    data: ResultCreateManyStudentInput | ResultCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type ClassCreateWithoutStudentsInput = {
    name: string
    Announcement?: AnnouncementCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    exams?: ExamCreateNestedManyWithoutClassInput
    homeworks?: HomeworkCreateNestedManyWithoutClassInput
    lessons?: LessonCreateNestedManyWithoutClassInput
    Grade: GradeCreateNestedOneWithoutClassesInput
    Teacher?: TeacherCreateNestedOneWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutStudentsInput = {
    id?: number
    name: string
    supervisorId?: string | null
    gradeId: number
    Announcement?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    exams?: ExamUncheckedCreateNestedManyWithoutClassInput
    homeworks?: HomeworkUncheckedCreateNestedManyWithoutClassInput
    lessons?: LessonUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutStudentsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
  }

  export type StudentFeesCreateWithoutStudentInput = {
    paidAmount?: number
    abacusPaidAmount?: number | null
    discountAmount?: number
    fineAmount?: number
    receiptDate?: Date | string | null
    receivedDate?: Date | string | null
    paymentMode?: $Enums.PaymentMode
    academicYear?: $Enums.AcademicYear
    receiptNo?: string | null
    term: string
    remarks?: string | null
    feeTransactions?: FeeTransactionCreateNestedManyWithoutStudentFeesInput
    feeStructure: FeeStructureCreateNestedOneWithoutStudentFeesInput
  }

  export type StudentFeesUncheckedCreateWithoutStudentInput = {
    id?: number
    paidAmount?: number
    abacusPaidAmount?: number | null
    feeStructureId: number
    discountAmount?: number
    fineAmount?: number
    receiptDate?: Date | string | null
    receivedDate?: Date | string | null
    paymentMode?: $Enums.PaymentMode
    academicYear?: $Enums.AcademicYear
    receiptNo?: string | null
    term: string
    remarks?: string | null
    feeTransactions?: FeeTransactionUncheckedCreateNestedManyWithoutStudentFeesInput
  }

  export type StudentFeesCreateOrConnectWithoutStudentInput = {
    where: StudentFeesWhereUniqueInput
    create: XOR<StudentFeesCreateWithoutStudentInput, StudentFeesUncheckedCreateWithoutStudentInput>
  }

  export type StudentFeesCreateManyStudentInputEnvelope = {
    data: StudentFeesCreateManyStudentInput | StudentFeesCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type StudentTotalFeesCreateWithoutStudentInput = {
    totalPaidAmount?: number
    totalDiscountAmount?: number
    totalFineAmount?: number
    totalAbacusAmount?: number
    totalFeeAmount?: number
    dueAmount?: number
    status?: string
  }

  export type StudentTotalFeesUncheckedCreateWithoutStudentInput = {
    id?: number
    totalPaidAmount?: number
    totalDiscountAmount?: number
    totalFineAmount?: number
    totalAbacusAmount?: number
    totalFeeAmount?: number
    dueAmount?: number
    status?: string
  }

  export type StudentTotalFeesCreateOrConnectWithoutStudentInput = {
    where: StudentTotalFeesWhereUniqueInput
    create: XOR<StudentTotalFeesCreateWithoutStudentInput, StudentTotalFeesUncheckedCreateWithoutStudentInput>
  }

  export type StudentTotalFeesCreateManyStudentInputEnvelope = {
    data: StudentTotalFeesCreateManyStudentInput | StudentTotalFeesCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceUpsertWithWhereUniqueWithoutStudentInput = {
    where: AttendanceWhereUniqueInput
    update: XOR<AttendanceUpdateWithoutStudentInput, AttendanceUncheckedUpdateWithoutStudentInput>
    create: XOR<AttendanceCreateWithoutStudentInput, AttendanceUncheckedCreateWithoutStudentInput>
  }

  export type AttendanceUpdateWithWhereUniqueWithoutStudentInput = {
    where: AttendanceWhereUniqueInput
    data: XOR<AttendanceUpdateWithoutStudentInput, AttendanceUncheckedUpdateWithoutStudentInput>
  }

  export type AttendanceUpdateManyWithWhereWithoutStudentInput = {
    where: AttendanceScalarWhereInput
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyWithoutStudentInput>
  }

  export type ClerkStudentsUpsertWithoutStudentInput = {
    update: XOR<ClerkStudentsUpdateWithoutStudentInput, ClerkStudentsUncheckedUpdateWithoutStudentInput>
    create: XOR<ClerkStudentsCreateWithoutStudentInput, ClerkStudentsUncheckedCreateWithoutStudentInput>
    where?: ClerkStudentsWhereInput
  }

  export type ClerkStudentsUpdateToOneWithWhereWithoutStudentInput = {
    where?: ClerkStudentsWhereInput
    data: XOR<ClerkStudentsUpdateWithoutStudentInput, ClerkStudentsUncheckedUpdateWithoutStudentInput>
  }

  export type ClerkStudentsUpdateWithoutStudentInput = {
    clerk_id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type ClerkStudentsUncheckedUpdateWithoutStudentInput = {
    clerk_id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type FeeTransactionUpsertWithWhereUniqueWithoutStudentInput = {
    where: FeeTransactionWhereUniqueInput
    update: XOR<FeeTransactionUpdateWithoutStudentInput, FeeTransactionUncheckedUpdateWithoutStudentInput>
    create: XOR<FeeTransactionCreateWithoutStudentInput, FeeTransactionUncheckedCreateWithoutStudentInput>
  }

  export type FeeTransactionUpdateWithWhereUniqueWithoutStudentInput = {
    where: FeeTransactionWhereUniqueInput
    data: XOR<FeeTransactionUpdateWithoutStudentInput, FeeTransactionUncheckedUpdateWithoutStudentInput>
  }

  export type FeeTransactionUpdateManyWithWhereWithoutStudentInput = {
    where: FeeTransactionScalarWhereInput
    data: XOR<FeeTransactionUpdateManyMutationInput, FeeTransactionUncheckedUpdateManyWithoutStudentInput>
  }

  export type FeeTransactionScalarWhereInput = {
    AND?: FeeTransactionScalarWhereInput | FeeTransactionScalarWhereInput[]
    OR?: FeeTransactionScalarWhereInput[]
    NOT?: FeeTransactionScalarWhereInput | FeeTransactionScalarWhereInput[]
    id?: IntFilter<"FeeTransaction"> | number
    studentId?: StringFilter<"FeeTransaction"> | string
    term?: StringFilter<"FeeTransaction"> | string
    studentFeesId?: IntFilter<"FeeTransaction"> | number
    amount?: FloatFilter<"FeeTransaction"> | number
    discountAmount?: FloatFilter<"FeeTransaction"> | number
    fineAmount?: FloatFilter<"FeeTransaction"> | number
    receiptDate?: DateTimeFilter<"FeeTransaction"> | Date | string
    receiptNo?: StringFilter<"FeeTransaction"> | string
    paymentMode?: EnumPaymentModeFilter<"FeeTransaction"> | $Enums.PaymentMode
    createdAt?: DateTimeFilter<"FeeTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"FeeTransaction"> | Date | string
    remarks?: StringNullableFilter<"FeeTransaction"> | string | null
  }

  export type ResultUpsertWithWhereUniqueWithoutStudentInput = {
    where: ResultWhereUniqueInput
    update: XOR<ResultUpdateWithoutStudentInput, ResultUncheckedUpdateWithoutStudentInput>
    create: XOR<ResultCreateWithoutStudentInput, ResultUncheckedCreateWithoutStudentInput>
  }

  export type ResultUpdateWithWhereUniqueWithoutStudentInput = {
    where: ResultWhereUniqueInput
    data: XOR<ResultUpdateWithoutStudentInput, ResultUncheckedUpdateWithoutStudentInput>
  }

  export type ResultUpdateManyWithWhereWithoutStudentInput = {
    where: ResultScalarWhereInput
    data: XOR<ResultUpdateManyMutationInput, ResultUncheckedUpdateManyWithoutStudentInput>
  }

  export type ClassUpsertWithoutStudentsInput = {
    update: XOR<ClassUpdateWithoutStudentsInput, ClassUncheckedUpdateWithoutStudentsInput>
    create: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutStudentsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutStudentsInput, ClassUncheckedUpdateWithoutStudentsInput>
  }

  export type ClassUpdateWithoutStudentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    Announcement?: AnnouncementUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    exams?: ExamUpdateManyWithoutClassNestedInput
    homeworks?: HomeworkUpdateManyWithoutClassNestedInput
    lessons?: LessonUpdateManyWithoutClassNestedInput
    Grade?: GradeUpdateOneRequiredWithoutClassesNestedInput
    Teacher?: TeacherUpdateOneWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: IntFieldUpdateOperationsInput | number
    Announcement?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    exams?: ExamUncheckedUpdateManyWithoutClassNestedInput
    homeworks?: HomeworkUncheckedUpdateManyWithoutClassNestedInput
    lessons?: LessonUncheckedUpdateManyWithoutClassNestedInput
  }

  export type StudentFeesUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentFeesWhereUniqueInput
    update: XOR<StudentFeesUpdateWithoutStudentInput, StudentFeesUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentFeesCreateWithoutStudentInput, StudentFeesUncheckedCreateWithoutStudentInput>
  }

  export type StudentFeesUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentFeesWhereUniqueInput
    data: XOR<StudentFeesUpdateWithoutStudentInput, StudentFeesUncheckedUpdateWithoutStudentInput>
  }

  export type StudentFeesUpdateManyWithWhereWithoutStudentInput = {
    where: StudentFeesScalarWhereInput
    data: XOR<StudentFeesUpdateManyMutationInput, StudentFeesUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentFeesScalarWhereInput = {
    AND?: StudentFeesScalarWhereInput | StudentFeesScalarWhereInput[]
    OR?: StudentFeesScalarWhereInput[]
    NOT?: StudentFeesScalarWhereInput | StudentFeesScalarWhereInput[]
    id?: IntFilter<"StudentFees"> | number
    studentId?: StringFilter<"StudentFees"> | string
    paidAmount?: IntFilter<"StudentFees"> | number
    abacusPaidAmount?: IntNullableFilter<"StudentFees"> | number | null
    feeStructureId?: IntFilter<"StudentFees"> | number
    discountAmount?: IntFilter<"StudentFees"> | number
    fineAmount?: IntFilter<"StudentFees"> | number
    receiptDate?: DateTimeNullableFilter<"StudentFees"> | Date | string | null
    receivedDate?: DateTimeNullableFilter<"StudentFees"> | Date | string | null
    paymentMode?: EnumPaymentModeFilter<"StudentFees"> | $Enums.PaymentMode
    academicYear?: EnumAcademicYearFilter<"StudentFees"> | $Enums.AcademicYear
    receiptNo?: StringNullableFilter<"StudentFees"> | string | null
    term?: StringFilter<"StudentFees"> | string
    remarks?: StringNullableFilter<"StudentFees"> | string | null
  }

  export type StudentTotalFeesUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentTotalFeesWhereUniqueInput
    update: XOR<StudentTotalFeesUpdateWithoutStudentInput, StudentTotalFeesUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentTotalFeesCreateWithoutStudentInput, StudentTotalFeesUncheckedCreateWithoutStudentInput>
  }

  export type StudentTotalFeesUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentTotalFeesWhereUniqueInput
    data: XOR<StudentTotalFeesUpdateWithoutStudentInput, StudentTotalFeesUncheckedUpdateWithoutStudentInput>
  }

  export type StudentTotalFeesUpdateManyWithWhereWithoutStudentInput = {
    where: StudentTotalFeesScalarWhereInput
    data: XOR<StudentTotalFeesUpdateManyMutationInput, StudentTotalFeesUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentTotalFeesScalarWhereInput = {
    AND?: StudentTotalFeesScalarWhereInput | StudentTotalFeesScalarWhereInput[]
    OR?: StudentTotalFeesScalarWhereInput[]
    NOT?: StudentTotalFeesScalarWhereInput | StudentTotalFeesScalarWhereInput[]
    id?: IntFilter<"StudentTotalFees"> | number
    studentId?: StringFilter<"StudentTotalFees"> | string
    totalPaidAmount?: FloatFilter<"StudentTotalFees"> | number
    totalDiscountAmount?: FloatFilter<"StudentTotalFees"> | number
    totalFineAmount?: FloatFilter<"StudentTotalFees"> | number
    totalAbacusAmount?: FloatFilter<"StudentTotalFees"> | number
    totalFeeAmount?: FloatFilter<"StudentTotalFees"> | number
    dueAmount?: FloatFilter<"StudentTotalFees"> | number
    status?: StringFilter<"StudentTotalFees"> | string
  }

  export type StudentCreateWithoutClerkStudentInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    parentName: string
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    dob: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    clerk_id?: string | null
    academicYear?: $Enums.AcademicYear
    Attendance?: AttendanceCreateNestedManyWithoutStudentInput
    feeTransactions?: FeeTransactionCreateNestedManyWithoutStudentInput
    results?: ResultCreateNestedManyWithoutStudentInput
    Class: ClassCreateNestedOneWithoutStudentsInput
    studentFees?: StudentFeesCreateNestedManyWithoutStudentInput
    totalFees?: StudentTotalFeesCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutClerkStudentInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    parentName: string
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    dob: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    classId: number
    clerk_id?: string | null
    academicYear?: $Enums.AcademicYear
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    feeTransactions?: FeeTransactionUncheckedCreateNestedManyWithoutStudentInput
    results?: ResultUncheckedCreateNestedManyWithoutStudentInput
    studentFees?: StudentFeesUncheckedCreateNestedManyWithoutStudentInput
    totalFees?: StudentTotalFeesUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutClerkStudentInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutClerkStudentInput, StudentUncheckedCreateWithoutClerkStudentInput>
  }

  export type StudentUpsertWithoutClerkStudentInput = {
    update: XOR<StudentUpdateWithoutClerkStudentInput, StudentUncheckedUpdateWithoutClerkStudentInput>
    create: XOR<StudentCreateWithoutClerkStudentInput, StudentUncheckedCreateWithoutClerkStudentInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutClerkStudentInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutClerkStudentInput, StudentUncheckedUpdateWithoutClerkStudentInput>
  }

  export type StudentUpdateWithoutClerkStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    Attendance?: AttendanceUpdateManyWithoutStudentNestedInput
    feeTransactions?: FeeTransactionUpdateManyWithoutStudentNestedInput
    results?: ResultUpdateManyWithoutStudentNestedInput
    Class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    studentFees?: StudentFeesUpdateManyWithoutStudentNestedInput
    totalFees?: StudentTotalFeesUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutClerkStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: IntFieldUpdateOperationsInput | number
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    Attendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    feeTransactions?: FeeTransactionUncheckedUpdateManyWithoutStudentNestedInput
    results?: ResultUncheckedUpdateManyWithoutStudentNestedInput
    studentFees?: StudentFeesUncheckedUpdateManyWithoutStudentNestedInput
    totalFees?: StudentTotalFeesUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type ExamSubjectCreateWithoutSubjectInput = {
    maxMarks: number
    Exam: ExamCreateNestedOneWithoutSubjectsInput
  }

  export type ExamSubjectUncheckedCreateWithoutSubjectInput = {
    id?: number
    examId: number
    maxMarks: number
  }

  export type ExamSubjectCreateOrConnectWithoutSubjectInput = {
    where: ExamSubjectWhereUniqueInput
    create: XOR<ExamSubjectCreateWithoutSubjectInput, ExamSubjectUncheckedCreateWithoutSubjectInput>
  }

  export type ExamSubjectCreateManySubjectInputEnvelope = {
    data: ExamSubjectCreateManySubjectInput | ExamSubjectCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type LessonCreateWithoutSubjectInput = {
    name: string
    day: $Enums.LessonDay
    startTime: Date | string
    endTime: Date | string
    Class: ClassCreateNestedOneWithoutLessonsInput
    Teacher: TeacherCreateNestedOneWithoutLessonsInput
  }

  export type LessonUncheckedCreateWithoutSubjectInput = {
    id?: number
    name: string
    day: $Enums.LessonDay
    startTime: Date | string
    endTime: Date | string
    classId: number
    teacherId: string
  }

  export type LessonCreateOrConnectWithoutSubjectInput = {
    where: LessonWhereUniqueInput
    create: XOR<LessonCreateWithoutSubjectInput, LessonUncheckedCreateWithoutSubjectInput>
  }

  export type LessonCreateManySubjectInputEnvelope = {
    data: LessonCreateManySubjectInput | LessonCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type ResultCreateWithoutSubjectInput = {
    score: number
    Exam: ExamCreateNestedOneWithoutResultsInput
    Student: StudentCreateNestedOneWithoutResultsInput
  }

  export type ResultUncheckedCreateWithoutSubjectInput = {
    id?: number
    score: number
    studentId: string
    examId: number
  }

  export type ResultCreateOrConnectWithoutSubjectInput = {
    where: ResultWhereUniqueInput
    create: XOR<ResultCreateWithoutSubjectInput, ResultUncheckedCreateWithoutSubjectInput>
  }

  export type ResultCreateManySubjectInputEnvelope = {
    data: ResultCreateManySubjectInput | ResultCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type TeacherSubjectCreateWithoutSubjectInput = {
    Teacher: TeacherCreateNestedOneWithoutSubjectsInput
  }

  export type TeacherSubjectUncheckedCreateWithoutSubjectInput = {
    teacherId: string
  }

  export type TeacherSubjectCreateOrConnectWithoutSubjectInput = {
    where: TeacherSubjectWhereUniqueInput
    create: XOR<TeacherSubjectCreateWithoutSubjectInput, TeacherSubjectUncheckedCreateWithoutSubjectInput>
  }

  export type TeacherSubjectCreateManySubjectInputEnvelope = {
    data: TeacherSubjectCreateManySubjectInput | TeacherSubjectCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type ExamSubjectUpsertWithWhereUniqueWithoutSubjectInput = {
    where: ExamSubjectWhereUniqueInput
    update: XOR<ExamSubjectUpdateWithoutSubjectInput, ExamSubjectUncheckedUpdateWithoutSubjectInput>
    create: XOR<ExamSubjectCreateWithoutSubjectInput, ExamSubjectUncheckedCreateWithoutSubjectInput>
  }

  export type ExamSubjectUpdateWithWhereUniqueWithoutSubjectInput = {
    where: ExamSubjectWhereUniqueInput
    data: XOR<ExamSubjectUpdateWithoutSubjectInput, ExamSubjectUncheckedUpdateWithoutSubjectInput>
  }

  export type ExamSubjectUpdateManyWithWhereWithoutSubjectInput = {
    where: ExamSubjectScalarWhereInput
    data: XOR<ExamSubjectUpdateManyMutationInput, ExamSubjectUncheckedUpdateManyWithoutSubjectInput>
  }

  export type LessonUpsertWithWhereUniqueWithoutSubjectInput = {
    where: LessonWhereUniqueInput
    update: XOR<LessonUpdateWithoutSubjectInput, LessonUncheckedUpdateWithoutSubjectInput>
    create: XOR<LessonCreateWithoutSubjectInput, LessonUncheckedCreateWithoutSubjectInput>
  }

  export type LessonUpdateWithWhereUniqueWithoutSubjectInput = {
    where: LessonWhereUniqueInput
    data: XOR<LessonUpdateWithoutSubjectInput, LessonUncheckedUpdateWithoutSubjectInput>
  }

  export type LessonUpdateManyWithWhereWithoutSubjectInput = {
    where: LessonScalarWhereInput
    data: XOR<LessonUpdateManyMutationInput, LessonUncheckedUpdateManyWithoutSubjectInput>
  }

  export type ResultUpsertWithWhereUniqueWithoutSubjectInput = {
    where: ResultWhereUniqueInput
    update: XOR<ResultUpdateWithoutSubjectInput, ResultUncheckedUpdateWithoutSubjectInput>
    create: XOR<ResultCreateWithoutSubjectInput, ResultUncheckedCreateWithoutSubjectInput>
  }

  export type ResultUpdateWithWhereUniqueWithoutSubjectInput = {
    where: ResultWhereUniqueInput
    data: XOR<ResultUpdateWithoutSubjectInput, ResultUncheckedUpdateWithoutSubjectInput>
  }

  export type ResultUpdateManyWithWhereWithoutSubjectInput = {
    where: ResultScalarWhereInput
    data: XOR<ResultUpdateManyMutationInput, ResultUncheckedUpdateManyWithoutSubjectInput>
  }

  export type TeacherSubjectUpsertWithWhereUniqueWithoutSubjectInput = {
    where: TeacherSubjectWhereUniqueInput
    update: XOR<TeacherSubjectUpdateWithoutSubjectInput, TeacherSubjectUncheckedUpdateWithoutSubjectInput>
    create: XOR<TeacherSubjectCreateWithoutSubjectInput, TeacherSubjectUncheckedCreateWithoutSubjectInput>
  }

  export type TeacherSubjectUpdateWithWhereUniqueWithoutSubjectInput = {
    where: TeacherSubjectWhereUniqueInput
    data: XOR<TeacherSubjectUpdateWithoutSubjectInput, TeacherSubjectUncheckedUpdateWithoutSubjectInput>
  }

  export type TeacherSubjectUpdateManyWithWhereWithoutSubjectInput = {
    where: TeacherSubjectScalarWhereInput
    data: XOR<TeacherSubjectUpdateManyMutationInput, TeacherSubjectUncheckedUpdateManyWithoutSubjectInput>
  }

  export type TeacherSubjectScalarWhereInput = {
    AND?: TeacherSubjectScalarWhereInput | TeacherSubjectScalarWhereInput[]
    OR?: TeacherSubjectScalarWhereInput[]
    NOT?: TeacherSubjectScalarWhereInput | TeacherSubjectScalarWhereInput[]
    teacherId?: StringFilter<"TeacherSubject"> | string
    subjectId?: IntFilter<"TeacherSubject"> | number
  }

  export type ClerkTeachersCreateWithoutTeacherInput = {
    clerk_id: string
    user_id?: string | null
    username: string
    password: string
    full_name: string
    role?: string
  }

  export type ClerkTeachersUncheckedCreateWithoutTeacherInput = {
    clerk_id: string
    user_id?: string | null
    username: string
    password: string
    full_name: string
    role?: string
  }

  export type ClerkTeachersCreateOrConnectWithoutTeacherInput = {
    where: ClerkTeachersWhereUniqueInput
    create: XOR<ClerkTeachersCreateWithoutTeacherInput, ClerkTeachersUncheckedCreateWithoutTeacherInput>
  }

  export type LessonCreateWithoutTeacherInput = {
    name: string
    day: $Enums.LessonDay
    startTime: Date | string
    endTime: Date | string
    Class: ClassCreateNestedOneWithoutLessonsInput
    Subject: SubjectCreateNestedOneWithoutLessonsInput
  }

  export type LessonUncheckedCreateWithoutTeacherInput = {
    id?: number
    name: string
    day: $Enums.LessonDay
    startTime: Date | string
    endTime: Date | string
    subjectId: number
    classId: number
  }

  export type LessonCreateOrConnectWithoutTeacherInput = {
    where: LessonWhereUniqueInput
    create: XOR<LessonCreateWithoutTeacherInput, LessonUncheckedCreateWithoutTeacherInput>
  }

  export type LessonCreateManyTeacherInputEnvelope = {
    data: LessonCreateManyTeacherInput | LessonCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type TeacherSubjectCreateWithoutTeacherInput = {
    Subject: SubjectCreateNestedOneWithoutTeachersInput
  }

  export type TeacherSubjectUncheckedCreateWithoutTeacherInput = {
    subjectId: number
  }

  export type TeacherSubjectCreateOrConnectWithoutTeacherInput = {
    where: TeacherSubjectWhereUniqueInput
    create: XOR<TeacherSubjectCreateWithoutTeacherInput, TeacherSubjectUncheckedCreateWithoutTeacherInput>
  }

  export type TeacherSubjectCreateManyTeacherInputEnvelope = {
    data: TeacherSubjectCreateManyTeacherInput | TeacherSubjectCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type ClassCreateWithoutTeacherInput = {
    name: string
    Announcement?: AnnouncementCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    exams?: ExamCreateNestedManyWithoutClassInput
    homeworks?: HomeworkCreateNestedManyWithoutClassInput
    lessons?: LessonCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassInput
    Grade: GradeCreateNestedOneWithoutClassesInput
  }

  export type ClassUncheckedCreateWithoutTeacherInput = {
    id?: number
    name: string
    gradeId: number
    Announcement?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    exams?: ExamUncheckedCreateNestedManyWithoutClassInput
    homeworks?: HomeworkUncheckedCreateNestedManyWithoutClassInput
    lessons?: LessonUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutTeacherInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutTeacherInput, ClassUncheckedCreateWithoutTeacherInput>
  }

  export type ClerkTeachersUpsertWithoutTeacherInput = {
    update: XOR<ClerkTeachersUpdateWithoutTeacherInput, ClerkTeachersUncheckedUpdateWithoutTeacherInput>
    create: XOR<ClerkTeachersCreateWithoutTeacherInput, ClerkTeachersUncheckedCreateWithoutTeacherInput>
    where?: ClerkTeachersWhereInput
  }

  export type ClerkTeachersUpdateToOneWithWhereWithoutTeacherInput = {
    where?: ClerkTeachersWhereInput
    data: XOR<ClerkTeachersUpdateWithoutTeacherInput, ClerkTeachersUncheckedUpdateWithoutTeacherInput>
  }

  export type ClerkTeachersUpdateWithoutTeacherInput = {
    clerk_id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type ClerkTeachersUncheckedUpdateWithoutTeacherInput = {
    clerk_id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type LessonUpsertWithWhereUniqueWithoutTeacherInput = {
    where: LessonWhereUniqueInput
    update: XOR<LessonUpdateWithoutTeacherInput, LessonUncheckedUpdateWithoutTeacherInput>
    create: XOR<LessonCreateWithoutTeacherInput, LessonUncheckedCreateWithoutTeacherInput>
  }

  export type LessonUpdateWithWhereUniqueWithoutTeacherInput = {
    where: LessonWhereUniqueInput
    data: XOR<LessonUpdateWithoutTeacherInput, LessonUncheckedUpdateWithoutTeacherInput>
  }

  export type LessonUpdateManyWithWhereWithoutTeacherInput = {
    where: LessonScalarWhereInput
    data: XOR<LessonUpdateManyMutationInput, LessonUncheckedUpdateManyWithoutTeacherInput>
  }

  export type TeacherSubjectUpsertWithWhereUniqueWithoutTeacherInput = {
    where: TeacherSubjectWhereUniqueInput
    update: XOR<TeacherSubjectUpdateWithoutTeacherInput, TeacherSubjectUncheckedUpdateWithoutTeacherInput>
    create: XOR<TeacherSubjectCreateWithoutTeacherInput, TeacherSubjectUncheckedCreateWithoutTeacherInput>
  }

  export type TeacherSubjectUpdateWithWhereUniqueWithoutTeacherInput = {
    where: TeacherSubjectWhereUniqueInput
    data: XOR<TeacherSubjectUpdateWithoutTeacherInput, TeacherSubjectUncheckedUpdateWithoutTeacherInput>
  }

  export type TeacherSubjectUpdateManyWithWhereWithoutTeacherInput = {
    where: TeacherSubjectScalarWhereInput
    data: XOR<TeacherSubjectUpdateManyMutationInput, TeacherSubjectUncheckedUpdateManyWithoutTeacherInput>
  }

  export type ClassUpsertWithoutTeacherInput = {
    update: XOR<ClassUpdateWithoutTeacherInput, ClassUncheckedUpdateWithoutTeacherInput>
    create: XOR<ClassCreateWithoutTeacherInput, ClassUncheckedCreateWithoutTeacherInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutTeacherInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutTeacherInput, ClassUncheckedUpdateWithoutTeacherInput>
  }

  export type ClassUpdateWithoutTeacherInput = {
    name?: StringFieldUpdateOperationsInput | string
    Announcement?: AnnouncementUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    exams?: ExamUpdateManyWithoutClassNestedInput
    homeworks?: HomeworkUpdateManyWithoutClassNestedInput
    lessons?: LessonUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    Grade?: GradeUpdateOneRequiredWithoutClassesNestedInput
  }

  export type ClassUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gradeId?: IntFieldUpdateOperationsInput | number
    Announcement?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    exams?: ExamUncheckedUpdateManyWithoutClassNestedInput
    homeworks?: HomeworkUncheckedUpdateManyWithoutClassNestedInput
    lessons?: LessonUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
  }

  export type SubjectCreateWithoutTeachersInput = {
    name: string
    createdAt?: Date | string
    exams?: ExamSubjectCreateNestedManyWithoutSubjectInput
    lessons?: LessonCreateNestedManyWithoutSubjectInput
    results?: ResultCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutTeachersInput = {
    id?: number
    name: string
    createdAt?: Date | string
    exams?: ExamSubjectUncheckedCreateNestedManyWithoutSubjectInput
    lessons?: LessonUncheckedCreateNestedManyWithoutSubjectInput
    results?: ResultUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutTeachersInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutTeachersInput, SubjectUncheckedCreateWithoutTeachersInput>
  }

  export type TeacherCreateWithoutSubjectsInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    createdAt?: Date | string
    deletedAt?: Date | string | null
    supervisor?: boolean
    dob?: Date | string | null
    classId?: string | null
    clerk_id?: string | null
    ClerkTeachers?: ClerkTeachersCreateNestedOneWithoutTeacherInput
    lessons?: LessonCreateNestedManyWithoutTeacherInput
    class?: ClassCreateNestedOneWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutSubjectsInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    createdAt?: Date | string
    deletedAt?: Date | string | null
    supervisor?: boolean
    dob?: Date | string | null
    classId?: string | null
    clerk_id?: string | null
    ClerkTeachers?: ClerkTeachersUncheckedCreateNestedOneWithoutTeacherInput
    lessons?: LessonUncheckedCreateNestedManyWithoutTeacherInput
    class?: ClassUncheckedCreateNestedOneWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutSubjectsInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutSubjectsInput, TeacherUncheckedCreateWithoutSubjectsInput>
  }

  export type SubjectUpsertWithoutTeachersInput = {
    update: XOR<SubjectUpdateWithoutTeachersInput, SubjectUncheckedUpdateWithoutTeachersInput>
    create: XOR<SubjectCreateWithoutTeachersInput, SubjectUncheckedCreateWithoutTeachersInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutTeachersInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutTeachersInput, SubjectUncheckedUpdateWithoutTeachersInput>
  }

  export type SubjectUpdateWithoutTeachersInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exams?: ExamSubjectUpdateManyWithoutSubjectNestedInput
    lessons?: LessonUpdateManyWithoutSubjectNestedInput
    results?: ResultUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutTeachersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exams?: ExamSubjectUncheckedUpdateManyWithoutSubjectNestedInput
    lessons?: LessonUncheckedUpdateManyWithoutSubjectNestedInput
    results?: ResultUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type TeacherUpsertWithoutSubjectsInput = {
    update: XOR<TeacherUpdateWithoutSubjectsInput, TeacherUncheckedUpdateWithoutSubjectsInput>
    create: XOR<TeacherCreateWithoutSubjectsInput, TeacherUncheckedCreateWithoutSubjectsInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutSubjectsInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutSubjectsInput, TeacherUncheckedUpdateWithoutSubjectsInput>
  }

  export type TeacherUpdateWithoutSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supervisor?: BoolFieldUpdateOperationsInput | boolean
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    ClerkTeachers?: ClerkTeachersUpdateOneWithoutTeacherNestedInput
    lessons?: LessonUpdateManyWithoutTeacherNestedInput
    class?: ClassUpdateOneWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supervisor?: BoolFieldUpdateOperationsInput | boolean
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    ClerkTeachers?: ClerkTeachersUncheckedUpdateOneWithoutTeacherNestedInput
    lessons?: LessonUncheckedUpdateManyWithoutTeacherNestedInput
    class?: ClassUncheckedUpdateOneWithoutTeacherNestedInput
  }

  export type TeacherCreateWithoutClerkTeachersInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    createdAt?: Date | string
    deletedAt?: Date | string | null
    supervisor?: boolean
    dob?: Date | string | null
    classId?: string | null
    clerk_id?: string | null
    lessons?: LessonCreateNestedManyWithoutTeacherInput
    subjects?: TeacherSubjectCreateNestedManyWithoutTeacherInput
    class?: ClassCreateNestedOneWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutClerkTeachersInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    createdAt?: Date | string
    deletedAt?: Date | string | null
    supervisor?: boolean
    dob?: Date | string | null
    classId?: string | null
    clerk_id?: string | null
    lessons?: LessonUncheckedCreateNestedManyWithoutTeacherInput
    subjects?: TeacherSubjectUncheckedCreateNestedManyWithoutTeacherInput
    class?: ClassUncheckedCreateNestedOneWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutClerkTeachersInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutClerkTeachersInput, TeacherUncheckedCreateWithoutClerkTeachersInput>
  }

  export type TeacherUpsertWithoutClerkTeachersInput = {
    update: XOR<TeacherUpdateWithoutClerkTeachersInput, TeacherUncheckedUpdateWithoutClerkTeachersInput>
    create: XOR<TeacherCreateWithoutClerkTeachersInput, TeacherUncheckedCreateWithoutClerkTeachersInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutClerkTeachersInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutClerkTeachersInput, TeacherUncheckedUpdateWithoutClerkTeachersInput>
  }

  export type TeacherUpdateWithoutClerkTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supervisor?: BoolFieldUpdateOperationsInput | boolean
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    lessons?: LessonUpdateManyWithoutTeacherNestedInput
    subjects?: TeacherSubjectUpdateManyWithoutTeacherNestedInput
    class?: ClassUpdateOneWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutClerkTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supervisor?: BoolFieldUpdateOperationsInput | boolean
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    lessons?: LessonUncheckedUpdateManyWithoutTeacherNestedInput
    subjects?: TeacherSubjectUncheckedUpdateManyWithoutTeacherNestedInput
    class?: ClassUncheckedUpdateOneWithoutTeacherNestedInput
  }

  export type GradeCreateWithoutFeestructureInput = {
    level: string
    Homework?: HomeworkCreateNestedManyWithoutGradeInput
    classes?: ClassCreateNestedManyWithoutGradeInput
  }

  export type GradeUncheckedCreateWithoutFeestructureInput = {
    id?: number
    level: string
    Homework?: HomeworkUncheckedCreateNestedManyWithoutGradeInput
    classes?: ClassUncheckedCreateNestedManyWithoutGradeInput
  }

  export type GradeCreateOrConnectWithoutFeestructureInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutFeestructureInput, GradeUncheckedCreateWithoutFeestructureInput>
  }

  export type StudentFeesCreateWithoutFeeStructureInput = {
    paidAmount?: number
    abacusPaidAmount?: number | null
    discountAmount?: number
    fineAmount?: number
    receiptDate?: Date | string | null
    receivedDate?: Date | string | null
    paymentMode?: $Enums.PaymentMode
    academicYear?: $Enums.AcademicYear
    receiptNo?: string | null
    term: string
    remarks?: string | null
    feeTransactions?: FeeTransactionCreateNestedManyWithoutStudentFeesInput
    student: StudentCreateNestedOneWithoutStudentFeesInput
  }

  export type StudentFeesUncheckedCreateWithoutFeeStructureInput = {
    id?: number
    studentId: string
    paidAmount?: number
    abacusPaidAmount?: number | null
    discountAmount?: number
    fineAmount?: number
    receiptDate?: Date | string | null
    receivedDate?: Date | string | null
    paymentMode?: $Enums.PaymentMode
    academicYear?: $Enums.AcademicYear
    receiptNo?: string | null
    term: string
    remarks?: string | null
    feeTransactions?: FeeTransactionUncheckedCreateNestedManyWithoutStudentFeesInput
  }

  export type StudentFeesCreateOrConnectWithoutFeeStructureInput = {
    where: StudentFeesWhereUniqueInput
    create: XOR<StudentFeesCreateWithoutFeeStructureInput, StudentFeesUncheckedCreateWithoutFeeStructureInput>
  }

  export type StudentFeesCreateManyFeeStructureInputEnvelope = {
    data: StudentFeesCreateManyFeeStructureInput | StudentFeesCreateManyFeeStructureInput[]
    skipDuplicates?: boolean
  }

  export type GradeUpsertWithoutFeestructureInput = {
    update: XOR<GradeUpdateWithoutFeestructureInput, GradeUncheckedUpdateWithoutFeestructureInput>
    create: XOR<GradeCreateWithoutFeestructureInput, GradeUncheckedCreateWithoutFeestructureInput>
    where?: GradeWhereInput
  }

  export type GradeUpdateToOneWithWhereWithoutFeestructureInput = {
    where?: GradeWhereInput
    data: XOR<GradeUpdateWithoutFeestructureInput, GradeUncheckedUpdateWithoutFeestructureInput>
  }

  export type GradeUpdateWithoutFeestructureInput = {
    level?: StringFieldUpdateOperationsInput | string
    Homework?: HomeworkUpdateManyWithoutGradeNestedInput
    classes?: ClassUpdateManyWithoutGradeNestedInput
  }

  export type GradeUncheckedUpdateWithoutFeestructureInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    Homework?: HomeworkUncheckedUpdateManyWithoutGradeNestedInput
    classes?: ClassUncheckedUpdateManyWithoutGradeNestedInput
  }

  export type StudentFeesUpsertWithWhereUniqueWithoutFeeStructureInput = {
    where: StudentFeesWhereUniqueInput
    update: XOR<StudentFeesUpdateWithoutFeeStructureInput, StudentFeesUncheckedUpdateWithoutFeeStructureInput>
    create: XOR<StudentFeesCreateWithoutFeeStructureInput, StudentFeesUncheckedCreateWithoutFeeStructureInput>
  }

  export type StudentFeesUpdateWithWhereUniqueWithoutFeeStructureInput = {
    where: StudentFeesWhereUniqueInput
    data: XOR<StudentFeesUpdateWithoutFeeStructureInput, StudentFeesUncheckedUpdateWithoutFeeStructureInput>
  }

  export type StudentFeesUpdateManyWithWhereWithoutFeeStructureInput = {
    where: StudentFeesScalarWhereInput
    data: XOR<StudentFeesUpdateManyMutationInput, StudentFeesUncheckedUpdateManyWithoutFeeStructureInput>
  }

  export type StudentFeesCreateWithoutFeeTransactionsInput = {
    paidAmount?: number
    abacusPaidAmount?: number | null
    discountAmount?: number
    fineAmount?: number
    receiptDate?: Date | string | null
    receivedDate?: Date | string | null
    paymentMode?: $Enums.PaymentMode
    academicYear?: $Enums.AcademicYear
    receiptNo?: string | null
    term: string
    remarks?: string | null
    feeStructure: FeeStructureCreateNestedOneWithoutStudentFeesInput
    student: StudentCreateNestedOneWithoutStudentFeesInput
  }

  export type StudentFeesUncheckedCreateWithoutFeeTransactionsInput = {
    id?: number
    studentId: string
    paidAmount?: number
    abacusPaidAmount?: number | null
    feeStructureId: number
    discountAmount?: number
    fineAmount?: number
    receiptDate?: Date | string | null
    receivedDate?: Date | string | null
    paymentMode?: $Enums.PaymentMode
    academicYear?: $Enums.AcademicYear
    receiptNo?: string | null
    term: string
    remarks?: string | null
  }

  export type StudentFeesCreateOrConnectWithoutFeeTransactionsInput = {
    where: StudentFeesWhereUniqueInput
    create: XOR<StudentFeesCreateWithoutFeeTransactionsInput, StudentFeesUncheckedCreateWithoutFeeTransactionsInput>
  }

  export type StudentCreateWithoutFeeTransactionsInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    parentName: string
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    dob: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    clerk_id?: string | null
    academicYear?: $Enums.AcademicYear
    Attendance?: AttendanceCreateNestedManyWithoutStudentInput
    clerkStudent?: ClerkStudentsCreateNestedOneWithoutStudentInput
    results?: ResultCreateNestedManyWithoutStudentInput
    Class: ClassCreateNestedOneWithoutStudentsInput
    studentFees?: StudentFeesCreateNestedManyWithoutStudentInput
    totalFees?: StudentTotalFeesCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutFeeTransactionsInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    parentName: string
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    dob: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    classId: number
    clerk_id?: string | null
    academicYear?: $Enums.AcademicYear
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    clerkStudent?: ClerkStudentsUncheckedCreateNestedOneWithoutStudentInput
    results?: ResultUncheckedCreateNestedManyWithoutStudentInput
    studentFees?: StudentFeesUncheckedCreateNestedManyWithoutStudentInput
    totalFees?: StudentTotalFeesUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutFeeTransactionsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutFeeTransactionsInput, StudentUncheckedCreateWithoutFeeTransactionsInput>
  }

  export type StudentFeesUpsertWithoutFeeTransactionsInput = {
    update: XOR<StudentFeesUpdateWithoutFeeTransactionsInput, StudentFeesUncheckedUpdateWithoutFeeTransactionsInput>
    create: XOR<StudentFeesCreateWithoutFeeTransactionsInput, StudentFeesUncheckedCreateWithoutFeeTransactionsInput>
    where?: StudentFeesWhereInput
  }

  export type StudentFeesUpdateToOneWithWhereWithoutFeeTransactionsInput = {
    where?: StudentFeesWhereInput
    data: XOR<StudentFeesUpdateWithoutFeeTransactionsInput, StudentFeesUncheckedUpdateWithoutFeeTransactionsInput>
  }

  export type StudentFeesUpdateWithoutFeeTransactionsInput = {
    paidAmount?: IntFieldUpdateOperationsInput | number
    abacusPaidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    discountAmount?: IntFieldUpdateOperationsInput | number
    fineAmount?: IntFieldUpdateOperationsInput | number
    receiptDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    receiptNo?: NullableStringFieldUpdateOperationsInput | string | null
    term?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    feeStructure?: FeeStructureUpdateOneRequiredWithoutStudentFeesNestedInput
    student?: StudentUpdateOneRequiredWithoutStudentFeesNestedInput
  }

  export type StudentFeesUncheckedUpdateWithoutFeeTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    paidAmount?: IntFieldUpdateOperationsInput | number
    abacusPaidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeStructureId?: IntFieldUpdateOperationsInput | number
    discountAmount?: IntFieldUpdateOperationsInput | number
    fineAmount?: IntFieldUpdateOperationsInput | number
    receiptDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    receiptNo?: NullableStringFieldUpdateOperationsInput | string | null
    term?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentUpsertWithoutFeeTransactionsInput = {
    update: XOR<StudentUpdateWithoutFeeTransactionsInput, StudentUncheckedUpdateWithoutFeeTransactionsInput>
    create: XOR<StudentCreateWithoutFeeTransactionsInput, StudentUncheckedCreateWithoutFeeTransactionsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutFeeTransactionsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutFeeTransactionsInput, StudentUncheckedUpdateWithoutFeeTransactionsInput>
  }

  export type StudentUpdateWithoutFeeTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    Attendance?: AttendanceUpdateManyWithoutStudentNestedInput
    clerkStudent?: ClerkStudentsUpdateOneWithoutStudentNestedInput
    results?: ResultUpdateManyWithoutStudentNestedInput
    Class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    studentFees?: StudentFeesUpdateManyWithoutStudentNestedInput
    totalFees?: StudentTotalFeesUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutFeeTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: IntFieldUpdateOperationsInput | number
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    Attendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    clerkStudent?: ClerkStudentsUncheckedUpdateOneWithoutStudentNestedInput
    results?: ResultUncheckedUpdateManyWithoutStudentNestedInput
    studentFees?: StudentFeesUncheckedUpdateManyWithoutStudentNestedInput
    totalFees?: StudentTotalFeesUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type FeeTransactionCreateWithoutStudentFeesInput = {
    term: string
    amount?: number
    discountAmount?: number
    fineAmount?: number
    receiptDate: Date | string
    receiptNo: string
    paymentMode?: $Enums.PaymentMode
    createdAt?: Date | string
    updatedAt?: Date | string
    remarks?: string | null
    student: StudentCreateNestedOneWithoutFeeTransactionsInput
  }

  export type FeeTransactionUncheckedCreateWithoutStudentFeesInput = {
    id?: number
    studentId: string
    term: string
    amount?: number
    discountAmount?: number
    fineAmount?: number
    receiptDate: Date | string
    receiptNo: string
    paymentMode?: $Enums.PaymentMode
    createdAt?: Date | string
    updatedAt?: Date | string
    remarks?: string | null
  }

  export type FeeTransactionCreateOrConnectWithoutStudentFeesInput = {
    where: FeeTransactionWhereUniqueInput
    create: XOR<FeeTransactionCreateWithoutStudentFeesInput, FeeTransactionUncheckedCreateWithoutStudentFeesInput>
  }

  export type FeeTransactionCreateManyStudentFeesInputEnvelope = {
    data: FeeTransactionCreateManyStudentFeesInput | FeeTransactionCreateManyStudentFeesInput[]
    skipDuplicates?: boolean
  }

  export type FeeStructureCreateWithoutStudentFeesInput = {
    startDate: Date | string
    dueDate: Date | string
    termFees: number
    abacusFees?: number | null
    term: $Enums.Term
    academicYear?: $Enums.AcademicYear
    grade: GradeCreateNestedOneWithoutFeestructureInput
  }

  export type FeeStructureUncheckedCreateWithoutStudentFeesInput = {
    id?: number
    gradeId: number
    startDate: Date | string
    dueDate: Date | string
    termFees: number
    abacusFees?: number | null
    term: $Enums.Term
    academicYear?: $Enums.AcademicYear
  }

  export type FeeStructureCreateOrConnectWithoutStudentFeesInput = {
    where: FeeStructureWhereUniqueInput
    create: XOR<FeeStructureCreateWithoutStudentFeesInput, FeeStructureUncheckedCreateWithoutStudentFeesInput>
  }

  export type StudentCreateWithoutStudentFeesInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    parentName: string
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    dob: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    clerk_id?: string | null
    academicYear?: $Enums.AcademicYear
    Attendance?: AttendanceCreateNestedManyWithoutStudentInput
    clerkStudent?: ClerkStudentsCreateNestedOneWithoutStudentInput
    feeTransactions?: FeeTransactionCreateNestedManyWithoutStudentInput
    results?: ResultCreateNestedManyWithoutStudentInput
    Class: ClassCreateNestedOneWithoutStudentsInput
    totalFees?: StudentTotalFeesCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutStudentFeesInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    parentName: string
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    dob: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    classId: number
    clerk_id?: string | null
    academicYear?: $Enums.AcademicYear
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    clerkStudent?: ClerkStudentsUncheckedCreateNestedOneWithoutStudentInput
    feeTransactions?: FeeTransactionUncheckedCreateNestedManyWithoutStudentInput
    results?: ResultUncheckedCreateNestedManyWithoutStudentInput
    totalFees?: StudentTotalFeesUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutStudentFeesInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutStudentFeesInput, StudentUncheckedCreateWithoutStudentFeesInput>
  }

  export type FeeTransactionUpsertWithWhereUniqueWithoutStudentFeesInput = {
    where: FeeTransactionWhereUniqueInput
    update: XOR<FeeTransactionUpdateWithoutStudentFeesInput, FeeTransactionUncheckedUpdateWithoutStudentFeesInput>
    create: XOR<FeeTransactionCreateWithoutStudentFeesInput, FeeTransactionUncheckedCreateWithoutStudentFeesInput>
  }

  export type FeeTransactionUpdateWithWhereUniqueWithoutStudentFeesInput = {
    where: FeeTransactionWhereUniqueInput
    data: XOR<FeeTransactionUpdateWithoutStudentFeesInput, FeeTransactionUncheckedUpdateWithoutStudentFeesInput>
  }

  export type FeeTransactionUpdateManyWithWhereWithoutStudentFeesInput = {
    where: FeeTransactionScalarWhereInput
    data: XOR<FeeTransactionUpdateManyMutationInput, FeeTransactionUncheckedUpdateManyWithoutStudentFeesInput>
  }

  export type FeeStructureUpsertWithoutStudentFeesInput = {
    update: XOR<FeeStructureUpdateWithoutStudentFeesInput, FeeStructureUncheckedUpdateWithoutStudentFeesInput>
    create: XOR<FeeStructureCreateWithoutStudentFeesInput, FeeStructureUncheckedCreateWithoutStudentFeesInput>
    where?: FeeStructureWhereInput
  }

  export type FeeStructureUpdateToOneWithWhereWithoutStudentFeesInput = {
    where?: FeeStructureWhereInput
    data: XOR<FeeStructureUpdateWithoutStudentFeesInput, FeeStructureUncheckedUpdateWithoutStudentFeesInput>
  }

  export type FeeStructureUpdateWithoutStudentFeesInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    termFees?: IntFieldUpdateOperationsInput | number
    abacusFees?: NullableIntFieldUpdateOperationsInput | number | null
    term?: EnumTermFieldUpdateOperationsInput | $Enums.Term
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    grade?: GradeUpdateOneRequiredWithoutFeestructureNestedInput
  }

  export type FeeStructureUncheckedUpdateWithoutStudentFeesInput = {
    id?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    termFees?: IntFieldUpdateOperationsInput | number
    abacusFees?: NullableIntFieldUpdateOperationsInput | number | null
    term?: EnumTermFieldUpdateOperationsInput | $Enums.Term
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
  }

  export type StudentUpsertWithoutStudentFeesInput = {
    update: XOR<StudentUpdateWithoutStudentFeesInput, StudentUncheckedUpdateWithoutStudentFeesInput>
    create: XOR<StudentCreateWithoutStudentFeesInput, StudentUncheckedCreateWithoutStudentFeesInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutStudentFeesInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutStudentFeesInput, StudentUncheckedUpdateWithoutStudentFeesInput>
  }

  export type StudentUpdateWithoutStudentFeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    Attendance?: AttendanceUpdateManyWithoutStudentNestedInput
    clerkStudent?: ClerkStudentsUpdateOneWithoutStudentNestedInput
    feeTransactions?: FeeTransactionUpdateManyWithoutStudentNestedInput
    results?: ResultUpdateManyWithoutStudentNestedInput
    Class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    totalFees?: StudentTotalFeesUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutStudentFeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: IntFieldUpdateOperationsInput | number
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    Attendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    clerkStudent?: ClerkStudentsUncheckedUpdateOneWithoutStudentNestedInput
    feeTransactions?: FeeTransactionUncheckedUpdateManyWithoutStudentNestedInput
    results?: ResultUncheckedUpdateManyWithoutStudentNestedInput
    totalFees?: StudentTotalFeesUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateWithoutTotalFeesInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    parentName: string
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    dob: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    clerk_id?: string | null
    academicYear?: $Enums.AcademicYear
    Attendance?: AttendanceCreateNestedManyWithoutStudentInput
    clerkStudent?: ClerkStudentsCreateNestedOneWithoutStudentInput
    feeTransactions?: FeeTransactionCreateNestedManyWithoutStudentInput
    results?: ResultCreateNestedManyWithoutStudentInput
    Class: ClassCreateNestedOneWithoutStudentsInput
    studentFees?: StudentFeesCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutTotalFeesInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    parentName: string
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    dob: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    classId: number
    clerk_id?: string | null
    academicYear?: $Enums.AcademicYear
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    clerkStudent?: ClerkStudentsUncheckedCreateNestedOneWithoutStudentInput
    feeTransactions?: FeeTransactionUncheckedCreateNestedManyWithoutStudentInput
    results?: ResultUncheckedCreateNestedManyWithoutStudentInput
    studentFees?: StudentFeesUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutTotalFeesInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutTotalFeesInput, StudentUncheckedCreateWithoutTotalFeesInput>
  }

  export type StudentUpsertWithoutTotalFeesInput = {
    update: XOR<StudentUpdateWithoutTotalFeesInput, StudentUncheckedUpdateWithoutTotalFeesInput>
    create: XOR<StudentCreateWithoutTotalFeesInput, StudentUncheckedCreateWithoutTotalFeesInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutTotalFeesInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutTotalFeesInput, StudentUncheckedUpdateWithoutTotalFeesInput>
  }

  export type StudentUpdateWithoutTotalFeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    Attendance?: AttendanceUpdateManyWithoutStudentNestedInput
    clerkStudent?: ClerkStudentsUpdateOneWithoutStudentNestedInput
    feeTransactions?: FeeTransactionUpdateManyWithoutStudentNestedInput
    results?: ResultUpdateManyWithoutStudentNestedInput
    Class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    studentFees?: StudentFeesUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutTotalFeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: IntFieldUpdateOperationsInput | number
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    Attendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    clerkStudent?: ClerkStudentsUncheckedUpdateOneWithoutStudentNestedInput
    feeTransactions?: FeeTransactionUncheckedUpdateManyWithoutStudentNestedInput
    results?: ResultUncheckedUpdateManyWithoutStudentNestedInput
    studentFees?: StudentFeesUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type FeeStructureCreateManyGradeInput = {
    id?: number
    startDate: Date | string
    dueDate: Date | string
    termFees: number
    abacusFees?: number | null
    term: $Enums.Term
    academicYear?: $Enums.AcademicYear
  }

  export type HomeworkCreateManyGradeInput = {
    id?: number
    description: string
    date?: Date | string
    classId: number
  }

  export type ClassCreateManyGradeInput = {
    id?: number
    name: string
    supervisorId?: string | null
  }

  export type FeeStructureUpdateWithoutGradeInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    termFees?: IntFieldUpdateOperationsInput | number
    abacusFees?: NullableIntFieldUpdateOperationsInput | number | null
    term?: EnumTermFieldUpdateOperationsInput | $Enums.Term
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    studentFees?: StudentFeesUpdateManyWithoutFeeStructureNestedInput
  }

  export type FeeStructureUncheckedUpdateWithoutGradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    termFees?: IntFieldUpdateOperationsInput | number
    abacusFees?: NullableIntFieldUpdateOperationsInput | number | null
    term?: EnumTermFieldUpdateOperationsInput | $Enums.Term
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    studentFees?: StudentFeesUncheckedUpdateManyWithoutFeeStructureNestedInput
  }

  export type FeeStructureUncheckedUpdateManyWithoutGradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    termFees?: IntFieldUpdateOperationsInput | number
    abacusFees?: NullableIntFieldUpdateOperationsInput | number | null
    term?: EnumTermFieldUpdateOperationsInput | $Enums.Term
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
  }

  export type HomeworkUpdateWithoutGradeInput = {
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    Class?: ClassUpdateOneRequiredWithoutHomeworksNestedInput
  }

  export type HomeworkUncheckedUpdateWithoutGradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: IntFieldUpdateOperationsInput | number
  }

  export type HomeworkUncheckedUpdateManyWithoutGradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: IntFieldUpdateOperationsInput | number
  }

  export type ClassUpdateWithoutGradeInput = {
    name?: StringFieldUpdateOperationsInput | string
    Announcement?: AnnouncementUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    exams?: ExamUpdateManyWithoutClassNestedInput
    homeworks?: HomeworkUpdateManyWithoutClassNestedInput
    lessons?: LessonUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    Teacher?: TeacherUpdateOneWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutGradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    Announcement?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    exams?: ExamUncheckedUpdateManyWithoutClassNestedInput
    homeworks?: HomeworkUncheckedUpdateManyWithoutClassNestedInput
    lessons?: LessonUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateManyWithoutGradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnnouncementCreateManyClassInput = {
    id?: number
    title: string
    description: string
    date: Date | string
  }

  export type AttendanceCreateManyClassInput = {
    id?: number
    date: Date | string
    present: boolean
    studentId: string
  }

  export type EventCreateManyClassInput = {
    id?: number
    title: string
    description: string
    startTime: Date | string
    endTime: Date | string
  }

  export type ExamCreateManyClassInput = {
    id?: number
    title: string
    date: Date | string
  }

  export type HomeworkCreateManyClassInput = {
    id?: number
    description: string
    date?: Date | string
    gradeId: number
  }

  export type LessonCreateManyClassInput = {
    id?: number
    name: string
    day: $Enums.LessonDay
    startTime: Date | string
    endTime: Date | string
    subjectId: number
    teacherId: string
  }

  export type StudentCreateManyClassInput = {
    id: string
    username: string
    name: string
    surname?: string | null
    parentName: string
    email?: string | null
    phone: string
    address: string
    img?: string | null
    bloodType?: string | null
    gender: $Enums.Gender
    dob: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    clerk_id?: string | null
    academicYear?: $Enums.AcademicYear
  }

  export type AnnouncementUpdateWithoutClassInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnnouncementUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnnouncementUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceUpdateWithoutClassInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
    Student?: StudentUpdateOneRequiredWithoutAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type AttendanceUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type EventUpdateWithoutClassInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamUpdateWithoutClassInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: ExamSubjectUpdateManyWithoutExamNestedInput
    results?: ResultUpdateManyWithoutExamNestedInput
  }

  export type ExamUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: ExamSubjectUncheckedUpdateManyWithoutExamNestedInput
    results?: ResultUncheckedUpdateManyWithoutExamNestedInput
  }

  export type ExamUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkUpdateWithoutClassInput = {
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    Grade?: GradeUpdateOneRequiredWithoutHomeworkNestedInput
  }

  export type HomeworkUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    gradeId?: IntFieldUpdateOperationsInput | number
  }

  export type HomeworkUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    gradeId?: IntFieldUpdateOperationsInput | number
  }

  export type LessonUpdateWithoutClassInput = {
    name?: StringFieldUpdateOperationsInput | string
    day?: EnumLessonDayFieldUpdateOperationsInput | $Enums.LessonDay
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    Subject?: SubjectUpdateOneRequiredWithoutLessonsNestedInput
    Teacher?: TeacherUpdateOneRequiredWithoutLessonsNestedInput
  }

  export type LessonUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    day?: EnumLessonDayFieldUpdateOperationsInput | $Enums.LessonDay
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    subjectId?: IntFieldUpdateOperationsInput | number
    teacherId?: StringFieldUpdateOperationsInput | string
  }

  export type LessonUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    day?: EnumLessonDayFieldUpdateOperationsInput | $Enums.LessonDay
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    subjectId?: IntFieldUpdateOperationsInput | number
    teacherId?: StringFieldUpdateOperationsInput | string
  }

  export type StudentUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    Attendance?: AttendanceUpdateManyWithoutStudentNestedInput
    clerkStudent?: ClerkStudentsUpdateOneWithoutStudentNestedInput
    feeTransactions?: FeeTransactionUpdateManyWithoutStudentNestedInput
    results?: ResultUpdateManyWithoutStudentNestedInput
    studentFees?: StudentFeesUpdateManyWithoutStudentNestedInput
    totalFees?: StudentTotalFeesUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    Attendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    clerkStudent?: ClerkStudentsUncheckedUpdateOneWithoutStudentNestedInput
    feeTransactions?: FeeTransactionUncheckedUpdateManyWithoutStudentNestedInput
    results?: ResultUncheckedUpdateManyWithoutStudentNestedInput
    studentFees?: StudentFeesUncheckedUpdateManyWithoutStudentNestedInput
    totalFees?: StudentTotalFeesUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clerk_id?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
  }

  export type ExamSubjectCreateManyExamInput = {
    id?: number
    subjectId: number
    maxMarks: number
  }

  export type ResultCreateManyExamInput = {
    id?: number
    score: number
    studentId: string
    subjectId: number
  }

  export type ExamSubjectUpdateWithoutExamInput = {
    maxMarks?: IntFieldUpdateOperationsInput | number
    Subject?: SubjectUpdateOneRequiredWithoutExamsNestedInput
  }

  export type ExamSubjectUncheckedUpdateWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    maxMarks?: IntFieldUpdateOperationsInput | number
  }

  export type ExamSubjectUncheckedUpdateManyWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    maxMarks?: IntFieldUpdateOperationsInput | number
  }

  export type ResultUpdateWithoutExamInput = {
    score?: FloatFieldUpdateOperationsInput | number
    Student?: StudentUpdateOneRequiredWithoutResultsNestedInput
    Subject?: SubjectUpdateOneRequiredWithoutResultsNestedInput
  }

  export type ResultUncheckedUpdateWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type ResultUncheckedUpdateManyWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type AttendanceCreateManyStudentInput = {
    id?: number
    date: Date | string
    present: boolean
    classId: number
  }

  export type FeeTransactionCreateManyStudentInput = {
    id?: number
    term: string
    studentFeesId: number
    amount?: number
    discountAmount?: number
    fineAmount?: number
    receiptDate: Date | string
    receiptNo: string
    paymentMode?: $Enums.PaymentMode
    createdAt?: Date | string
    updatedAt?: Date | string
    remarks?: string | null
  }

  export type ResultCreateManyStudentInput = {
    id?: number
    score: number
    examId: number
    subjectId: number
  }

  export type StudentFeesCreateManyStudentInput = {
    id?: number
    paidAmount?: number
    abacusPaidAmount?: number | null
    feeStructureId: number
    discountAmount?: number
    fineAmount?: number
    receiptDate?: Date | string | null
    receivedDate?: Date | string | null
    paymentMode?: $Enums.PaymentMode
    academicYear?: $Enums.AcademicYear
    receiptNo?: string | null
    term: string
    remarks?: string | null
  }

  export type StudentTotalFeesCreateManyStudentInput = {
    id?: number
    totalPaidAmount?: number
    totalDiscountAmount?: number
    totalFineAmount?: number
    totalAbacusAmount?: number
    totalFeeAmount?: number
    dueAmount?: number
    status?: string
  }

  export type AttendanceUpdateWithoutStudentInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
    class?: ClassUpdateOneRequiredWithoutAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
    classId?: IntFieldUpdateOperationsInput | number
  }

  export type AttendanceUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
    classId?: IntFieldUpdateOperationsInput | number
  }

  export type FeeTransactionUpdateWithoutStudentInput = {
    term?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    fineAmount?: FloatFieldUpdateOperationsInput | number
    receiptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    studentFees?: StudentFeesUpdateOneRequiredWithoutFeeTransactionsNestedInput
  }

  export type FeeTransactionUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    term?: StringFieldUpdateOperationsInput | string
    studentFeesId?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    fineAmount?: FloatFieldUpdateOperationsInput | number
    receiptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeeTransactionUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    term?: StringFieldUpdateOperationsInput | string
    studentFeesId?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    fineAmount?: FloatFieldUpdateOperationsInput | number
    receiptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ResultUpdateWithoutStudentInput = {
    score?: FloatFieldUpdateOperationsInput | number
    Exam?: ExamUpdateOneRequiredWithoutResultsNestedInput
    Subject?: SubjectUpdateOneRequiredWithoutResultsNestedInput
  }

  export type ResultUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type ResultUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentFeesUpdateWithoutStudentInput = {
    paidAmount?: IntFieldUpdateOperationsInput | number
    abacusPaidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    discountAmount?: IntFieldUpdateOperationsInput | number
    fineAmount?: IntFieldUpdateOperationsInput | number
    receiptDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    receiptNo?: NullableStringFieldUpdateOperationsInput | string | null
    term?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    feeTransactions?: FeeTransactionUpdateManyWithoutStudentFeesNestedInput
    feeStructure?: FeeStructureUpdateOneRequiredWithoutStudentFeesNestedInput
  }

  export type StudentFeesUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    paidAmount?: IntFieldUpdateOperationsInput | number
    abacusPaidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeStructureId?: IntFieldUpdateOperationsInput | number
    discountAmount?: IntFieldUpdateOperationsInput | number
    fineAmount?: IntFieldUpdateOperationsInput | number
    receiptDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    receiptNo?: NullableStringFieldUpdateOperationsInput | string | null
    term?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    feeTransactions?: FeeTransactionUncheckedUpdateManyWithoutStudentFeesNestedInput
  }

  export type StudentFeesUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    paidAmount?: IntFieldUpdateOperationsInput | number
    abacusPaidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeStructureId?: IntFieldUpdateOperationsInput | number
    discountAmount?: IntFieldUpdateOperationsInput | number
    fineAmount?: IntFieldUpdateOperationsInput | number
    receiptDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    receiptNo?: NullableStringFieldUpdateOperationsInput | string | null
    term?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentTotalFeesUpdateWithoutStudentInput = {
    totalPaidAmount?: FloatFieldUpdateOperationsInput | number
    totalDiscountAmount?: FloatFieldUpdateOperationsInput | number
    totalFineAmount?: FloatFieldUpdateOperationsInput | number
    totalAbacusAmount?: FloatFieldUpdateOperationsInput | number
    totalFeeAmount?: FloatFieldUpdateOperationsInput | number
    dueAmount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type StudentTotalFeesUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalPaidAmount?: FloatFieldUpdateOperationsInput | number
    totalDiscountAmount?: FloatFieldUpdateOperationsInput | number
    totalFineAmount?: FloatFieldUpdateOperationsInput | number
    totalAbacusAmount?: FloatFieldUpdateOperationsInput | number
    totalFeeAmount?: FloatFieldUpdateOperationsInput | number
    dueAmount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type StudentTotalFeesUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalPaidAmount?: FloatFieldUpdateOperationsInput | number
    totalDiscountAmount?: FloatFieldUpdateOperationsInput | number
    totalFineAmount?: FloatFieldUpdateOperationsInput | number
    totalAbacusAmount?: FloatFieldUpdateOperationsInput | number
    totalFeeAmount?: FloatFieldUpdateOperationsInput | number
    dueAmount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ExamSubjectCreateManySubjectInput = {
    id?: number
    examId: number
    maxMarks: number
  }

  export type LessonCreateManySubjectInput = {
    id?: number
    name: string
    day: $Enums.LessonDay
    startTime: Date | string
    endTime: Date | string
    classId: number
    teacherId: string
  }

  export type ResultCreateManySubjectInput = {
    id?: number
    score: number
    studentId: string
    examId: number
  }

  export type TeacherSubjectCreateManySubjectInput = {
    teacherId: string
  }

  export type ExamSubjectUpdateWithoutSubjectInput = {
    maxMarks?: IntFieldUpdateOperationsInput | number
    Exam?: ExamUpdateOneRequiredWithoutSubjectsNestedInput
  }

  export type ExamSubjectUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    maxMarks?: IntFieldUpdateOperationsInput | number
  }

  export type ExamSubjectUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    maxMarks?: IntFieldUpdateOperationsInput | number
  }

  export type LessonUpdateWithoutSubjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    day?: EnumLessonDayFieldUpdateOperationsInput | $Enums.LessonDay
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    Class?: ClassUpdateOneRequiredWithoutLessonsNestedInput
    Teacher?: TeacherUpdateOneRequiredWithoutLessonsNestedInput
  }

  export type LessonUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    day?: EnumLessonDayFieldUpdateOperationsInput | $Enums.LessonDay
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: IntFieldUpdateOperationsInput | number
    teacherId?: StringFieldUpdateOperationsInput | string
  }

  export type LessonUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    day?: EnumLessonDayFieldUpdateOperationsInput | $Enums.LessonDay
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: IntFieldUpdateOperationsInput | number
    teacherId?: StringFieldUpdateOperationsInput | string
  }

  export type ResultUpdateWithoutSubjectInput = {
    score?: FloatFieldUpdateOperationsInput | number
    Exam?: ExamUpdateOneRequiredWithoutResultsNestedInput
    Student?: StudentUpdateOneRequiredWithoutResultsNestedInput
  }

  export type ResultUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    examId?: IntFieldUpdateOperationsInput | number
  }

  export type ResultUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    examId?: IntFieldUpdateOperationsInput | number
  }

  export type TeacherSubjectUpdateWithoutSubjectInput = {
    Teacher?: TeacherUpdateOneRequiredWithoutSubjectsNestedInput
  }

  export type TeacherSubjectUncheckedUpdateWithoutSubjectInput = {
    teacherId?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherSubjectUncheckedUpdateManyWithoutSubjectInput = {
    teacherId?: StringFieldUpdateOperationsInput | string
  }

  export type LessonCreateManyTeacherInput = {
    id?: number
    name: string
    day: $Enums.LessonDay
    startTime: Date | string
    endTime: Date | string
    subjectId: number
    classId: number
  }

  export type TeacherSubjectCreateManyTeacherInput = {
    subjectId: number
  }

  export type LessonUpdateWithoutTeacherInput = {
    name?: StringFieldUpdateOperationsInput | string
    day?: EnumLessonDayFieldUpdateOperationsInput | $Enums.LessonDay
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    Class?: ClassUpdateOneRequiredWithoutLessonsNestedInput
    Subject?: SubjectUpdateOneRequiredWithoutLessonsNestedInput
  }

  export type LessonUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    day?: EnumLessonDayFieldUpdateOperationsInput | $Enums.LessonDay
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    subjectId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
  }

  export type LessonUncheckedUpdateManyWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    day?: EnumLessonDayFieldUpdateOperationsInput | $Enums.LessonDay
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    subjectId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
  }

  export type TeacherSubjectUpdateWithoutTeacherInput = {
    Subject?: SubjectUpdateOneRequiredWithoutTeachersNestedInput
  }

  export type TeacherSubjectUncheckedUpdateWithoutTeacherInput = {
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type TeacherSubjectUncheckedUpdateManyWithoutTeacherInput = {
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentFeesCreateManyFeeStructureInput = {
    id?: number
    studentId: string
    paidAmount?: number
    abacusPaidAmount?: number | null
    discountAmount?: number
    fineAmount?: number
    receiptDate?: Date | string | null
    receivedDate?: Date | string | null
    paymentMode?: $Enums.PaymentMode
    academicYear?: $Enums.AcademicYear
    receiptNo?: string | null
    term: string
    remarks?: string | null
  }

  export type StudentFeesUpdateWithoutFeeStructureInput = {
    paidAmount?: IntFieldUpdateOperationsInput | number
    abacusPaidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    discountAmount?: IntFieldUpdateOperationsInput | number
    fineAmount?: IntFieldUpdateOperationsInput | number
    receiptDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    receiptNo?: NullableStringFieldUpdateOperationsInput | string | null
    term?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    feeTransactions?: FeeTransactionUpdateManyWithoutStudentFeesNestedInput
    student?: StudentUpdateOneRequiredWithoutStudentFeesNestedInput
  }

  export type StudentFeesUncheckedUpdateWithoutFeeStructureInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    paidAmount?: IntFieldUpdateOperationsInput | number
    abacusPaidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    discountAmount?: IntFieldUpdateOperationsInput | number
    fineAmount?: IntFieldUpdateOperationsInput | number
    receiptDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    receiptNo?: NullableStringFieldUpdateOperationsInput | string | null
    term?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    feeTransactions?: FeeTransactionUncheckedUpdateManyWithoutStudentFeesNestedInput
  }

  export type StudentFeesUncheckedUpdateManyWithoutFeeStructureInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    paidAmount?: IntFieldUpdateOperationsInput | number
    abacusPaidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    discountAmount?: IntFieldUpdateOperationsInput | number
    fineAmount?: IntFieldUpdateOperationsInput | number
    receiptDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    academicYear?: EnumAcademicYearFieldUpdateOperationsInput | $Enums.AcademicYear
    receiptNo?: NullableStringFieldUpdateOperationsInput | string | null
    term?: StringFieldUpdateOperationsInput | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeeTransactionCreateManyStudentFeesInput = {
    id?: number
    studentId: string
    term: string
    amount?: number
    discountAmount?: number
    fineAmount?: number
    receiptDate: Date | string
    receiptNo: string
    paymentMode?: $Enums.PaymentMode
    createdAt?: Date | string
    updatedAt?: Date | string
    remarks?: string | null
  }

  export type FeeTransactionUpdateWithoutStudentFeesInput = {
    term?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    fineAmount?: FloatFieldUpdateOperationsInput | number
    receiptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentUpdateOneRequiredWithoutFeeTransactionsNestedInput
  }

  export type FeeTransactionUncheckedUpdateWithoutStudentFeesInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    fineAmount?: FloatFieldUpdateOperationsInput | number
    receiptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeeTransactionUncheckedUpdateManyWithoutStudentFeesInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    fineAmount?: FloatFieldUpdateOperationsInput | number
    receiptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}