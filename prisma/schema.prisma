generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  password   String
  full_name  String
  parentName String? // Now optional
  gender     String? // Now optional
  email      String?
  phone      String? // Now optional
  address    String? // Now optional
  dob        DateTime?
  img        String?
  bloodType  String?
  role       String    @default("admin")
  createdAt  DateTime  @default(now())
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  Class       Class?   @relation(fields: [classId], references: [id])

  @@index([classId])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  classId   Int
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  Student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
}

model Class {
  id           Int            @id @default(autoincrement())
  name         String         @unique(map: "Class_name_key")
  supervisorId String?        @unique // Ensures one teacher per class
  // supervisorId String?  // ❌ Remove @unique here to allow multiple classes to have the same supervisor
  gradeId      Int
  Announcement Announcement[]
  attendance   Attendance[]
  events       Event[]
  exams        Exam[]
  fees         FeesStructure?
  homeworks    Homework[]
  lessons      Lesson[]
  students     Student[]
  Grade        Grade          @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  Teacher      Teacher?       @relation(name: "ClassToTeacher", fields: [supervisorId], references: [id]) // One-to-One relation.
  payments     Payment[]
  Fee          StudentFee[]

  @@index([gradeId], map: "Class_gradeId_idx")
  @@index([supervisorId], map: "Class_supervisorId_idx")
  @@map("class")
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  Class       Class?   @relation(fields: [classId], references: [id])

  @@index([classId])
}

model Exam {
  id       Int           @id @default(autoincrement())
  title    String
  date     DateTime
  classId  Int
  Class    Class         @relation(fields: [classId], references: [id], onDelete: Cascade)
  subjects ExamSubject[]
  results  Result[]

  @@index([classId])
}

model ExamSubject {
  id        Int     @id @default(autoincrement())
  examId    Int
  subjectId Int
  maxMarks  Int
  Exam      Exam    @relation(fields: [examId], references: [id], onDelete: Cascade)
  Subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([examId, subjectId])
}

model StudentFee {
  id         Int       @id @default(autoincrement())
  studentId  String
  classId    Int
  term       FeeTerm
  amount     Int
  extraFee   Int       @default(0)
  totalFee   Int
  dueAmount  Int
  paidAmount Int       @default(0)
  discount   Int       @default(0)
  fine       Int       @default(0)
  status     termspaid  @default(NOT_PAID)
  feesbook   String
  dueDate    DateTime
  paidDate   DateTime?
  createdAt  DateTime  @default(now())
  Student    Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  classes    Class     @relation(fields: [classId], references: [id])

  payments   FeePayment[]  // New: Link payments
  @@unique([studentId, term])
}

model FeesStructure {
  id         Int   @id @default(autoincrement())
  classId    Int   @unique
  totalFees  Int
  abacusFees Int
  termFees   Int
  class      Class @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model FeePayment {
  id            Int            @id @default(autoincrement())
  studentFeeId  Int
  amount        Int
  discount      Int            @default(0)
  fine          Int            @default(0)
  method        PaymentMethod  @default(CASH)  // Default payment method set to CASH
  transactionId String?        // For online payments
  paidDate      DateTime       @default(now())

  studentFee    StudentFee     @relation(fields: [studentFeeId], references: [id], onDelete: Cascade)
}

enum PaymentMethod {
  CASH
  UPI
  BANK_TRANSFER
  ONLINE
}


model Grade {
  id       Int        @id @default(autoincrement())
  level    String     @unique
  classes  Class[]
  Homework Homework[]
}

model Homework {
  id          Int      @id @default(autoincrement())
  description String
  date        DateTime @default(now()) @db.Timestamptz // ✅ Store with timezone
  classId     Int
  Class       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  gradeId     Int
  Grade       Grade    @relation(fields: [gradeId], references: [id]) // ✅ Ensure relation is defined
  // subjectId   Int
  // Subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  // @@index([subjectId])

  @@index([classId])
}

model Lesson {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  day       LessonDay
  startTime DateTime
  endTime   DateTime
  subjectId Int
  classId   Int
  teacherId String
  Class     Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  Subject   Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  Teacher   Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([classId])
  @@index([subjectId])
  @@index([teacherId])
}

model Payment {
  id         Int      @id @default(autoincrement())
  studentId  String
  classId    Int
  amountPaid Int
  datePaid   DateTime @default(now())

  Student Student @relation(fields: [studentId], references: [id])
  Class   Class   @relation(fields: [classId], references: [id])
}

model Result {
  id        Int     @id @default(autoincrement())
  score     Float
  studentId String
  examId    Int
  subjectId Int
  Exam      Exam    @relation(fields: [examId], references: [id], onDelete: Cascade)
  Student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  Subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@index([examId])
  @@index([studentId])
  @@index([subjectId])
}

model Student {
  id           String         @id
  username     String         @unique
  name         String
  surname      String?
  parentName   String
  email        String?        @unique
  phone        String
  address      String
  img          String?
  bloodType    String?
  gender       Gender
  dob          DateTime
  createdAt    DateTime       @default(now())
  deletedAt    DateTime?
  classId      Int
  Attendance   Attendance[]
  Fee          StudentFee[]
  results      Result[]
  Class        Class          @relation(fields: [classId], references: [id], onDelete: Cascade)
  studentFees  StudentFees[]
  clerkStudent ClerkStudents?
  clerk_id     String?        @unique
  payments     Payment[]

  @@index([classId])
}

model ClerkStudents {
  clerk_id  String   @id @db.VarChar // Keep as primary key
  user_id   String?  @unique // New column for Clerk User ID
  username  String   @unique
  password  String   @db.VarChar
  full_name String   @db.VarChar
  role      String   @default("student") @db.VarChar
  studentId String?  @unique @db.VarChar // Foreign Key (Optional, in case some users aren't students)
  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade) // Inverse Relation
}

model StudentFees {
  id          Int      @id @default(autoincrement())
  studentId   String
  term        FeeTerm
  paidAmount  Int
  abacusPaid  Boolean  @default(false)
  paymentDate DateTime @default(now())
  student     Student  @relation(fields: [studentId], references: [id])
}

model Subject {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  createdAt DateTime         @default(now())
  exams     ExamSubject[]
  // homeworks Homework[]
  lessons   Lesson[]
  results   Result[]
  teachers  TeacherSubject[]
}

model Teacher {
  id            String           @id
  username      String           @unique
  name          String
  surname       String?
  email         String?          @unique
  phone         String
  address       String
  img           String?
  bloodType     String?
  gender        Gender
  createdAt     DateTime         @default(now())
  deletedAt     DateTime?
  supervisor    Boolean          @default(false)
  dob           DateTime?
  lessons       Lesson[]
  subjects      TeacherSubject[]
  class         Class?           @relation(name: "ClassToTeacher") // Opposite relation defined WITHOUT fields/references
  classId       String?          @unique
  ClerkTeachers ClerkTeachers?
  clerk_id      String?          @unique
}

model TeacherSubject {
  teacherId String
  subjectId Int
  Subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  Teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@id([teacherId, subjectId])
}

model ClerkTeachers {
  clerk_id  String   @id @db.VarChar // Keep as primary key
  user_id   String?  @unique // New column for Clerk User ID
  username  String   @unique
  password  String   @db.VarChar
  full_name String   @db.VarChar
  role      String   @default("teacher") @db.VarChar
  teacherId String?  @unique @db.VarChar // Foreign Key (Optional, in case some users aren't teachers)
  teacher   Teacher? @relation(fields: [teacherId], references: [id], onDelete: Cascade) // Inverse Relation
}

enum FeeTerm {
  TERM1
  TERM2
  ABACUS
  TERM3
  TERM4
}

enum LessonDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum Gender {
  Male
  Female
}

enum termspaid {
  TERM1
  TERM2
  ABACUS
  TERM3
  TERM4
  NOT_PAID
}
