generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique(map: "Admin_username_key")
  createdAt DateTime @default(now())
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  Class       Class?   @relation(fields: [classId], references: [id], onDelete: SetNull)

  @@index([classId], map: "Announcement_classId_idx")
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  classId   Int
  studentId String
  Student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  @@index([studentId], map: "Attendance_studentId_idx")
}

model Class {
  id           Int            @id @default(autoincrement())
  name         String         @unique(map: "Class_name_key")
  supervisorId String?
  gradeId      Int
  Announcement Announcement[]
  Grade        Grade          @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  Teacher      Teacher?       @relation(fields: [supervisorId], references: [id], onDelete: SetNull)
  events       Event[]
  lessons      Lesson[]
  students     Student[]
  homeworks    Homework[]
  exams        Exam[]
  attendance   Attendance[]

  fees FeesStructure?  @relation() // Only establish the relation, no fields or references

  @@index([gradeId], map: "Class_gradeId_idx")
  @@index([supervisorId], map: "Class_supervisorId_idx")
  @@map("class")
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  Class       Class?   @relation(fields: [classId], references: [id], onDelete: SetNull)

  @@index([classId], map: "Event_classId_idx")
}

model Exam {
  id       Int           @id @default(autoincrement())
  title    String
  date     DateTime
  classId  Int
  Class    Class         @relation(fields: [classId], references: [id], onDelete: Cascade)
  subjects ExamSubject[] // Link exams with subjects
  results  Result[] // Store students' marks

  @@index([classId], map: "Exam_classId_idx")
}

model ExamSubject {
  id        Int @id @default(autoincrement())
  examId    Int
  subjectId Int
  maxMarks  Int // Example: 100 marks per subject

  Exam    Exam    @relation(fields: [examId], references: [id], onDelete: Cascade)
  Subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([examId, subjectId], map: "ExamSubject_examId_subjectId_key")
}

model Fee {
  id         Int       @id @default(autoincrement())
  studentId  String
  term       FeeTerm
  amount     Int // Base term fee (₹6,000 per term)
  extraFee   Int       @default(0) // ₹400 per term for Grades I-IX
  totalFee   Int // amount + extraFee
  dueAmount  Int // Computed as totalFee - paidAmount
  paidAmount Int       @default(0) // Amount collected so far
  status     String    @default("Not Paid") // "Not Paid", "1 Term", "2 Terms", "3 Terms", "Total Paid", "RTE"
  feesbook   String
  dueDate    DateTime
  paidDate   DateTime?
  createdAt  DateTime  @default(now())
  Student    Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, term], map: "Fee_studentId_term_key")
}

model FeesStructure {
  id         Int @id @default(autoincrement())
  classId    Int @unique
  totalFees  Int
  abacusFees Int
  termFees   Int

  class Class @relation(fields: [classId], references: [id], onDelete: Cascade) // Define fields & references **only here**
}

model Grade {
  id      Int     @id @default(autoincrement())
  level   String  @unique(map: "Grade_level_key")
  classes Class[]
}

model Homework {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  Date        DateTime
  classId     Int
  subjectId   Int

  Class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  Subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@index([classId], map: "Homework_classId_idx")
  @@index([subjectId], map: "Homework_subjectId_idx")
}

model Lesson {
  id        Int       @id @default(autoincrement())
  name      String    @unique(map: "Lesson_name_key")
  day       LessonDay
  startTime DateTime
  endTime   DateTime
  subjectId Int
  classId   Int
  teacherId String
  Class     Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  Subject   Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  Teacher   Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([classId], map: "Lesson_classId_idx")
  @@index([subjectId], map: "Lesson_subjectId_idx")
  @@index([teacherId], map: "Lesson_teacherId_idx")
}

model Result {
  id        Int    @id @default(autoincrement())
  score     Float
  studentId String
  examId    Int
  subjectId Int

  Student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  Exam    Exam    @relation(fields: [examId], references: [id], onDelete: Cascade)
  Subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@index([examId], map: "Result_examId_idx")
  @@index([studentId], map: "Result_studentId_idx")
  @@index([subjectId], map: "Result_subjectId_idx")
}

model Student {
  id          String        @id
  username    String        @unique(map: "Student_username_key")
  name        String
  surname     String
  parentName  String
  email       String?       @unique(map: "Student_email_key")
  phone       String
  address     String
  img         String?
  bloodType   String?
  gender      Gender
  dob         DateTime
  createdAt   DateTime      @default(now())
  deletedAt   DateTime?
  classId     Int
  Attendance  Attendance[]
  Fee         Fee[]
  results     Result[]
  Class       Class         @relation(fields: [classId], references: [id], onDelete: Cascade)
  studentFees StudentFees[]

  @@index([classId], map: "Student_classId_idx")
}

model StudentFees {
  id          Int      @id @default(autoincrement())
  studentId   String
  termNumber  Int
  paidAmount  Int
  abacusPaid  Boolean  @default(false)
  paymentDate DateTime @default(now())
  student     Student  @relation(fields: [studentId], references: [id])
}

model Subject {
  id        Int           @id @default(autoincrement())
  name      String        @unique(map: "Subject_name_key")
  createdAt DateTime      @default(now())
  lessons   Lesson[]
  teachers  TeacherSubject[]
  homeworks Homework[]
  exams     ExamSubject[]
  results   Result[]
}

model Teacher {
  id         String    @id
  username   String    @unique(map: "Teacher_username_key")
  name       String
  surname    String
  email      String?   @unique(map: "Teacher_email_key")
  phone      String
  address    String
  img        String?
  bloodType  String?
  gender     Gender
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  supervisor Boolean   @default(false)
  dob        DateTime?
  classes    Class[]
  lessons    Lesson[]
  subjects   TeacherSubject[]
}

model TeacherSubject {
  teacherId String
  subjectId Int

  Teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  Subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@id([teacherId, subjectId]) // Composite Primary Key
}


enum FeeTerm {
  TERM1
  TERM2
  TERM3
  TERM4
}

enum LessonDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum Gender {
  Male
  Female
}
