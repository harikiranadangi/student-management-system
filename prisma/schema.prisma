generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       Int    @id @default(autoincrement())
  username String @unique
}

model Student {
  id        String   @id
  username  String   @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String
  addresss  String
  img       String?
  bloodType String?
  gender    Gender
  createdAt DateTime @default(now())

  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
}

model Teacher {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  name      String
  surname   String
  email     String?
  phone     String
  address   String
  img       String?
  bloodType String?
  gender    Gender
  createdAt DateTime @default(now())

  subjects Subject[]
  lessons  Lesson[]
  classes  Class[]
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  Class    Class[]
}

model Class {
  id   Int    @id @default(autoincrement())
  name String @unique

  supervisorId  Int
  supervisor    Teacher        @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  announcements Announcement[]
  events        Event[]
  Homework      Homework?      @relation(fields: [homeworkId], references: [id])
  homeworkId    Int?
}

model Subject {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  teachers   Teacher[]
  lessons    Lesson[]
  homeworkId Int?
  Homework   Homework? @relation(fields: [homeworkId], references: [id])
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   Int
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson @relation(fields: [lessonId], references: [id])

  results Result[]
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Homework {
  id          Int       @id @default(autoincrement())
  date        DateTime  @default(now())
  description String
  subject     Subject[]
  class       Class[]
}

enum Gender {
  Male
  Female
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
