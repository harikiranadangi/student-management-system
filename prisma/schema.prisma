// Client generator
generator client {
  provider = "prisma-client-js"
}

// Database datasource
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") // Ensure DATABASE_URL is set in your .env file
}


// Enum for grade levels
enum Grade {
  PRE_KG
  LKG
  UKG
  I    // First Grade (Class 1)
  II   // Second Grade (Class 2)
  III  // Third Grade (Class 3)
  IV   // Fourth Grade (Class 4)
  V    // Fifth Grade (Class 5)
  VI   // Sixth Grade (Class 6)
  VII  // Seventh Grade (Class 7)
  VIII // Eighth Grade (Class 8)
  IX   // Ninth Grade (Class 9)
  X    // Tenth Grade (Class 10)
}


enum Term {
  TERM_1
  TERM_2
  TERM_3
  TERM_4
}

// Optional enum for payment status
enum PaymentStatus {
  PAID
  PENDING
  OVERDUE
}

// Optional enum for attendance status
enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum Gender {
  Male
  Female
}

// Student model
model Students {
  id                 Int                  @id @default(autoincrement())
  name               String
  grade              Grade                // Enum for grade level
  mobileNumber       String
  dateOfBirth        DateTime?
  address            String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?            // Soft delete for students

  teacherId          Int?
  Teachers           Teachers?            @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  Attendance         Attendance[]         // Relation to Attendance records
  Payments           Payments[]           // Relation to Payments records
  TeacherAssignments TeacherAssignments[] // Relation to TeacherAssignments
}

// Teacher model
model Teachers {
  id                 Int                  @id @default(autoincrement())
  username           String               @unique
  name               String
  surname            String
  email              String?               @unique
  phone              String               @unique
  address            String               
  img                String?
  bloodtype          String
  gender             Gender
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime? // Soft delete for teachers

  subjects           Subject[]
  classes            Class[]
}

model Class {
  id Int @id @default(autoincrement())
  name Int @unique

  students Students[]
 }



// Attendance model
model Attendance {
  id        Int              @id @default(autoincrement())
  studentId Int
  classId   Int
  status    AttendanceStatus // Use the enum here
  createdAt DateTime         @default(now())

  Students      Students      @relation(fields: [studentId], references: [id])

}



// Payments model
model Payments {
  id          Int      @id @default(autoincrement())
  studentId   Int
  amount      Float
  term        Term // Enum for term-based payments
  recieptDate DateTime
  paymentDate DateTime @default(now())
  status      String   @default("Pending") // Set a default value or ensure correct enum
       
  Students Students @relation(fields: [studentId], references: [id])
}


// TeacherAssignments model
model TeacherAssignments {
  id                 Int               @id @default(autoincrement())
  teacherId          Int
  studentId          Int
  subject            String            // Subject taught by teacher to student
  createdAt          DateTime          @default(now())

  Teachers           Teachers          @relation(fields: [teacherId], references: [id])
  Students           Students          @relation(fields: [studentId], references: [id])
}
