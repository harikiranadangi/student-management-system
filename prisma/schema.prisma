generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique(map: "Admin_username_key")
  createdAt DateTime @default(now())
}

model Announcement {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  Class       Class?  @relation(fields: [classId], references: [id], map: "Announcement_classId_fkey")

  @@index([classId], map: "Announcement_classId_fkey")
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  endDate   DateTime
  lessonId  Int
  Lesson    Lesson   @relation(fields: [lessonId], references: [id], map: "Assignment_lessonId_fkey")
  Result    Result[]

  @@index([lessonId], map: "Assignment_lessonId_fkey")
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  Student   Student  @relation(fields: [studentId], references: [id], map: "Attendance_studentId_fkey")

  @@index([studentId], map: "Attendance_studentId_fkey")
}

model Class {
  id           Int            @id @default(autoincrement())
  name         String         @unique(map: "Class_name_key")
  supervisorId String?
  gradeId      Int
  Announcement Announcement[]
  Grade        Grade          @relation(fields: [gradeId], references: [id], map: "Class_gradeId_fkey")
  Teacher      Teacher?       @relation(fields: [supervisorId], references: [id], map: "Class_supervisorId_fkey")
  Event        Event[]
  Lesson       Lesson[]
  Student      Student[]

  @@index([gradeId], map: "Class_gradeId_fkey")
  @@index([supervisorId], map: "Class_supervisorId_fkey")
  @@map("class")
}

model Event {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  Class       Class?  @relation(fields: [classId], references: [id], map: "Event_classId_fkey")

  @@index([classId], map: "Event_classId_fkey")
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  Lesson    Lesson   @relation(fields: [lessonId], references: [id], map: "Exam_lessonId_fkey")
  Result    Result[]

  @@index([lessonId], map: "Exam_lessonId_fkey")
}

model Fee {
  id        Int       @id @default(autoincrement())
  studentId String
  term      FeeTerm
  amount    Decimal
  status    String
  dueDate   DateTime
  paidDate  DateTime?
  createdAt DateTime  @default(now())
  Student   Student   @relation(fields: [studentId], references: [id], map: "Fee_studentId_fkey")

  @@unique([studentId, term], map: "Fee_studentId_term_key")
}

model Grade {
  id      Int      @id @default(autoincrement())
  level   Int      @unique(map: "Grade_level_key")
  Class   Class[]
  Student Student[]
}

model Lesson {
  id        Int       @id @default(autoincrement())
  name      String    @unique(map: "Lesson_name_key")
  day       LessonDay
  startTime DateTime
  endTime   DateTime
  subjectId Int
  classId   Int
  teacherId String
  Assignment Assignment[]
  Exam      Exam[]
  Class     Class     @relation(fields: [classId], references: [id], map: "Lesson_classId_fkey")
  Subject   Subject   @relation(fields: [subjectId], references: [id], map: "Lesson_subjectId_fkey")
  Teacher   Teacher   @relation(fields: [teacherId], references: [id], map: "Lesson_teacherId_fkey")

  @@index([classId], map: "Lesson_classId_fkey")
  @@index([subjectId], map: "Lesson_subjectId_fkey")
  @@index([teacherId], map: "Lesson_teacherId_fkey")
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Int
  examId       Int?
  assignmentId Int?
  studentId    String
  Assignment   Assignment? @relation(fields: [assignmentId], references: [id], map: "Result_assignmentId_fkey")
  Exam         Exam?       @relation(fields: [examId], references: [id], map: "Result_examId_fkey")
  Student      Student     @relation(fields: [studentId], references: [id], map: "Result_studentId_fkey")

  @@index([assignmentId], map: "Result_assignmentId_fkey")
  @@index([examId], map: "Result_examId_fkey")
  @@index([studentId], map: "Result_studentId_fkey")
}

model Student {
  id         String     @id
  username   String     @unique(map: "Student_username_key")
  name       String
  surname    String
  parentName String
  email      String?    @unique(map: "Student_email_key")
  phone      String
  address    String
  img        String?
  bloodType  String?
  gender     StudentGender
  dob        DateTime
  createdAt  DateTime   @default(now())
  classId    Int
  gradeId    Int
  Attendance Attendance[]
  Fee        Fee[]
  Result     Result[]
  Class      Class      @relation(fields: [classId], references: [id], map: "Student_classId_fkey")
  Grade      Grade      @relation(fields: [gradeId], references: [id], map: "Student_gradeId_fkey")

  @@index([classId], map: "Student_classId_idx")
  @@index([gradeId], map: "Student_gradeId_fkey")
}

model Subject {
  id        Int      @id @default(autoincrement())
  name      String   @unique(map: "Subject_name_key")
  createdAt DateTime @default(now())
  Lesson    Lesson[]
  Teacher   Teacher[] @relation("subjecttoteacher")
}

model Teacher {
  id         String    @id
  username   String    @unique(map: "Teacher_username_key")
  name       String
  surname    String
  email      String?   @unique(map: "Teacher_email_key")
  phone      String
  address    String
  img        String?
  bloodType  String?
  gender     TeacherGender
  createdAt  DateTime  @default(now())
  supervisor Boolean   @default(false)
  dob        DateTime?
  Class      Class[]
  Lesson     Lesson[]
  Subject    Subject[] @relation("subjecttoteacher")
}

enum FeeTerm {
  TERM1
  TERM2
  TERM3
  TERM4
}

enum LessonDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum TeacherGender {
  Male
  Female
}

enum StudentGender {
  Male
  Female
}
