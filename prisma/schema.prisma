generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  password   String
  full_name  String
  parentName String?
  gender     String?
  email      String?
  phone      String?
  address    String?
  dob        DateTime?
  img        String?
  bloodType  String?
  role       String    @default("admin")
  createdAt  DateTime  @default(now())
  clerkId    String?   @unique
}

model Grade {
  id                Int                @id @default(autoincrement())
  level             String             @unique
  examGradeSubjects ExamGradeSubject[]
  feestructure      FeeStructure[]     @relation("GradeToFeesStructure")
  Homework          Homework[]
  classes           Class[]
  subjects          Subject[]          @relation("SubjectGrades")
}

model Class {
  id              Int              @id @default(autoincrement())
  name            String           @unique(map: "Class_name_key")
  supervisorId    String?          @unique
  gradeId         Int
  Announcement    Announcement[]
  attendances     Attendance[]
  events          Event[]
  homeworks       Homework[]
  lessons         Lesson[]
  messages        Messages[]
  students        Student[]
  subjectTeachers SubjectTeacher[]
  Grade           Grade            @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  Teacher         Teacher?         @relation("ClassToTeacher", fields: [supervisorId], references: [id])

  @@index([gradeId], map: "Class_gradeId_idx")
  @@index([supervisorId], map: "Class_supervisorId_idx")
  @@map("class")
}

model Lesson {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  day       LessonDay
  startTime DateTime
  endTime   DateTime
  subjectId Int
  classId   Int
  teacherId String
  Class     Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  Subject   Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  Teacher   Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([classId])
  @@index([subjectId])
  @@index([teacherId])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  Class       Class?   @relation(fields: [classId], references: [id])

  @@index([classId])
}

model Messages {
  id        String      @id @default(cuid())
  message   String
  type      MessageType
  studentId String?
  date      DateTime
  classId   Int?
  Class     Class?      @relation(fields: [classId], references: [id])
  Student   Student?    @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  Class       Class?   @relation(fields: [classId], references: [id])

  @@index([classId])
}

model Exam {
  id                Int                @id @default(autoincrement())
  title             String
  date              DateTime
  examGradeSubjects ExamGradeSubject[]
  results           Result[]
}

model ExamGradeSubject {
  id        Int      @id @default(autoincrement())
  examId    Int
  gradeId   Int
  subjectId Int
  date      DateTime
  startTime String
  maxMarks  Int
  Exam      Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  Grade     Grade    @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  Subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([examId, gradeId, subjectId])
}

model Homework {
  id          Int      @id @default(autoincrement())
  description String
  date        DateTime @default(now()) @db.Timestamptz(6)
  classId     Int
  gradeId     Int
  Class       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  Grade       Grade    @relation(fields: [gradeId], references: [id])

  @@index([classId])
  @@index([gradeId])
}

model Result {
  id        Int      @id @default(autoincrement())
  marks     Int
  studentId String
  examId    Int
  subjectId Int
  createdAt DateTime @default(now())
  Exam      Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  Student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  Subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([studentId, examId, subjectId])
}

model Student {
  id              String            @id
  username        String            @unique
  name            String
  surname         String?
  parentName      String?
  email           String?           @unique
  phone           String
  address         String
  img             String?
  bloodType       String?
  gender          Gender
  dob             DateTime
  createdAt       DateTime          @default(now())
  deletedAt       DateTime?
  clerk_id        String?           @unique
  academicYear    AcademicYear      @default(Y2024_2025)
  classId         Int
  attendances     Attendance[]
  clerkStudent    ClerkStudents?
  feeTransactions FeeTransaction[]
  messages        Messages[]
  results         Result[]
  Class           Class             @relation(fields: [classId], references: [id], onDelete: Cascade)
  studentFees     StudentFees[]
  totalFees       StudentTotalFees?

  @@index([classId])
}

model ClerkStudents {
  clerk_id       String   @id @db.VarChar
  user_id        String?  @unique
  username       String   @unique
  password       String   @db.VarChar
  full_name      String   @db.VarChar
  role           String   @default("student") @db.VarChar
  studentId      String?  @unique @db.VarChar
  publicMetadata Json?    @default("{}")
  student        Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Subject {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  createdAt         DateTime           @default(now())
  examGradeSubjects ExamGradeSubject[]
  lessons           Lesson[]
  results           Result[]
  teachers          SubjectTeacher[]
  grades            Grade[]            @relation("SubjectGrades")
}

model Teacher {
  id            String           @id
  username      String           @unique
  name          String
  surname       String?
  email         String?          @unique
  phone         String
  address       String
  img           String?
  bloodType     String?
  gender        Gender
  createdAt     DateTime         @default(now())
  deletedAt     DateTime?
  supervisor    Boolean          @default(false)
  dob           DateTime?
  classId       String?          @unique
  clerk_id      String?          @unique
  ClerkTeachers ClerkTeachers?
  lessons       Lesson[]
  subjects      SubjectTeacher[]
  class         Class?           @relation("ClassToTeacher")
}

model SubjectTeacher {
  subjectId Int
  teacherId String
  classId   Int
  class     Class   @relation(fields: [classId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  @@id([subjectId, teacherId, classId])
}

model ClerkTeachers {
  clerk_id  String   @id @db.VarChar
  user_id   String?  @unique
  username  String   @unique
  password  String   @db.VarChar
  full_name String   @db.VarChar
  role      String   @default("teacher") @db.VarChar
  teacherId String?  @unique @db.VarChar
  teacher   Teacher? @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model FeeStructure {
  id           Int           @id @default(autoincrement())
  gradeId      Int
  startDate    DateTime
  dueDate      DateTime
  termFees     Int
  abacusFees   Int?
  term         Term
  academicYear AcademicYear  @default(Y2024_2025)
  grade        Grade         @relation("GradeToFeesStructure", fields: [gradeId], references: [id])
  studentFees  StudentFees[]

  @@unique([gradeId, term, academicYear])
}

model FeeTransaction {
  id             Int         @id @default(autoincrement())
  studentId      String
  term           String
  studentFeesId  Int
  amount         Float       @default(0)
  discountAmount Float       @default(0)
  fineAmount     Float       @default(0)
  receiptDate    DateTime
  receivedDate   DateTime?   @default(now())
  receiptNo      String
  paymentMode    PaymentMode @default(CASH)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  remarks        String?
  studentFees    StudentFees @relation("FeeTransactionStudentFees", fields: [studentFeesId], references: [id], onDelete: Cascade)
  student        Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model StudentFees {
  id               Int              @id @default(autoincrement())
  studentId        String
  paidAmount       Int              @default(0)
  abacusPaidAmount Int?
  feeStructureId   Int
  discountAmount   Int              @default(0)
  fineAmount       Int              @default(0)
  receiptDate      DateTime?
  receivedDate     DateTime?        @default(now())
  paymentMode      PaymentMode      @default(CASH)
  academicYear     AcademicYear     @default(Y2024_2025)
  receiptNo        String?
  term             String
  remarks          String?          @default("")
  feeTransactions  FeeTransaction[] @relation("FeeTransactionStudentFees")
  feeStructure     FeeStructure     @relation(fields: [feeStructureId], references: [id])
  student          Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, academicYear, term])
}

model StudentTotalFees {
  id                  Int     @id @default(autoincrement())
  studentId           String  @unique
  totalPaidAmount     Float   @default(0)
  totalDiscountAmount Float   @default(0)
  totalFineAmount     Float   @default(0)
  totalAbacusAmount   Float   @default(0)
  totalFeeAmount      Float   @default(0)
  dueAmount           Float   @default(0)
  status              String  @default("Not Paid")
  student             Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean  @default(true)
  studentId String
  classId   Int
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  Student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, date])
}

enum LessonDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum Gender {
  Male
  Female
}

enum Term {
  TERM_1
  TERM_2
  TERM_3
  TERM_4
}

enum PaymentMode {
  CASH
  ONLINE
  UPI
  BANK_TRANSFER
}

enum AcademicYear {
  Y2024_2025
  Y2025_2026
}

enum MessageType {
  ABSENT
  FEE_RELATED
  ANNOUNCEMENT
  GENERAL
  FEE_COLLECTION
}
