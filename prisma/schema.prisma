generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Models

model Admin {
  id       Int    @id @default(autoincrement())
  username String @unique
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int
  classes  Class[]
  students Student[]
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  supervisorId  Int?
  supervisor    Teacher?       @relation("ClassSupervisor", fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
  assignments   Assignment[]
  attendances   Attendance[]
  results       Result[]
  exams         Exam[]
  teachers      Teacher[]      @relation("TeacherClasses")
}

model Teacher {
  id                Int              @id @default(autoincrement())
  username          String           @unique
  name              String
  surname           String
  email             String?
  phone             String
  address           String
  img               String?
  gender            String
  createdAt         DateTime         @default(now())
  classes           Class[]          @relation("TeacherClasses")
  supervisedClasses Class[]          @relation("ClassSupervisor")
  lessons           Lesson[]
  teacherSubjects   TeacherSubject[]
}

model Subject {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  lessons         Lesson[]
  teacherSubjects TeacherSubject[]
  assignments     Assignment[]
  exams           Exam[] // Back-relation to the Exam model
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  subjectId Int
  subject   Subject  @relation(fields: [subjectId], references: [id])
  classId   Int
  class     Class    @relation(fields: [classId], references: [id])
  lessons   Lesson[] @relation("ExamLessons")
}

model TeacherSubject {
  id        Int @id @default(autoincrement())
  teacherId Int
  subjectId Int

  teacher Teacher @relation(fields: [teacherId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])
}

model Student {
  id          Int          @id @default(autoincrement())
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String
  address     String
  img         String?
  bloodType   String
  gender      String
  dob         DateTime
  parentName  String
  createdAt   DateTime     @default(now())
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  results     Result[]
  attendances Attendance[]
}

model Lesson {
  id          Int          @id @default(autoincrement())
  name        String
  day         String // Use Enum if specific days are needed
  startTime   DateTime
  endTime     DateTime
  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   Int
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]       @relation("ExamLessons")
  assignments Assignment[] @relation("AssignmentLessons")
  attendances Attendance[] @relation("AttendanceLessons")
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  subjectId Int
  classId   Int
  subject   Subject  @relation(fields: [subjectId], references: [id])
  class     Class    @relation(fields: [classId], references: [id])
  lessons   Lesson[] @relation("AssignmentLessons")
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId Int
  classId   Int
  student   Student  @relation(fields: [studentId], references: [id])
  class     Class    @relation(fields: [classId], references: [id])
  lessons   Lesson[] @relation("AttendanceLessons")
}

model Result {
  id        Int     @id @default(autoincrement())
  score     Float
  classId   Int
  studentId Int
  class     Class   @relation(fields: [classId], references: [id])
  student   Student @relation(fields: [studentId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int
  class       Class    @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int
  class       Class    @relation(fields: [classId], references: [id])
}
