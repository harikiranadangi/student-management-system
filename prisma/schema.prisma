// Client generator
generator client {
  provider = "prisma-client-js"
}

// Database datasource
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") // Ensure DATABASE_URL is set in your .env file
}

enum Term {
  TERM_1
  TERM_2
  TERM_3
  TERM_4
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum Gender {
  Male
  Female
}


// Class model
model Class {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  students   Students[]  // Relation to students in this class
  subjects   Subject[]   @relation("ClassSubjects") // Relation to subjects in this class
  teacherId  Int?
  teacher    Teachers?   @relation("TeacherClasses", fields: [teacherId], references: [id], onDelete: SetNull)
  Attendance Attendance[] // Relation to attendance records
}

// Student model
model Students {
  id                 Int                  @id @default(autoincrement())
  name               String
  mobileNumber       String
  dateOfBirth        DateTime?
  address            String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?            // Soft delete for students
  gender             Gender

  class              Class?               @relation(fields: [classId], references: [id], onDelete: SetNull)
  classId            Int?
  teacher            Teachers?            @relation("TeacherStudents", fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId          Int?
  Attendance         Attendance[]         // Relation to Attendance records
  Payments           Payments[]           // Relation to Payments records
  TeacherAssignments TeacherAssignments[] // Relation to TeacherAssignments
  subjects           Subject[]            @relation("SubjectStudents")
}

// Teacher model
model Teachers {
  id                 Int                  @id @default(autoincrement())
  username           String               @unique
  name               String
  surname            String
  email              String?              @unique
  phone              String               @unique
  address            String               
  img                String?
  bloodtype          String
  gender             Gender
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?            // Soft delete for teachers

  subjects           Subject[]
  classes            Class[]              @relation("TeacherClasses") // Classes taught by this teacher
  students           Students[]           @relation("TeacherStudents") // Students taught by this teacher
  TeacherAssignments TeacherAssignments[]
}



// Subject model
model Subject {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  teacherId  Int?
  teacher    Teachers?   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  students   Students[]  @relation("SubjectStudents") // Students enrolled in this subject
  classes    Class[]     @relation("ClassSubjects")    // Classes associated with this subject
  TeacherAssignments TeacherAssignments[]
}

// Attendance model
model Attendance {
  id        Int              @id @default(autoincrement())
  student   Students         @relation(fields: [studentId], references: [id])
  studentId Int
  class     Class            @relation(fields: [classId], references: [id])
  classId   Int
  status    AttendanceStatus // Use the enum here
  createdAt DateTime         @default(now())
}

// Payments model
model Payments {
  id          Int      @id @default(autoincrement())
  student     Students @relation(fields: [studentId], references: [id])
  studentId   Int
  amount      Float
  term        Term     // Enum for term-based payments
  recieptDate DateTime
  paymentDate DateTime @default(now())
  status      String   @default("Pending") // Set a default value or ensure correct enum
}

// TeacherAssignments model
model TeacherAssignments {
  id         Int      @id @default(autoincrement())
  teacher    Teachers @relation(fields: [teacherId], references: [id])
  teacherId  Int
  student    Students @relation(fields: [studentId], references: [id])
  studentId  Int
  subject    Subject  @relation(fields: [subjectId], references: [id])
  subjectId  Int
  createdAt  DateTime @default(now())
}
